
HC-10 BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059c0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004059c0  004059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20400000  004059c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001e0  2040086c  00406234  0002086c  2**2
                  ALLOC
  4 .stack        00002004  20400a4c  00406414  0002086c  2**0
                  ALLOC
  5 .heap         00000200  20402a50  00408418  0002086c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002086c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002089a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d194  00000000  00000000  000208f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b0b  00000000  00000000  0002da87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007892  00000000  00000000  0002f592  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ca8  00000000  00000000  00036e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  00037acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e514  00000000  00000000  000386fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b2bc  00000000  00000000  00056c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008c033  00000000  00000000  00061ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000042f0  00000000  00000000  000edf00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402a50 	.word	0x20402a50
  400004:	00401a91 	.word	0x00401a91
  400008:	00401b41 	.word	0x00401b41
  40000c:	00401b41 	.word	0x00401b41
  400010:	00401b41 	.word	0x00401b41
  400014:	00401b41 	.word	0x00401b41
  400018:	00401b41 	.word	0x00401b41
	...
  40002c:	00401b41 	.word	0x00401b41
  400030:	00401b41 	.word	0x00401b41
  400034:	00000000 	.word	0x00000000
  400038:	00401b41 	.word	0x00401b41
  40003c:	00401b41 	.word	0x00401b41
  400040:	00401b41 	.word	0x00401b41
  400044:	00401b41 	.word	0x00401b41
  400048:	00401b41 	.word	0x00401b41
  40004c:	00401b41 	.word	0x00401b41
  400050:	00401b41 	.word	0x00401b41
  400054:	00401b41 	.word	0x00401b41
  400058:	00401b41 	.word	0x00401b41
  40005c:	00401b41 	.word	0x00401b41
  400060:	00401b41 	.word	0x00401b41
  400064:	00000000 	.word	0x00000000
  400068:	00400dfd 	.word	0x00400dfd
  40006c:	00400e15 	.word	0x00400e15
  400070:	00400e2d 	.word	0x00400e2d
  400074:	00402551 	.word	0x00402551
  400078:	00401b41 	.word	0x00401b41
  40007c:	00401b41 	.word	0x00401b41
  400080:	00400e45 	.word	0x00400e45
  400084:	00400e5d 	.word	0x00400e5d
  400088:	00401b41 	.word	0x00401b41
  40008c:	00401b41 	.word	0x00401b41
  400090:	00401b41 	.word	0x00401b41
  400094:	00401b41 	.word	0x00401b41
  400098:	00401b41 	.word	0x00401b41
  40009c:	00401b41 	.word	0x00401b41
  4000a0:	00401b41 	.word	0x00401b41
  4000a4:	00401b41 	.word	0x00401b41
  4000a8:	00401b41 	.word	0x00401b41
  4000ac:	00401b41 	.word	0x00401b41
  4000b0:	00401b41 	.word	0x00401b41
  4000b4:	00401b41 	.word	0x00401b41
  4000b8:	00401b41 	.word	0x00401b41
  4000bc:	00402579 	.word	0x00402579
  4000c0:	00401b41 	.word	0x00401b41
  4000c4:	00401b41 	.word	0x00401b41
  4000c8:	00401b41 	.word	0x00401b41
  4000cc:	00401b41 	.word	0x00401b41
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401b41 	.word	0x00401b41
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401b41 	.word	0x00401b41
  4000e0:	00401b41 	.word	0x00401b41
  4000e4:	00401b41 	.word	0x00401b41
  4000e8:	00401b41 	.word	0x00401b41
  4000ec:	00401b41 	.word	0x00401b41
  4000f0:	00401b41 	.word	0x00401b41
  4000f4:	00401b41 	.word	0x00401b41
  4000f8:	00401b41 	.word	0x00401b41
  4000fc:	00401b41 	.word	0x00401b41
  400100:	00401b41 	.word	0x00401b41
  400104:	00401b41 	.word	0x00401b41
  400108:	00401b41 	.word	0x00401b41
  40010c:	00401b41 	.word	0x00401b41
  400110:	00401b41 	.word	0x00401b41
	...
  400120:	00401b41 	.word	0x00401b41
  400124:	00401b41 	.word	0x00401b41
  400128:	00401b41 	.word	0x00401b41
  40012c:	00401b41 	.word	0x00401b41
  400130:	00401b41 	.word	0x00401b41
  400134:	00000000 	.word	0x00000000
  400138:	00401b41 	.word	0x00401b41
  40013c:	00401b41 	.word	0x00401b41

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040086c 	.word	0x2040086c
  40015c:	00000000 	.word	0x00000000
  400160:	004059c8 	.word	0x004059c8

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400870 	.word	0x20400870
  400190:	004059c8 	.word	0x004059c8
  400194:	004059c8 	.word	0x004059c8
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	00400f75 	.word	0x00400f75
  40021c:	00400fe1 	.word	0x00400fe1
  400220:	00401051 	.word	0x00401051

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	00400fad 	.word	0x00400fad
  400290:	004010c9 	.word	0x004010c9

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	004010e5 	.word	0x004010e5
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00401101 	.word	0x00401101
  400408:	0040111d 	.word	0x0040111d

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400492:	4618      	mov	r0, r3
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2000      	movs	r0, #0
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	00401cb5 	.word	0x00401cb5
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	00400e75 	.word	0x00400e75
  40050c:	00400ef1 	.word	0x00400ef1
  400510:	00401b49 	.word	0x00401b49
  400514:	00400489 	.word	0x00400489

00400518 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400518:	b580      	push	{r7, lr}
  40051a:	b086      	sub	sp, #24
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400524:	2300      	movs	r3, #0
  400526:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400528:	68fb      	ldr	r3, [r7, #12]
  40052a:	2b00      	cmp	r3, #0
  40052c:	d012      	beq.n	400554 <_read+0x3c>
		return -1;
  40052e:	f04f 33ff 	mov.w	r3, #4294967295
  400532:	e013      	b.n	40055c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400534:	4b0b      	ldr	r3, [pc, #44]	; (400564 <_read+0x4c>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	4a0b      	ldr	r2, [pc, #44]	; (400568 <_read+0x50>)
  40053a:	6812      	ldr	r2, [r2, #0]
  40053c:	68b9      	ldr	r1, [r7, #8]
  40053e:	4610      	mov	r0, r2
  400540:	4798      	blx	r3
		ptr++;
  400542:	68bb      	ldr	r3, [r7, #8]
  400544:	3301      	adds	r3, #1
  400546:	60bb      	str	r3, [r7, #8]
		nChars++;
  400548:	697b      	ldr	r3, [r7, #20]
  40054a:	3301      	adds	r3, #1
  40054c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	3b01      	subs	r3, #1
  400552:	607b      	str	r3, [r7, #4]
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	2b00      	cmp	r3, #0
  400558:	dcec      	bgt.n	400534 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40055a:	697b      	ldr	r3, [r7, #20]
}
  40055c:	4618      	mov	r0, r3
  40055e:	3718      	adds	r7, #24
  400560:	46bd      	mov	sp, r7
  400562:	bd80      	pop	{r7, pc}
  400564:	20400934 	.word	0x20400934
  400568:	2040093c 	.word	0x2040093c

0040056c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	b086      	sub	sp, #24
  400570:	af00      	add	r7, sp, #0
  400572:	60f8      	str	r0, [r7, #12]
  400574:	60b9      	str	r1, [r7, #8]
  400576:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400578:	2300      	movs	r3, #0
  40057a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	2b01      	cmp	r3, #1
  400580:	d01e      	beq.n	4005c0 <_write+0x54>
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	2b02      	cmp	r3, #2
  400586:	d01b      	beq.n	4005c0 <_write+0x54>
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	2b03      	cmp	r3, #3
  40058c:	d018      	beq.n	4005c0 <_write+0x54>
		return -1;
  40058e:	f04f 33ff 	mov.w	r3, #4294967295
  400592:	e019      	b.n	4005c8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400594:	4b0e      	ldr	r3, [pc, #56]	; (4005d0 <_write+0x64>)
  400596:	681a      	ldr	r2, [r3, #0]
  400598:	4b0e      	ldr	r3, [pc, #56]	; (4005d4 <_write+0x68>)
  40059a:	6818      	ldr	r0, [r3, #0]
  40059c:	68bb      	ldr	r3, [r7, #8]
  40059e:	1c59      	adds	r1, r3, #1
  4005a0:	60b9      	str	r1, [r7, #8]
  4005a2:	781b      	ldrb	r3, [r3, #0]
  4005a4:	4619      	mov	r1, r3
  4005a6:	4790      	blx	r2
  4005a8:	4603      	mov	r3, r0
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	da02      	bge.n	4005b4 <_write+0x48>
			return -1;
  4005ae:	f04f 33ff 	mov.w	r3, #4294967295
  4005b2:	e009      	b.n	4005c8 <_write+0x5c>
		}
		++nChars;
  4005b4:	697b      	ldr	r3, [r7, #20]
  4005b6:	3301      	adds	r3, #1
  4005b8:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	3b01      	subs	r3, #1
  4005be:	607b      	str	r3, [r7, #4]
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	2b00      	cmp	r3, #0
  4005c4:	d1e6      	bne.n	400594 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c6:	697b      	ldr	r3, [r7, #20]
}
  4005c8:	4618      	mov	r0, r3
  4005ca:	3718      	adds	r7, #24
  4005cc:	46bd      	mov	sp, r7
  4005ce:	bd80      	pop	{r7, pc}
  4005d0:	20400938 	.word	0x20400938
  4005d4:	2040093c 	.word	0x2040093c

004005d8 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4005d8:	b480      	push	{r7}
  4005da:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005dc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4005e0:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4005e4:	4b09      	ldr	r3, [pc, #36]	; (40060c <SCB_EnableICache+0x34>)
  4005e6:	2200      	movs	r2, #0
  4005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4005ec:	4a07      	ldr	r2, [pc, #28]	; (40060c <SCB_EnableICache+0x34>)
  4005ee:	4b07      	ldr	r3, [pc, #28]	; (40060c <SCB_EnableICache+0x34>)
  4005f0:	695b      	ldr	r3, [r3, #20]
  4005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4005f6:	6153      	str	r3, [r2, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4005f8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4005fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  400600:	bf00      	nop
  400602:	46bd      	mov	sp, r7
  400604:	f85d 7b04 	ldr.w	r7, [sp], #4
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	e000ed00 	.word	0xe000ed00

00400610 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  400610:	b480      	push	{r7}
  400612:	b08b      	sub	sp, #44	; 0x2c
  400614:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400616:	4b26      	ldr	r3, [pc, #152]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40061c:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40061e:	69fb      	ldr	r3, [r7, #28]
  400620:	0b5b      	lsrs	r3, r3, #13
  400622:	f3c3 030e 	ubfx	r3, r3, #0, #15
  400626:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	f003 0307 	and.w	r3, r3, #7
  40062e:	3304      	adds	r3, #4
  400630:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  400632:	69fb      	ldr	r3, [r7, #28]
  400634:	08db      	lsrs	r3, r3, #3
  400636:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40063a:	617b      	str	r3, [r7, #20]
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	fab3 f383 	clz	r3, r3
  400646:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  40064c:	f003 031f 	and.w	r3, r3, #31
  400650:	613b      	str	r3, [r7, #16]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400652:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400656:	697b      	ldr	r3, [r7, #20]
  400658:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40065a:	6a3a      	ldr	r2, [r7, #32]
  40065c:	693b      	ldr	r3, [r7, #16]
  40065e:	fa02 f303 	lsl.w	r3, r2, r3
  400662:	4619      	mov	r1, r3
  400664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400666:	69bb      	ldr	r3, [r7, #24]
  400668:	fa02 f303 	lsl.w	r3, r2, r3
  40066c:	430b      	orrs	r3, r1
  40066e:	60bb      	str	r3, [r7, #8]
              SCB->DCISW = sw;
  400670:	4a0f      	ldr	r2, [pc, #60]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400672:	68bb      	ldr	r3, [r7, #8]
  400674:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  400678:	6a3b      	ldr	r3, [r7, #32]
  40067a:	1e5a      	subs	r2, r3, #1
  40067c:	623a      	str	r2, [r7, #32]
  40067e:	2b00      	cmp	r3, #0
  400680:	d1eb      	bne.n	40065a <SCB_EnableDCache+0x4a>
        } while(sets--);
  400682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400684:	1e5a      	subs	r2, r3, #1
  400686:	627a      	str	r2, [r7, #36]	; 0x24
  400688:	2b00      	cmp	r3, #0
  40068a:	d1e4      	bne.n	400656 <SCB_EnableDCache+0x46>
  40068c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400690:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400692:	4b07      	ldr	r3, [pc, #28]	; (4006b0 <SCB_EnableDCache+0xa0>)
  400694:	695b      	ldr	r3, [r3, #20]
  400696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40069a:	6153      	str	r3, [r2, #20]
  40069c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4006a0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4006a4:	bf00      	nop
  4006a6:	372c      	adds	r7, #44	; 0x2c
  4006a8:	46bd      	mov	sp, r7
  4006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ae:	4770      	bx	lr
  4006b0:	e000ed00 	.word	0xe000ed00

004006b4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	b082      	sub	sp, #8
  4006b8:	af00      	add	r7, sp, #0
  4006ba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4006bc:	6878      	ldr	r0, [r7, #4]
  4006be:	4b03      	ldr	r3, [pc, #12]	; (4006cc <sysclk_enable_peripheral_clock+0x18>)
  4006c0:	4798      	blx	r3
}
  4006c2:	bf00      	nop
  4006c4:	3708      	adds	r7, #8
  4006c6:	46bd      	mov	sp, r7
  4006c8:	bd80      	pop	{r7, pc}
  4006ca:	bf00      	nop
  4006cc:	00401139 	.word	0x00401139

004006d0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4006d0:	b580      	push	{r7, lr}
  4006d2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4006d4:	200a      	movs	r0, #10
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <ioport_init+0x28>)
  4006d8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4006da:	200b      	movs	r0, #11
  4006dc:	4b06      	ldr	r3, [pc, #24]	; (4006f8 <ioport_init+0x28>)
  4006de:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4006e0:	200c      	movs	r0, #12
  4006e2:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <ioport_init+0x28>)
  4006e4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4006e6:	2010      	movs	r0, #16
  4006e8:	4b03      	ldr	r3, [pc, #12]	; (4006f8 <ioport_init+0x28>)
  4006ea:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4006ec:	2011      	movs	r0, #17
  4006ee:	4b02      	ldr	r3, [pc, #8]	; (4006f8 <ioport_init+0x28>)
  4006f0:	4798      	blx	r3
	arch_ioport_init();
}
  4006f2:	bf00      	nop
  4006f4:	bd80      	pop	{r7, pc}
  4006f6:	bf00      	nop
  4006f8:	004006b5 	.word	0x004006b5

004006fc <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  4006fc:	b480      	push	{r7}
  4006fe:	b089      	sub	sp, #36	; 0x24
  400700:	af00      	add	r7, sp, #0
  400702:	6078      	str	r0, [r7, #4]
  400704:	687b      	ldr	r3, [r7, #4]
  400706:	61fb      	str	r3, [r7, #28]
  400708:	69fb      	ldr	r3, [r7, #28]
  40070a:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40070c:	69bb      	ldr	r3, [r7, #24]
  40070e:	095a      	lsrs	r2, r3, #5
  400710:	69fb      	ldr	r3, [r7, #28]
  400712:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	f003 031f 	and.w	r3, r3, #31
  40071a:	2101      	movs	r1, #1
  40071c:	fa01 f303 	lsl.w	r3, r1, r3
  400720:	613a      	str	r2, [r7, #16]
  400722:	60fb      	str	r3, [r7, #12]
  400724:	693b      	ldr	r3, [r7, #16]
  400726:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400728:	68ba      	ldr	r2, [r7, #8]
  40072a:	4b06      	ldr	r3, [pc, #24]	; (400744 <ioport_disable_pin+0x48>)
  40072c:	4413      	add	r3, r2
  40072e:	025b      	lsls	r3, r3, #9
  400730:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400736:	bf00      	nop
  400738:	3724      	adds	r7, #36	; 0x24
  40073a:	46bd      	mov	sp, r7
  40073c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400740:	4770      	bx	lr
  400742:	bf00      	nop
  400744:	00200707 	.word	0x00200707

00400748 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400748:	b480      	push	{r7}
  40074a:	b08d      	sub	sp, #52	; 0x34
  40074c:	af00      	add	r7, sp, #0
  40074e:	6078      	str	r0, [r7, #4]
  400750:	6039      	str	r1, [r7, #0]
  400752:	687b      	ldr	r3, [r7, #4]
  400754:	62fb      	str	r3, [r7, #44]	; 0x2c
  400756:	683b      	ldr	r3, [r7, #0]
  400758:	62bb      	str	r3, [r7, #40]	; 0x28
  40075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40075c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400760:	095a      	lsrs	r2, r3, #5
  400762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400764:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400766:	6a3b      	ldr	r3, [r7, #32]
  400768:	f003 031f 	and.w	r3, r3, #31
  40076c:	2101      	movs	r1, #1
  40076e:	fa01 f303 	lsl.w	r3, r1, r3
  400772:	61fa      	str	r2, [r7, #28]
  400774:	61bb      	str	r3, [r7, #24]
  400776:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400778:	617b      	str	r3, [r7, #20]
  40077a:	69fb      	ldr	r3, [r7, #28]
  40077c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40077e:	693a      	ldr	r2, [r7, #16]
  400780:	4b37      	ldr	r3, [pc, #220]	; (400860 <ioport_set_pin_mode+0x118>)
  400782:	4413      	add	r3, r2
  400784:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400786:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400788:	697b      	ldr	r3, [r7, #20]
  40078a:	f003 0308 	and.w	r3, r3, #8
  40078e:	2b00      	cmp	r3, #0
  400790:	d003      	beq.n	40079a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	69ba      	ldr	r2, [r7, #24]
  400796:	665a      	str	r2, [r3, #100]	; 0x64
  400798:	e002      	b.n	4007a0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40079a:	68fb      	ldr	r3, [r7, #12]
  40079c:	69ba      	ldr	r2, [r7, #24]
  40079e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007a0:	697b      	ldr	r3, [r7, #20]
  4007a2:	f003 0310 	and.w	r3, r3, #16
  4007a6:	2b00      	cmp	r3, #0
  4007a8:	d004      	beq.n	4007b4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	69ba      	ldr	r2, [r7, #24]
  4007ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007b2:	e003      	b.n	4007bc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007b4:	68fb      	ldr	r3, [r7, #12]
  4007b6:	69ba      	ldr	r2, [r7, #24]
  4007b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4007bc:	697b      	ldr	r3, [r7, #20]
  4007be:	f003 0320 	and.w	r3, r3, #32
  4007c2:	2b00      	cmp	r3, #0
  4007c4:	d003      	beq.n	4007ce <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4007c6:	68fb      	ldr	r3, [r7, #12]
  4007c8:	69ba      	ldr	r2, [r7, #24]
  4007ca:	651a      	str	r2, [r3, #80]	; 0x50
  4007cc:	e002      	b.n	4007d4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	69ba      	ldr	r2, [r7, #24]
  4007d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4007d4:	697b      	ldr	r3, [r7, #20]
  4007d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4007da:	2b00      	cmp	r3, #0
  4007dc:	d003      	beq.n	4007e6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	69ba      	ldr	r2, [r7, #24]
  4007e2:	621a      	str	r2, [r3, #32]
  4007e4:	e002      	b.n	4007ec <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4007e6:	68fb      	ldr	r3, [r7, #12]
  4007e8:	69ba      	ldr	r2, [r7, #24]
  4007ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4007ec:	697b      	ldr	r3, [r7, #20]
  4007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4007f2:	2b00      	cmp	r3, #0
  4007f4:	d004      	beq.n	400800 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	69ba      	ldr	r2, [r7, #24]
  4007fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4007fe:	e003      	b.n	400808 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400800:	68fb      	ldr	r3, [r7, #12]
  400802:	69ba      	ldr	r2, [r7, #24]
  400804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400808:	697b      	ldr	r3, [r7, #20]
  40080a:	f003 0301 	and.w	r3, r3, #1
  40080e:	2b00      	cmp	r3, #0
  400810:	d006      	beq.n	400820 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400812:	68fb      	ldr	r3, [r7, #12]
  400814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400816:	69bb      	ldr	r3, [r7, #24]
  400818:	431a      	orrs	r2, r3
  40081a:	68fb      	ldr	r3, [r7, #12]
  40081c:	671a      	str	r2, [r3, #112]	; 0x70
  40081e:	e006      	b.n	40082e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400820:	68fb      	ldr	r3, [r7, #12]
  400822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400824:	69bb      	ldr	r3, [r7, #24]
  400826:	43db      	mvns	r3, r3
  400828:	401a      	ands	r2, r3
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40082e:	697b      	ldr	r3, [r7, #20]
  400830:	f003 0302 	and.w	r3, r3, #2
  400834:	2b00      	cmp	r3, #0
  400836:	d006      	beq.n	400846 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400838:	68fb      	ldr	r3, [r7, #12]
  40083a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40083c:	69bb      	ldr	r3, [r7, #24]
  40083e:	431a      	orrs	r2, r3
  400840:	68fb      	ldr	r3, [r7, #12]
  400842:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400844:	e006      	b.n	400854 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400846:	68fb      	ldr	r3, [r7, #12]
  400848:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40084a:	69bb      	ldr	r3, [r7, #24]
  40084c:	43db      	mvns	r3, r3
  40084e:	401a      	ands	r2, r3
  400850:	68fb      	ldr	r3, [r7, #12]
  400852:	675a      	str	r2, [r3, #116]	; 0x74
  400854:	bf00      	nop
  400856:	3734      	adds	r7, #52	; 0x34
  400858:	46bd      	mov	sp, r7
  40085a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40085e:	4770      	bx	lr
  400860:	00200707 	.word	0x00200707

00400864 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400864:	b480      	push	{r7}
  400866:	b08d      	sub	sp, #52	; 0x34
  400868:	af00      	add	r7, sp, #0
  40086a:	6078      	str	r0, [r7, #4]
  40086c:	460b      	mov	r3, r1
  40086e:	70fb      	strb	r3, [r7, #3]
  400870:	687b      	ldr	r3, [r7, #4]
  400872:	62fb      	str	r3, [r7, #44]	; 0x2c
  400874:	78fb      	ldrb	r3, [r7, #3]
  400876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40087c:	627b      	str	r3, [r7, #36]	; 0x24
  40087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400880:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400882:	6a3b      	ldr	r3, [r7, #32]
  400884:	095b      	lsrs	r3, r3, #5
  400886:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400888:	69fa      	ldr	r2, [r7, #28]
  40088a:	4b17      	ldr	r3, [pc, #92]	; (4008e8 <ioport_set_pin_dir+0x84>)
  40088c:	4413      	add	r3, r2
  40088e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400890:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400896:	2b01      	cmp	r3, #1
  400898:	d109      	bne.n	4008ae <ioport_set_pin_dir+0x4a>
  40089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40089c:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40089e:	697b      	ldr	r3, [r7, #20]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2201      	movs	r2, #1
  4008a6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008a8:	69bb      	ldr	r3, [r7, #24]
  4008aa:	611a      	str	r2, [r3, #16]
  4008ac:	e00c      	b.n	4008c8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008b2:	2b00      	cmp	r3, #0
  4008b4:	d108      	bne.n	4008c8 <ioport_set_pin_dir+0x64>
  4008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008b8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008ba:	693b      	ldr	r3, [r7, #16]
  4008bc:	f003 031f 	and.w	r3, r3, #31
  4008c0:	2201      	movs	r2, #1
  4008c2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008c4:	69bb      	ldr	r3, [r7, #24]
  4008c6:	615a      	str	r2, [r3, #20]
  4008c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008ca:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008cc:	68fb      	ldr	r3, [r7, #12]
  4008ce:	f003 031f 	and.w	r3, r3, #31
  4008d2:	2201      	movs	r2, #1
  4008d4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008d6:	69bb      	ldr	r3, [r7, #24]
  4008d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4008dc:	bf00      	nop
  4008de:	3734      	adds	r7, #52	; 0x34
  4008e0:	46bd      	mov	sp, r7
  4008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008e6:	4770      	bx	lr
  4008e8:	00200707 	.word	0x00200707

004008ec <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4008ec:	b480      	push	{r7}
  4008ee:	b08b      	sub	sp, #44	; 0x2c
  4008f0:	af00      	add	r7, sp, #0
  4008f2:	6078      	str	r0, [r7, #4]
  4008f4:	460b      	mov	r3, r1
  4008f6:	70fb      	strb	r3, [r7, #3]
  4008f8:	687b      	ldr	r3, [r7, #4]
  4008fa:	627b      	str	r3, [r7, #36]	; 0x24
  4008fc:	78fb      	ldrb	r3, [r7, #3]
  4008fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400904:	61fb      	str	r3, [r7, #28]
  400906:	69fb      	ldr	r3, [r7, #28]
  400908:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40090a:	69bb      	ldr	r3, [r7, #24]
  40090c:	095b      	lsrs	r3, r3, #5
  40090e:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400910:	697a      	ldr	r2, [r7, #20]
  400912:	4b10      	ldr	r3, [pc, #64]	; (400954 <ioport_set_pin_level+0x68>)
  400914:	4413      	add	r3, r2
  400916:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400918:	613b      	str	r3, [r7, #16]

	if (level) {
  40091a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40091e:	2b00      	cmp	r3, #0
  400920:	d009      	beq.n	400936 <ioport_set_pin_level+0x4a>
  400922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400924:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400926:	68fb      	ldr	r3, [r7, #12]
  400928:	f003 031f 	and.w	r3, r3, #31
  40092c:	2201      	movs	r2, #1
  40092e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400930:	693b      	ldr	r3, [r7, #16]
  400932:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400934:	e008      	b.n	400948 <ioport_set_pin_level+0x5c>
  400936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400938:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40093a:	68bb      	ldr	r3, [r7, #8]
  40093c:	f003 031f 	and.w	r3, r3, #31
  400940:	2201      	movs	r2, #1
  400942:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400944:	693b      	ldr	r3, [r7, #16]
  400946:	635a      	str	r2, [r3, #52]	; 0x34
  400948:	bf00      	nop
  40094a:	372c      	adds	r7, #44	; 0x2c
  40094c:	46bd      	mov	sp, r7
  40094e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400952:	4770      	bx	lr
  400954:	00200707 	.word	0x00200707

00400958 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  400958:	b480      	push	{r7}
  40095a:	b08d      	sub	sp, #52	; 0x34
  40095c:	af00      	add	r7, sp, #0
  40095e:	6078      	str	r0, [r7, #4]
  400960:	460b      	mov	r3, r1
  400962:	70fb      	strb	r3, [r7, #3]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	62fb      	str	r3, [r7, #44]	; 0x2c
  400968:	78fb      	ldrb	r3, [r7, #3]
  40096a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400970:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400974:	095a      	lsrs	r2, r3, #5
  400976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400978:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40097a:	6a3b      	ldr	r3, [r7, #32]
  40097c:	f003 031f 	and.w	r3, r3, #31
  400980:	2101      	movs	r1, #1
  400982:	fa01 f303 	lsl.w	r3, r1, r3
  400986:	61fa      	str	r2, [r7, #28]
  400988:	61bb      	str	r3, [r7, #24]
  40098a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40098e:	75fb      	strb	r3, [r7, #23]
  400990:	69fb      	ldr	r3, [r7, #28]
  400992:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400994:	693a      	ldr	r2, [r7, #16]
  400996:	4b23      	ldr	r3, [pc, #140]	; (400a24 <ioport_set_pin_sense_mode+0xcc>)
  400998:	4413      	add	r3, r2
  40099a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  40099c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40099e:	7dfb      	ldrb	r3, [r7, #23]
  4009a0:	3b01      	subs	r3, #1
  4009a2:	2b03      	cmp	r3, #3
  4009a4:	d82e      	bhi.n	400a04 <ioport_set_pin_sense_mode+0xac>
  4009a6:	a201      	add	r2, pc, #4	; (adr r2, 4009ac <ioport_set_pin_sense_mode+0x54>)
  4009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009ac:	004009e1 	.word	0x004009e1
  4009b0:	004009f3 	.word	0x004009f3
  4009b4:	004009bd 	.word	0x004009bd
  4009b8:	004009cf 	.word	0x004009cf
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4009bc:	68fb      	ldr	r3, [r7, #12]
  4009be:	69ba      	ldr	r2, [r7, #24]
  4009c0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4009c4:	68fb      	ldr	r3, [r7, #12]
  4009c6:	69ba      	ldr	r2, [r7, #24]
  4009c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009cc:	e01f      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4009ce:	68fb      	ldr	r3, [r7, #12]
  4009d0:	69ba      	ldr	r2, [r7, #24]
  4009d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4009d6:	68fb      	ldr	r3, [r7, #12]
  4009d8:	69ba      	ldr	r2, [r7, #24]
  4009da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4009de:	e016      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4009e0:	68fb      	ldr	r3, [r7, #12]
  4009e2:	69ba      	ldr	r2, [r7, #24]
  4009e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4009e8:	68fb      	ldr	r3, [r7, #12]
  4009ea:	69ba      	ldr	r2, [r7, #24]
  4009ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4009f0:	e00d      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009f2:	68fb      	ldr	r3, [r7, #12]
  4009f4:	69ba      	ldr	r2, [r7, #24]
  4009f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009fa:	68fb      	ldr	r3, [r7, #12]
  4009fc:	69ba      	ldr	r2, [r7, #24]
  4009fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a02:	e004      	b.n	400a0e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a0c:	e003      	b.n	400a16 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a0e:	68fb      	ldr	r3, [r7, #12]
  400a10:	69ba      	ldr	r2, [r7, #24]
  400a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400a16:	bf00      	nop
  400a18:	3734      	adds	r7, #52	; 0x34
  400a1a:	46bd      	mov	sp, r7
  400a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	00200707 	.word	0x00200707

00400a28 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400a28:	b480      	push	{r7}
  400a2a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a2c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400a30:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a34:	4a0c      	ldr	r2, [pc, #48]	; (400a68 <tcm_disable+0x40>)
  400a36:	4b0c      	ldr	r3, [pc, #48]	; (400a68 <tcm_disable+0x40>)
  400a38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400a3c:	f023 0301 	bic.w	r3, r3, #1
  400a40:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a44:	4a08      	ldr	r2, [pc, #32]	; (400a68 <tcm_disable+0x40>)
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <tcm_disable+0x40>)
  400a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400a4c:	f023 0301 	bic.w	r3, r3, #1
  400a50:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a54:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400a58:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400a5c:	bf00      	nop
  400a5e:	46bd      	mov	sp, r7
  400a60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	e000ed00 	.word	0xe000ed00

00400a6c <board_init>:
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b1e      	ldr	r3, [pc, #120]	; (400aec <board_init+0x80>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  400a78:	4b1d      	ldr	r3, [pc, #116]	; (400af0 <board_init+0x84>)
  400a7a:	4798      	blx	r3
	SCB_EnableDCache();
  400a7c:	4b1d      	ldr	r3, [pc, #116]	; (400af4 <board_init+0x88>)
  400a7e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a80:	4b1d      	ldr	r3, [pc, #116]	; (400af8 <board_init+0x8c>)
  400a82:	4a1e      	ldr	r2, [pc, #120]	; (400afc <board_init+0x90>)
  400a84:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a86:	4b1c      	ldr	r3, [pc, #112]	; (400af8 <board_init+0x8c>)
  400a88:	4a1d      	ldr	r2, [pc, #116]	; (400b00 <board_init+0x94>)
  400a8a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400a8c:	4b1d      	ldr	r3, [pc, #116]	; (400b04 <board_init+0x98>)
  400a8e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a90:	4b1d      	ldr	r3, [pc, #116]	; (400b08 <board_init+0x9c>)
  400a92:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a94:	2101      	movs	r1, #1
  400a96:	2048      	movs	r0, #72	; 0x48
  400a98:	4b1c      	ldr	r3, [pc, #112]	; (400b0c <board_init+0xa0>)
  400a9a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a9c:	2101      	movs	r1, #1
  400a9e:	2048      	movs	r0, #72	; 0x48
  400aa0:	4b1b      	ldr	r3, [pc, #108]	; (400b10 <board_init+0xa4>)
  400aa2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400aa4:	2100      	movs	r1, #0
  400aa6:	200b      	movs	r0, #11
  400aa8:	4b18      	ldr	r3, [pc, #96]	; (400b0c <board_init+0xa0>)
  400aaa:	4798      	blx	r3
  400aac:	2188      	movs	r1, #136	; 0x88
  400aae:	200b      	movs	r0, #11
  400ab0:	4b18      	ldr	r3, [pc, #96]	; (400b14 <board_init+0xa8>)
  400ab2:	4798      	blx	r3
  400ab4:	2102      	movs	r1, #2
  400ab6:	200b      	movs	r0, #11
  400ab8:	4b17      	ldr	r3, [pc, #92]	; (400b18 <board_init+0xac>)
  400aba:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400abc:	2100      	movs	r1, #0
  400abe:	2015      	movs	r0, #21
  400ac0:	4b14      	ldr	r3, [pc, #80]	; (400b14 <board_init+0xa8>)
  400ac2:	4798      	blx	r3
  400ac4:	2015      	movs	r0, #21
  400ac6:	4b15      	ldr	r3, [pc, #84]	; (400b1c <board_init+0xb0>)
  400ac8:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400aca:	4a15      	ldr	r2, [pc, #84]	; (400b20 <board_init+0xb4>)
  400acc:	4b14      	ldr	r3, [pc, #80]	; (400b20 <board_init+0xb4>)
  400ace:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400ad2:	f043 0310 	orr.w	r3, r3, #16
  400ad6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400ada:	2103      	movs	r1, #3
  400adc:	2024      	movs	r0, #36	; 0x24
  400ade:	4b0d      	ldr	r3, [pc, #52]	; (400b14 <board_init+0xa8>)
  400ae0:	4798      	blx	r3
  400ae2:	2024      	movs	r0, #36	; 0x24
  400ae4:	4b0d      	ldr	r3, [pc, #52]	; (400b1c <board_init+0xb0>)
  400ae6:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400ae8:	bf00      	nop
  400aea:	bd80      	pop	{r7, pc}
  400aec:	400e1850 	.word	0x400e1850
  400af0:	004005d9 	.word	0x004005d9
  400af4:	00400611 	.word	0x00400611
  400af8:	400e0c00 	.word	0x400e0c00
  400afc:	5a00080c 	.word	0x5a00080c
  400b00:	5a00070c 	.word	0x5a00070c
  400b04:	00400a29 	.word	0x00400a29
  400b08:	004006d1 	.word	0x004006d1
  400b0c:	00400865 	.word	0x00400865
  400b10:	004008ed 	.word	0x004008ed
  400b14:	00400749 	.word	0x00400749
  400b18:	00400959 	.word	0x00400959
  400b1c:	004006fd 	.word	0x004006fd
  400b20:	40088000 	.word	0x40088000

00400b24 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400b24:	b480      	push	{r7}
  400b26:	b085      	sub	sp, #20
  400b28:	af00      	add	r7, sp, #0
  400b2a:	60f8      	str	r0, [r7, #12]
  400b2c:	60b9      	str	r1, [r7, #8]
  400b2e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b30:	687b      	ldr	r3, [r7, #4]
  400b32:	2b00      	cmp	r3, #0
  400b34:	d003      	beq.n	400b3e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400b36:	68fb      	ldr	r3, [r7, #12]
  400b38:	68ba      	ldr	r2, [r7, #8]
  400b3a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400b3c:	e002      	b.n	400b44 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b3e:	68fb      	ldr	r3, [r7, #12]
  400b40:	68ba      	ldr	r2, [r7, #8]
  400b42:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  400b44:	bf00      	nop
  400b46:	3714      	adds	r7, #20
  400b48:	46bd      	mov	sp, r7
  400b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4e:	4770      	bx	lr

00400b50 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  400b50:	b480      	push	{r7}
  400b52:	b083      	sub	sp, #12
  400b54:	af00      	add	r7, sp, #0
  400b56:	6078      	str	r0, [r7, #4]
  400b58:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  400b5a:	687b      	ldr	r3, [r7, #4]
  400b5c:	683a      	ldr	r2, [r7, #0]
  400b5e:	631a      	str	r2, [r3, #48]	; 0x30
}
  400b60:	bf00      	nop
  400b62:	370c      	adds	r7, #12
  400b64:	46bd      	mov	sp, r7
  400b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b6a:	4770      	bx	lr

00400b6c <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  400b6c:	b480      	push	{r7}
  400b6e:	b083      	sub	sp, #12
  400b70:	af00      	add	r7, sp, #0
  400b72:	6078      	str	r0, [r7, #4]
  400b74:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  400b76:	687b      	ldr	r3, [r7, #4]
  400b78:	683a      	ldr	r2, [r7, #0]
  400b7a:	635a      	str	r2, [r3, #52]	; 0x34
}
  400b7c:	bf00      	nop
  400b7e:	370c      	adds	r7, #12
  400b80:	46bd      	mov	sp, r7
  400b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b86:	4770      	bx	lr

00400b88 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400b88:	b480      	push	{r7}
  400b8a:	b087      	sub	sp, #28
  400b8c:	af00      	add	r7, sp, #0
  400b8e:	60f8      	str	r0, [r7, #12]
  400b90:	60b9      	str	r1, [r7, #8]
  400b92:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400b94:	68fb      	ldr	r3, [r7, #12]
  400b96:	687a      	ldr	r2, [r7, #4]
  400b98:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400b9a:	68bb      	ldr	r3, [r7, #8]
  400b9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ba0:	d04a      	beq.n	400c38 <pio_set_peripheral+0xb0>
  400ba2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ba6:	d808      	bhi.n	400bba <pio_set_peripheral+0x32>
  400ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400bac:	d016      	beq.n	400bdc <pio_set_peripheral+0x54>
  400bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400bb2:	d02c      	beq.n	400c0e <pio_set_peripheral+0x86>
  400bb4:	2b00      	cmp	r3, #0
  400bb6:	d069      	beq.n	400c8c <pio_set_peripheral+0x104>
  400bb8:	e064      	b.n	400c84 <pio_set_peripheral+0xfc>
  400bba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400bbe:	d065      	beq.n	400c8c <pio_set_peripheral+0x104>
  400bc0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400bc4:	d803      	bhi.n	400bce <pio_set_peripheral+0x46>
  400bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400bca:	d04a      	beq.n	400c62 <pio_set_peripheral+0xda>
  400bcc:	e05a      	b.n	400c84 <pio_set_peripheral+0xfc>
  400bce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400bd2:	d05b      	beq.n	400c8c <pio_set_peripheral+0x104>
  400bd4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400bd8:	d058      	beq.n	400c8c <pio_set_peripheral+0x104>
  400bda:	e053      	b.n	400c84 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bdc:	68fb      	ldr	r3, [r7, #12]
  400bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400be0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400be2:	68fb      	ldr	r3, [r7, #12]
  400be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400be6:	687b      	ldr	r3, [r7, #4]
  400be8:	43d9      	mvns	r1, r3
  400bea:	697b      	ldr	r3, [r7, #20]
  400bec:	400b      	ands	r3, r1
  400bee:	401a      	ands	r2, r3
  400bf0:	68fb      	ldr	r3, [r7, #12]
  400bf2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400bf4:	68fb      	ldr	r3, [r7, #12]
  400bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400bf8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	43d9      	mvns	r1, r3
  400c02:	697b      	ldr	r3, [r7, #20]
  400c04:	400b      	ands	r3, r1
  400c06:	401a      	ands	r2, r3
  400c08:	68fb      	ldr	r3, [r7, #12]
  400c0a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c0c:	e03a      	b.n	400c84 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c0e:	68fb      	ldr	r3, [r7, #12]
  400c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c12:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c14:	687a      	ldr	r2, [r7, #4]
  400c16:	697b      	ldr	r3, [r7, #20]
  400c18:	431a      	orrs	r2, r3
  400c1a:	68fb      	ldr	r3, [r7, #12]
  400c1c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c1e:	68fb      	ldr	r3, [r7, #12]
  400c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c22:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c24:	68fb      	ldr	r3, [r7, #12]
  400c26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c28:	687b      	ldr	r3, [r7, #4]
  400c2a:	43d9      	mvns	r1, r3
  400c2c:	697b      	ldr	r3, [r7, #20]
  400c2e:	400b      	ands	r3, r1
  400c30:	401a      	ands	r2, r3
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c36:	e025      	b.n	400c84 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c38:	68fb      	ldr	r3, [r7, #12]
  400c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c3c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c3e:	68fb      	ldr	r3, [r7, #12]
  400c40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c42:	687b      	ldr	r3, [r7, #4]
  400c44:	43d9      	mvns	r1, r3
  400c46:	697b      	ldr	r3, [r7, #20]
  400c48:	400b      	ands	r3, r1
  400c4a:	401a      	ands	r2, r3
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c50:	68fb      	ldr	r3, [r7, #12]
  400c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c54:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c56:	687a      	ldr	r2, [r7, #4]
  400c58:	697b      	ldr	r3, [r7, #20]
  400c5a:	431a      	orrs	r2, r3
  400c5c:	68fb      	ldr	r3, [r7, #12]
  400c5e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c60:	e010      	b.n	400c84 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c62:	68fb      	ldr	r3, [r7, #12]
  400c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400c66:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c68:	687a      	ldr	r2, [r7, #4]
  400c6a:	697b      	ldr	r3, [r7, #20]
  400c6c:	431a      	orrs	r2, r3
  400c6e:	68fb      	ldr	r3, [r7, #12]
  400c70:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c72:	68fb      	ldr	r3, [r7, #12]
  400c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400c76:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c78:	687a      	ldr	r2, [r7, #4]
  400c7a:	697b      	ldr	r3, [r7, #20]
  400c7c:	431a      	orrs	r2, r3
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400c82:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c84:	68fb      	ldr	r3, [r7, #12]
  400c86:	687a      	ldr	r2, [r7, #4]
  400c88:	605a      	str	r2, [r3, #4]
  400c8a:	e000      	b.n	400c8e <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  400c8c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  400c8e:	371c      	adds	r7, #28
  400c90:	46bd      	mov	sp, r7
  400c92:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c96:	4770      	bx	lr

00400c98 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400c98:	b580      	push	{r7, lr}
  400c9a:	b084      	sub	sp, #16
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	60f8      	str	r0, [r7, #12]
  400ca0:	60b9      	str	r1, [r7, #8]
  400ca2:	607a      	str	r2, [r7, #4]
  400ca4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400ca6:	68b9      	ldr	r1, [r7, #8]
  400ca8:	68f8      	ldr	r0, [r7, #12]
  400caa:	4b12      	ldr	r3, [pc, #72]	; (400cf4 <pio_set_output+0x5c>)
  400cac:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400cae:	69ba      	ldr	r2, [r7, #24]
  400cb0:	68b9      	ldr	r1, [r7, #8]
  400cb2:	68f8      	ldr	r0, [r7, #12]
  400cb4:	4b10      	ldr	r3, [pc, #64]	; (400cf8 <pio_set_output+0x60>)
  400cb6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400cb8:	683b      	ldr	r3, [r7, #0]
  400cba:	2b00      	cmp	r3, #0
  400cbc:	d003      	beq.n	400cc6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400cbe:	68fb      	ldr	r3, [r7, #12]
  400cc0:	68ba      	ldr	r2, [r7, #8]
  400cc2:	651a      	str	r2, [r3, #80]	; 0x50
  400cc4:	e002      	b.n	400ccc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400cc6:	68fb      	ldr	r3, [r7, #12]
  400cc8:	68ba      	ldr	r2, [r7, #8]
  400cca:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400ccc:	687b      	ldr	r3, [r7, #4]
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d003      	beq.n	400cda <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	68ba      	ldr	r2, [r7, #8]
  400cd6:	631a      	str	r2, [r3, #48]	; 0x30
  400cd8:	e002      	b.n	400ce0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	68ba      	ldr	r2, [r7, #8]
  400cde:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400ce0:	68fb      	ldr	r3, [r7, #12]
  400ce2:	68ba      	ldr	r2, [r7, #8]
  400ce4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400ce6:	68fb      	ldr	r3, [r7, #12]
  400ce8:	68ba      	ldr	r2, [r7, #8]
  400cea:	601a      	str	r2, [r3, #0]
}
  400cec:	bf00      	nop
  400cee:	3710      	adds	r7, #16
  400cf0:	46bd      	mov	sp, r7
  400cf2:	bd80      	pop	{r7, pc}
  400cf4:	00400cfd 	.word	0x00400cfd
  400cf8:	00400b25 	.word	0x00400b25

00400cfc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400cfc:	b480      	push	{r7}
  400cfe:	b083      	sub	sp, #12
  400d00:	af00      	add	r7, sp, #0
  400d02:	6078      	str	r0, [r7, #4]
  400d04:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400d06:	687b      	ldr	r3, [r7, #4]
  400d08:	683a      	ldr	r2, [r7, #0]
  400d0a:	645a      	str	r2, [r3, #68]	; 0x44
}
  400d0c:	bf00      	nop
  400d0e:	370c      	adds	r7, #12
  400d10:	46bd      	mov	sp, r7
  400d12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d16:	4770      	bx	lr

00400d18 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400d18:	b480      	push	{r7}
  400d1a:	b083      	sub	sp, #12
  400d1c:	af00      	add	r7, sp, #0
  400d1e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400d20:	687b      	ldr	r3, [r7, #4]
  400d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400d24:	4618      	mov	r0, r3
  400d26:	370c      	adds	r7, #12
  400d28:	46bd      	mov	sp, r7
  400d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d2e:	4770      	bx	lr

00400d30 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400d30:	b480      	push	{r7}
  400d32:	b083      	sub	sp, #12
  400d34:	af00      	add	r7, sp, #0
  400d36:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400d38:	687b      	ldr	r3, [r7, #4]
  400d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400d3c:	4618      	mov	r0, r3
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d46:	4770      	bx	lr

00400d48 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d48:	b580      	push	{r7, lr}
  400d4a:	b084      	sub	sp, #16
  400d4c:	af00      	add	r7, sp, #0
  400d4e:	6078      	str	r0, [r7, #4]
  400d50:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d52:	6878      	ldr	r0, [r7, #4]
  400d54:	4b26      	ldr	r3, [pc, #152]	; (400df0 <pio_handler_process+0xa8>)
  400d56:	4798      	blx	r3
  400d58:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400d5a:	6878      	ldr	r0, [r7, #4]
  400d5c:	4b25      	ldr	r3, [pc, #148]	; (400df4 <pio_handler_process+0xac>)
  400d5e:	4798      	blx	r3
  400d60:	4602      	mov	r2, r0
  400d62:	68fb      	ldr	r3, [r7, #12]
  400d64:	4013      	ands	r3, r2
  400d66:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400d68:	68fb      	ldr	r3, [r7, #12]
  400d6a:	2b00      	cmp	r3, #0
  400d6c:	d03c      	beq.n	400de8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400d6e:	2300      	movs	r3, #0
  400d70:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400d72:	e034      	b.n	400dde <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d74:	4a20      	ldr	r2, [pc, #128]	; (400df8 <pio_handler_process+0xb0>)
  400d76:	68bb      	ldr	r3, [r7, #8]
  400d78:	011b      	lsls	r3, r3, #4
  400d7a:	4413      	add	r3, r2
  400d7c:	681a      	ldr	r2, [r3, #0]
  400d7e:	683b      	ldr	r3, [r7, #0]
  400d80:	429a      	cmp	r2, r3
  400d82:	d126      	bne.n	400dd2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d84:	4a1c      	ldr	r2, [pc, #112]	; (400df8 <pio_handler_process+0xb0>)
  400d86:	68bb      	ldr	r3, [r7, #8]
  400d88:	011b      	lsls	r3, r3, #4
  400d8a:	4413      	add	r3, r2
  400d8c:	3304      	adds	r3, #4
  400d8e:	681a      	ldr	r2, [r3, #0]
  400d90:	68fb      	ldr	r3, [r7, #12]
  400d92:	4013      	ands	r3, r2
  400d94:	2b00      	cmp	r3, #0
  400d96:	d01c      	beq.n	400dd2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d98:	4a17      	ldr	r2, [pc, #92]	; (400df8 <pio_handler_process+0xb0>)
  400d9a:	68bb      	ldr	r3, [r7, #8]
  400d9c:	011b      	lsls	r3, r3, #4
  400d9e:	4413      	add	r3, r2
  400da0:	330c      	adds	r3, #12
  400da2:	681b      	ldr	r3, [r3, #0]
  400da4:	4914      	ldr	r1, [pc, #80]	; (400df8 <pio_handler_process+0xb0>)
  400da6:	68ba      	ldr	r2, [r7, #8]
  400da8:	0112      	lsls	r2, r2, #4
  400daa:	440a      	add	r2, r1
  400dac:	6810      	ldr	r0, [r2, #0]
  400dae:	4912      	ldr	r1, [pc, #72]	; (400df8 <pio_handler_process+0xb0>)
  400db0:	68ba      	ldr	r2, [r7, #8]
  400db2:	0112      	lsls	r2, r2, #4
  400db4:	440a      	add	r2, r1
  400db6:	3204      	adds	r2, #4
  400db8:	6812      	ldr	r2, [r2, #0]
  400dba:	4611      	mov	r1, r2
  400dbc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400dbe:	4a0e      	ldr	r2, [pc, #56]	; (400df8 <pio_handler_process+0xb0>)
  400dc0:	68bb      	ldr	r3, [r7, #8]
  400dc2:	011b      	lsls	r3, r3, #4
  400dc4:	4413      	add	r3, r2
  400dc6:	3304      	adds	r3, #4
  400dc8:	681b      	ldr	r3, [r3, #0]
  400dca:	43db      	mvns	r3, r3
  400dcc:	68fa      	ldr	r2, [r7, #12]
  400dce:	4013      	ands	r3, r2
  400dd0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400dd2:	68bb      	ldr	r3, [r7, #8]
  400dd4:	3301      	adds	r3, #1
  400dd6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400dd8:	68bb      	ldr	r3, [r7, #8]
  400dda:	2b06      	cmp	r3, #6
  400ddc:	d803      	bhi.n	400de6 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400dde:	68fb      	ldr	r3, [r7, #12]
  400de0:	2b00      	cmp	r3, #0
  400de2:	d1c7      	bne.n	400d74 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400de4:	e000      	b.n	400de8 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  400de6:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400de8:	bf00      	nop
  400dea:	3710      	adds	r7, #16
  400dec:	46bd      	mov	sp, r7
  400dee:	bd80      	pop	{r7, pc}
  400df0:	00400d19 	.word	0x00400d19
  400df4:	00400d31 	.word	0x00400d31
  400df8:	20400888 	.word	0x20400888

00400dfc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400dfc:	b580      	push	{r7, lr}
  400dfe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400e00:	210a      	movs	r1, #10
  400e02:	4802      	ldr	r0, [pc, #8]	; (400e0c <PIOA_Handler+0x10>)
  400e04:	4b02      	ldr	r3, [pc, #8]	; (400e10 <PIOA_Handler+0x14>)
  400e06:	4798      	blx	r3
}
  400e08:	bf00      	nop
  400e0a:	bd80      	pop	{r7, pc}
  400e0c:	400e0e00 	.word	0x400e0e00
  400e10:	00400d49 	.word	0x00400d49

00400e14 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e14:	b580      	push	{r7, lr}
  400e16:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400e18:	210b      	movs	r1, #11
  400e1a:	4802      	ldr	r0, [pc, #8]	; (400e24 <PIOB_Handler+0x10>)
  400e1c:	4b02      	ldr	r3, [pc, #8]	; (400e28 <PIOB_Handler+0x14>)
  400e1e:	4798      	blx	r3
}
  400e20:	bf00      	nop
  400e22:	bd80      	pop	{r7, pc}
  400e24:	400e1000 	.word	0x400e1000
  400e28:	00400d49 	.word	0x00400d49

00400e2c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e2c:	b580      	push	{r7, lr}
  400e2e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400e30:	210c      	movs	r1, #12
  400e32:	4802      	ldr	r0, [pc, #8]	; (400e3c <PIOC_Handler+0x10>)
  400e34:	4b02      	ldr	r3, [pc, #8]	; (400e40 <PIOC_Handler+0x14>)
  400e36:	4798      	blx	r3
}
  400e38:	bf00      	nop
  400e3a:	bd80      	pop	{r7, pc}
  400e3c:	400e1200 	.word	0x400e1200
  400e40:	00400d49 	.word	0x00400d49

00400e44 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400e44:	b580      	push	{r7, lr}
  400e46:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400e48:	2110      	movs	r1, #16
  400e4a:	4802      	ldr	r0, [pc, #8]	; (400e54 <PIOD_Handler+0x10>)
  400e4c:	4b02      	ldr	r3, [pc, #8]	; (400e58 <PIOD_Handler+0x14>)
  400e4e:	4798      	blx	r3
}
  400e50:	bf00      	nop
  400e52:	bd80      	pop	{r7, pc}
  400e54:	400e1400 	.word	0x400e1400
  400e58:	00400d49 	.word	0x00400d49

00400e5c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400e5c:	b580      	push	{r7, lr}
  400e5e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400e60:	2111      	movs	r1, #17
  400e62:	4802      	ldr	r0, [pc, #8]	; (400e6c <PIOE_Handler+0x10>)
  400e64:	4b02      	ldr	r3, [pc, #8]	; (400e70 <PIOE_Handler+0x14>)
  400e66:	4798      	blx	r3
}
  400e68:	bf00      	nop
  400e6a:	bd80      	pop	{r7, pc}
  400e6c:	400e1600 	.word	0x400e1600
  400e70:	00400d49 	.word	0x00400d49

00400e74 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400e74:	b480      	push	{r7}
  400e76:	b083      	sub	sp, #12
  400e78:	af00      	add	r7, sp, #0
  400e7a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400e7c:	687b      	ldr	r3, [r7, #4]
  400e7e:	3b01      	subs	r3, #1
  400e80:	2b03      	cmp	r3, #3
  400e82:	d81a      	bhi.n	400eba <pmc_mck_set_division+0x46>
  400e84:	a201      	add	r2, pc, #4	; (adr r2, 400e8c <pmc_mck_set_division+0x18>)
  400e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e8a:	bf00      	nop
  400e8c:	00400e9d 	.word	0x00400e9d
  400e90:	00400ea3 	.word	0x00400ea3
  400e94:	00400eab 	.word	0x00400eab
  400e98:	00400eb3 	.word	0x00400eb3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e9c:	2300      	movs	r3, #0
  400e9e:	607b      	str	r3, [r7, #4]
			break;
  400ea0:	e00e      	b.n	400ec0 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ea6:	607b      	str	r3, [r7, #4]
			break;
  400ea8:	e00a      	b.n	400ec0 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
  400eae:	607b      	str	r3, [r7, #4]
			break;
  400eb0:	e006      	b.n	400ec0 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
  400eb6:	607b      	str	r3, [r7, #4]
			break;
  400eb8:	e002      	b.n	400ec0 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400eba:	2300      	movs	r3, #0
  400ebc:	607b      	str	r3, [r7, #4]
			break;
  400ebe:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400ec0:	490a      	ldr	r1, [pc, #40]	; (400eec <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ec2:	4b0a      	ldr	r3, [pc, #40]	; (400eec <pmc_mck_set_division+0x78>)
  400ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400eca:	687b      	ldr	r3, [r7, #4]
  400ecc:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400ece:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400ed0:	bf00      	nop
  400ed2:	4b06      	ldr	r3, [pc, #24]	; (400eec <pmc_mck_set_division+0x78>)
  400ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ed6:	f003 0308 	and.w	r3, r3, #8
  400eda:	2b00      	cmp	r3, #0
  400edc:	d0f9      	beq.n	400ed2 <pmc_mck_set_division+0x5e>
}
  400ede:	bf00      	nop
  400ee0:	370c      	adds	r7, #12
  400ee2:	46bd      	mov	sp, r7
  400ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop
  400eec:	400e0600 	.word	0x400e0600

00400ef0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400ef0:	b480      	push	{r7}
  400ef2:	b085      	sub	sp, #20
  400ef4:	af00      	add	r7, sp, #0
  400ef6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ef8:	491d      	ldr	r1, [pc, #116]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400efa:	4b1d      	ldr	r3, [pc, #116]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400f02:	687b      	ldr	r3, [r7, #4]
  400f04:	4313      	orrs	r3, r2
  400f06:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f0c:	60fb      	str	r3, [r7, #12]
  400f0e:	e007      	b.n	400f20 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f10:	68fb      	ldr	r3, [r7, #12]
  400f12:	2b00      	cmp	r3, #0
  400f14:	d101      	bne.n	400f1a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400f16:	2301      	movs	r3, #1
  400f18:	e023      	b.n	400f62 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400f1a:	68fb      	ldr	r3, [r7, #12]
  400f1c:	3b01      	subs	r3, #1
  400f1e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f20:	4b13      	ldr	r3, [pc, #76]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f24:	f003 0308 	and.w	r3, r3, #8
  400f28:	2b00      	cmp	r3, #0
  400f2a:	d0f1      	beq.n	400f10 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f2c:	4a10      	ldr	r2, [pc, #64]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400f2e:	4b10      	ldr	r3, [pc, #64]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f32:	f023 0303 	bic.w	r3, r3, #3
  400f36:	f043 0302 	orr.w	r3, r3, #2
  400f3a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f40:	60fb      	str	r3, [r7, #12]
  400f42:	e007      	b.n	400f54 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f44:	68fb      	ldr	r3, [r7, #12]
  400f46:	2b00      	cmp	r3, #0
  400f48:	d101      	bne.n	400f4e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400f4a:	2301      	movs	r3, #1
  400f4c:	e009      	b.n	400f62 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	3b01      	subs	r3, #1
  400f52:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f54:	4b06      	ldr	r3, [pc, #24]	; (400f70 <pmc_switch_mck_to_pllack+0x80>)
  400f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f58:	f003 0308 	and.w	r3, r3, #8
  400f5c:	2b00      	cmp	r3, #0
  400f5e:	d0f1      	beq.n	400f44 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400f60:	2300      	movs	r3, #0
}
  400f62:	4618      	mov	r0, r3
  400f64:	3714      	adds	r7, #20
  400f66:	46bd      	mov	sp, r7
  400f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f6c:	4770      	bx	lr
  400f6e:	bf00      	nop
  400f70:	400e0600 	.word	0x400e0600

00400f74 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400f74:	b480      	push	{r7}
  400f76:	b083      	sub	sp, #12
  400f78:	af00      	add	r7, sp, #0
  400f7a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400f7c:	687b      	ldr	r3, [r7, #4]
  400f7e:	2b01      	cmp	r3, #1
  400f80:	d105      	bne.n	400f8e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400f82:	4907      	ldr	r1, [pc, #28]	; (400fa0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400f84:	4b06      	ldr	r3, [pc, #24]	; (400fa0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400f86:	689a      	ldr	r2, [r3, #8]
  400f88:	4b06      	ldr	r3, [pc, #24]	; (400fa4 <pmc_switch_sclk_to_32kxtal+0x30>)
  400f8a:	4313      	orrs	r3, r2
  400f8c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400f8e:	4b04      	ldr	r3, [pc, #16]	; (400fa0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400f90:	4a05      	ldr	r2, [pc, #20]	; (400fa8 <pmc_switch_sclk_to_32kxtal+0x34>)
  400f92:	601a      	str	r2, [r3, #0]
}
  400f94:	bf00      	nop
  400f96:	370c      	adds	r7, #12
  400f98:	46bd      	mov	sp, r7
  400f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f9e:	4770      	bx	lr
  400fa0:	400e1810 	.word	0x400e1810
  400fa4:	a5100000 	.word	0xa5100000
  400fa8:	a5000008 	.word	0xa5000008

00400fac <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400fac:	b480      	push	{r7}
  400fae:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400fb0:	4b09      	ldr	r3, [pc, #36]	; (400fd8 <pmc_osc_is_ready_32kxtal+0x2c>)
  400fb2:	695b      	ldr	r3, [r3, #20]
  400fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400fb8:	2b00      	cmp	r3, #0
  400fba:	d007      	beq.n	400fcc <pmc_osc_is_ready_32kxtal+0x20>
  400fbc:	4b07      	ldr	r3, [pc, #28]	; (400fdc <pmc_osc_is_ready_32kxtal+0x30>)
  400fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400fc4:	2b00      	cmp	r3, #0
  400fc6:	d001      	beq.n	400fcc <pmc_osc_is_ready_32kxtal+0x20>
  400fc8:	2301      	movs	r3, #1
  400fca:	e000      	b.n	400fce <pmc_osc_is_ready_32kxtal+0x22>
  400fcc:	2300      	movs	r3, #0
}
  400fce:	4618      	mov	r0, r3
  400fd0:	46bd      	mov	sp, r7
  400fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fd6:	4770      	bx	lr
  400fd8:	400e1810 	.word	0x400e1810
  400fdc:	400e0600 	.word	0x400e0600

00400fe0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400fe0:	b480      	push	{r7}
  400fe2:	b083      	sub	sp, #12
  400fe4:	af00      	add	r7, sp, #0
  400fe6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400fe8:	4915      	ldr	r1, [pc, #84]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  400fea:	4b15      	ldr	r3, [pc, #84]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  400fec:	6a1a      	ldr	r2, [r3, #32]
  400fee:	4b15      	ldr	r3, [pc, #84]	; (401044 <pmc_switch_mainck_to_fastrc+0x64>)
  400ff0:	4313      	orrs	r3, r2
  400ff2:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400ff4:	bf00      	nop
  400ff6:	4b12      	ldr	r3, [pc, #72]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  400ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400ffe:	2b00      	cmp	r3, #0
  401000:	d0f9      	beq.n	400ff6 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401002:	490f      	ldr	r1, [pc, #60]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  401004:	4b0e      	ldr	r3, [pc, #56]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  401006:	6a1a      	ldr	r2, [r3, #32]
  401008:	4b0f      	ldr	r3, [pc, #60]	; (401048 <pmc_switch_mainck_to_fastrc+0x68>)
  40100a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40100c:	687a      	ldr	r2, [r7, #4]
  40100e:	4313      	orrs	r3, r2
  401010:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401014:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401016:	bf00      	nop
  401018:	4b09      	ldr	r3, [pc, #36]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  40101a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401020:	2b00      	cmp	r3, #0
  401022:	d0f9      	beq.n	401018 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401024:	4906      	ldr	r1, [pc, #24]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  401026:	4b06      	ldr	r3, [pc, #24]	; (401040 <pmc_switch_mainck_to_fastrc+0x60>)
  401028:	6a1a      	ldr	r2, [r3, #32]
  40102a:	4b08      	ldr	r3, [pc, #32]	; (40104c <pmc_switch_mainck_to_fastrc+0x6c>)
  40102c:	4013      	ands	r3, r2
  40102e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401032:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401034:	bf00      	nop
  401036:	370c      	adds	r7, #12
  401038:	46bd      	mov	sp, r7
  40103a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40103e:	4770      	bx	lr
  401040:	400e0600 	.word	0x400e0600
  401044:	00370008 	.word	0x00370008
  401048:	ffc8ff8f 	.word	0xffc8ff8f
  40104c:	fec8ffff 	.word	0xfec8ffff

00401050 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401050:	b480      	push	{r7}
  401052:	b083      	sub	sp, #12
  401054:	af00      	add	r7, sp, #0
  401056:	6078      	str	r0, [r7, #4]
  401058:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d008      	beq.n	401072 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401060:	4913      	ldr	r1, [pc, #76]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  401062:	4b13      	ldr	r3, [pc, #76]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  401064:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401066:	4a13      	ldr	r2, [pc, #76]	; (4010b4 <pmc_switch_mainck_to_xtal+0x64>)
  401068:	401a      	ands	r2, r3
  40106a:	4b13      	ldr	r3, [pc, #76]	; (4010b8 <pmc_switch_mainck_to_xtal+0x68>)
  40106c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40106e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401070:	e018      	b.n	4010a4 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401072:	490f      	ldr	r1, [pc, #60]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  401074:	4b0e      	ldr	r3, [pc, #56]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  401076:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401078:	4b10      	ldr	r3, [pc, #64]	; (4010bc <pmc_switch_mainck_to_xtal+0x6c>)
  40107a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40107c:	683a      	ldr	r2, [r7, #0]
  40107e:	0212      	lsls	r2, r2, #8
  401080:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401082:	431a      	orrs	r2, r3
  401084:	4b0e      	ldr	r3, [pc, #56]	; (4010c0 <pmc_switch_mainck_to_xtal+0x70>)
  401086:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401088:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40108a:	bf00      	nop
  40108c:	4b08      	ldr	r3, [pc, #32]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  40108e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401090:	f003 0301 	and.w	r3, r3, #1
  401094:	2b00      	cmp	r3, #0
  401096:	d0f9      	beq.n	40108c <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401098:	4905      	ldr	r1, [pc, #20]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  40109a:	4b05      	ldr	r3, [pc, #20]	; (4010b0 <pmc_switch_mainck_to_xtal+0x60>)
  40109c:	6a1a      	ldr	r2, [r3, #32]
  40109e:	4b09      	ldr	r3, [pc, #36]	; (4010c4 <pmc_switch_mainck_to_xtal+0x74>)
  4010a0:	4313      	orrs	r3, r2
  4010a2:	620b      	str	r3, [r1, #32]
	}
}
  4010a4:	bf00      	nop
  4010a6:	370c      	adds	r7, #12
  4010a8:	46bd      	mov	sp, r7
  4010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010ae:	4770      	bx	lr
  4010b0:	400e0600 	.word	0x400e0600
  4010b4:	fec8fffc 	.word	0xfec8fffc
  4010b8:	01370002 	.word	0x01370002
  4010bc:	ffc8fffc 	.word	0xffc8fffc
  4010c0:	00370001 	.word	0x00370001
  4010c4:	01370000 	.word	0x01370000

004010c8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4010c8:	b480      	push	{r7}
  4010ca:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4010cc:	4b04      	ldr	r3, [pc, #16]	; (4010e0 <pmc_osc_is_ready_mainck+0x18>)
  4010ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4010d4:	4618      	mov	r0, r3
  4010d6:	46bd      	mov	sp, r7
  4010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010dc:	4770      	bx	lr
  4010de:	bf00      	nop
  4010e0:	400e0600 	.word	0x400e0600

004010e4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4010e4:	b480      	push	{r7}
  4010e6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4010e8:	4b04      	ldr	r3, [pc, #16]	; (4010fc <pmc_disable_pllack+0x18>)
  4010ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4010f0:	bf00      	nop
  4010f2:	46bd      	mov	sp, r7
  4010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010f8:	4770      	bx	lr
  4010fa:	bf00      	nop
  4010fc:	400e0600 	.word	0x400e0600

00401100 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401100:	b480      	push	{r7}
  401102:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401104:	4b04      	ldr	r3, [pc, #16]	; (401118 <pmc_is_locked_pllack+0x18>)
  401106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401108:	f003 0302 	and.w	r3, r3, #2
}
  40110c:	4618      	mov	r0, r3
  40110e:	46bd      	mov	sp, r7
  401110:	f85d 7b04 	ldr.w	r7, [sp], #4
  401114:	4770      	bx	lr
  401116:	bf00      	nop
  401118:	400e0600 	.word	0x400e0600

0040111c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40111c:	b480      	push	{r7}
  40111e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401120:	4b04      	ldr	r3, [pc, #16]	; (401134 <pmc_is_locked_upll+0x18>)
  401122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401124:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401128:	4618      	mov	r0, r3
  40112a:	46bd      	mov	sp, r7
  40112c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401130:	4770      	bx	lr
  401132:	bf00      	nop
  401134:	400e0600 	.word	0x400e0600

00401138 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401138:	b480      	push	{r7}
  40113a:	b083      	sub	sp, #12
  40113c:	af00      	add	r7, sp, #0
  40113e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401140:	687b      	ldr	r3, [r7, #4]
  401142:	2b3f      	cmp	r3, #63	; 0x3f
  401144:	d901      	bls.n	40114a <pmc_enable_periph_clk+0x12>
		return 1;
  401146:	2301      	movs	r3, #1
  401148:	e02f      	b.n	4011aa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40114a:	687b      	ldr	r3, [r7, #4]
  40114c:	2b1f      	cmp	r3, #31
  40114e:	d813      	bhi.n	401178 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401150:	4b19      	ldr	r3, [pc, #100]	; (4011b8 <pmc_enable_periph_clk+0x80>)
  401152:	699a      	ldr	r2, [r3, #24]
  401154:	2101      	movs	r1, #1
  401156:	687b      	ldr	r3, [r7, #4]
  401158:	fa01 f303 	lsl.w	r3, r1, r3
  40115c:	401a      	ands	r2, r3
  40115e:	2101      	movs	r1, #1
  401160:	687b      	ldr	r3, [r7, #4]
  401162:	fa01 f303 	lsl.w	r3, r1, r3
  401166:	429a      	cmp	r2, r3
  401168:	d01e      	beq.n	4011a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40116a:	4a13      	ldr	r2, [pc, #76]	; (4011b8 <pmc_enable_periph_clk+0x80>)
  40116c:	2101      	movs	r1, #1
  40116e:	687b      	ldr	r3, [r7, #4]
  401170:	fa01 f303 	lsl.w	r3, r1, r3
  401174:	6113      	str	r3, [r2, #16]
  401176:	e017      	b.n	4011a8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401178:	687b      	ldr	r3, [r7, #4]
  40117a:	3b20      	subs	r3, #32
  40117c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40117e:	4b0e      	ldr	r3, [pc, #56]	; (4011b8 <pmc_enable_periph_clk+0x80>)
  401180:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401184:	2101      	movs	r1, #1
  401186:	687b      	ldr	r3, [r7, #4]
  401188:	fa01 f303 	lsl.w	r3, r1, r3
  40118c:	401a      	ands	r2, r3
  40118e:	2101      	movs	r1, #1
  401190:	687b      	ldr	r3, [r7, #4]
  401192:	fa01 f303 	lsl.w	r3, r1, r3
  401196:	429a      	cmp	r2, r3
  401198:	d006      	beq.n	4011a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40119a:	4a07      	ldr	r2, [pc, #28]	; (4011b8 <pmc_enable_periph_clk+0x80>)
  40119c:	2101      	movs	r1, #1
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	fa01 f303 	lsl.w	r3, r1, r3
  4011a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4011a8:	2300      	movs	r3, #0
}
  4011aa:	4618      	mov	r0, r3
  4011ac:	370c      	adds	r7, #12
  4011ae:	46bd      	mov	sp, r7
  4011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011b4:	4770      	bx	lr
  4011b6:	bf00      	nop
  4011b8:	400e0600 	.word	0x400e0600

004011bc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4011bc:	b4b0      	push	{r4, r5, r7}
  4011be:	b091      	sub	sp, #68	; 0x44
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
  4011c4:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4011c6:	4b1b      	ldr	r3, [pc, #108]	; (401234 <pwm_clocks_generate+0x78>)
  4011c8:	f107 040c 	add.w	r4, r7, #12
  4011cc:	461d      	mov	r5, r3
  4011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4011d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4011da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4011de:	2300      	movs	r3, #0
  4011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4011e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4011e4:	009b      	lsls	r3, r3, #2
  4011e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
  4011ea:	4413      	add	r3, r2
  4011ec:	f853 3c34 	ldr.w	r3, [r3, #-52]
  4011f0:	683a      	ldr	r2, [r7, #0]
  4011f2:	fbb2 f2f3 	udiv	r2, r2, r3
  4011f6:	687b      	ldr	r3, [r7, #4]
  4011f8:	fbb2 f3f3 	udiv	r3, r2, r3
  4011fc:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4011fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401204:	d906      	bls.n	401214 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
  401206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401208:	3301      	adds	r3, #1
  40120a:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  40120c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40120e:	2b0a      	cmp	r3, #10
  401210:	d9e7      	bls.n	4011e2 <pwm_clocks_generate+0x26>
  401212:	e000      	b.n	401216 <pwm_clocks_generate+0x5a>

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
  401214:	bf00      	nop
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401218:	2b0a      	cmp	r3, #10
  40121a:	d804      	bhi.n	401226 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
  40121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40121e:	021a      	lsls	r2, r3, #8
  401220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401222:	4313      	orrs	r3, r2
  401224:	e001      	b.n	40122a <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
  401226:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  40122a:	4618      	mov	r0, r3
  40122c:	3744      	adds	r7, #68	; 0x44
  40122e:	46bd      	mov	sp, r7
  401230:	bcb0      	pop	{r4, r5, r7}
  401232:	4770      	bx	lr
  401234:	004058ec 	.word	0x004058ec

00401238 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401238:	b580      	push	{r7, lr}
  40123a:	b084      	sub	sp, #16
  40123c:	af00      	add	r7, sp, #0
  40123e:	6078      	str	r0, [r7, #4]
  401240:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  401242:	2300      	movs	r3, #0
  401244:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401246:	683b      	ldr	r3, [r7, #0]
  401248:	681b      	ldr	r3, [r3, #0]
  40124a:	2b00      	cmp	r3, #0
  40124c:	d011      	beq.n	401272 <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40124e:	683b      	ldr	r3, [r7, #0]
  401250:	681a      	ldr	r2, [r3, #0]
  401252:	683b      	ldr	r3, [r7, #0]
  401254:	689b      	ldr	r3, [r3, #8]
  401256:	4619      	mov	r1, r3
  401258:	4610      	mov	r0, r2
  40125a:	4b16      	ldr	r3, [pc, #88]	; (4012b4 <pwm_init+0x7c>)
  40125c:	4798      	blx	r3
  40125e:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  401260:	68bb      	ldr	r3, [r7, #8]
  401262:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401266:	4293      	cmp	r3, r2
  401268:	d101      	bne.n	40126e <pwm_init+0x36>
			return result;
  40126a:	68bb      	ldr	r3, [r7, #8]
  40126c:	e01e      	b.n	4012ac <pwm_init+0x74>
		}

		clock = result;
  40126e:	68bb      	ldr	r3, [r7, #8]
  401270:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401272:	683b      	ldr	r3, [r7, #0]
  401274:	685b      	ldr	r3, [r3, #4]
  401276:	2b00      	cmp	r3, #0
  401278:	d014      	beq.n	4012a4 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40127a:	683b      	ldr	r3, [r7, #0]
  40127c:	685a      	ldr	r2, [r3, #4]
  40127e:	683b      	ldr	r3, [r7, #0]
  401280:	689b      	ldr	r3, [r3, #8]
  401282:	4619      	mov	r1, r3
  401284:	4610      	mov	r0, r2
  401286:	4b0b      	ldr	r3, [pc, #44]	; (4012b4 <pwm_init+0x7c>)
  401288:	4798      	blx	r3
  40128a:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  40128c:	68bb      	ldr	r3, [r7, #8]
  40128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401292:	4293      	cmp	r3, r2
  401294:	d101      	bne.n	40129a <pwm_init+0x62>
			return result;
  401296:	68bb      	ldr	r3, [r7, #8]
  401298:	e008      	b.n	4012ac <pwm_init+0x74>
		}

		clock |= (result << 16);
  40129a:	68bb      	ldr	r3, [r7, #8]
  40129c:	041b      	lsls	r3, r3, #16
  40129e:	68fa      	ldr	r2, [r7, #12]
  4012a0:	4313      	orrs	r3, r2
  4012a2:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4012a4:	687b      	ldr	r3, [r7, #4]
  4012a6:	68fa      	ldr	r2, [r7, #12]
  4012a8:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  4012aa:	2300      	movs	r3, #0
}
  4012ac:	4618      	mov	r0, r3
  4012ae:	3710      	adds	r7, #16
  4012b0:	46bd      	mov	sp, r7
  4012b2:	bd80      	pop	{r7, pc}
  4012b4:	004011bd 	.word	0x004011bd

004012b8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4012b8:	b480      	push	{r7}
  4012ba:	b087      	sub	sp, #28
  4012bc:	af00      	add	r7, sp, #0
  4012be:	6078      	str	r0, [r7, #4]
  4012c0:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  4012c2:	2300      	movs	r3, #0
  4012c4:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  4012c6:	683b      	ldr	r3, [r7, #0]
  4012c8:	681b      	ldr	r3, [r3, #0]
  4012ca:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4012cc:	683b      	ldr	r3, [r7, #0]
  4012ce:	685b      	ldr	r3, [r3, #4]
  4012d0:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  4012d4:	683a      	ldr	r2, [r7, #0]
  4012d6:	7a92      	ldrb	r2, [r2, #10]
  4012d8:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4012da:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  4012dc:	683a      	ldr	r2, [r7, #0]
  4012de:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  4012e0:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  4012e2:	683a      	ldr	r2, [r7, #0]
  4012e4:	7d92      	ldrb	r2, [r2, #22]
  4012e6:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  4012e8:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  4012ea:	683a      	ldr	r2, [r7, #0]
  4012ec:	7dd2      	ldrb	r2, [r2, #23]
  4012ee:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  4012f0:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  4012f2:	683a      	ldr	r2, [r7, #0]
  4012f4:	7e12      	ldrb	r2, [r2, #24]
  4012f6:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  4012f8:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  4012fa:	683a      	ldr	r2, [r7, #0]
  4012fc:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4012fe:	4313      	orrs	r3, r2
  401300:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401302:	687a      	ldr	r2, [r7, #4]
  401304:	693b      	ldr	r3, [r7, #16]
  401306:	3310      	adds	r3, #16
  401308:	015b      	lsls	r3, r3, #5
  40130a:	4413      	add	r3, r2
  40130c:	697a      	ldr	r2, [r7, #20]
  40130e:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401310:	683b      	ldr	r3, [r7, #0]
  401312:	68da      	ldr	r2, [r3, #12]
  401314:	6879      	ldr	r1, [r7, #4]
  401316:	693b      	ldr	r3, [r7, #16]
  401318:	3310      	adds	r3, #16
  40131a:	015b      	lsls	r3, r3, #5
  40131c:	440b      	add	r3, r1
  40131e:	3304      	adds	r3, #4
  401320:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401322:	683b      	ldr	r3, [r7, #0]
  401324:	691a      	ldr	r2, [r3, #16]
  401326:	6879      	ldr	r1, [r7, #4]
  401328:	693b      	ldr	r3, [r7, #16]
  40132a:	015b      	lsls	r3, r3, #5
  40132c:	440b      	add	r3, r1
  40132e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
  401332:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401334:	683b      	ldr	r3, [r7, #0]
  401336:	7d9b      	ldrb	r3, [r3, #22]
  401338:	2b00      	cmp	r3, #0
  40133a:	d00d      	beq.n	401358 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  40133c:	683b      	ldr	r3, [r7, #0]
  40133e:	8b9b      	ldrh	r3, [r3, #28]
  401340:	041b      	lsls	r3, r3, #16
  401342:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401344:	683b      	ldr	r3, [r7, #0]
  401346:	8b5b      	ldrh	r3, [r3, #26]
  401348:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40134a:	6879      	ldr	r1, [r7, #4]
  40134c:	693b      	ldr	r3, [r7, #16]
  40134e:	015b      	lsls	r3, r3, #5
  401350:	440b      	add	r3, r1
  401352:	f503 7306 	add.w	r3, r3, #536	; 0x218
  401356:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  401358:	687b      	ldr	r3, [r7, #4]
  40135a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  40135c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  401360:	693b      	ldr	r3, [r7, #16]
  401362:	fa01 f303 	lsl.w	r3, r1, r3
  401366:	43db      	mvns	r3, r3
  401368:	4013      	ands	r3, r2
  40136a:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40136c:	683b      	ldr	r3, [r7, #0]
  40136e:	7f9b      	ldrb	r3, [r3, #30]
  401370:	461a      	mov	r2, r3
  401372:	693b      	ldr	r3, [r7, #16]
  401374:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  401376:	683b      	ldr	r3, [r7, #0]
  401378:	7fdb      	ldrb	r3, [r3, #31]
  40137a:	4619      	mov	r1, r3
  40137c:	693b      	ldr	r3, [r7, #16]
  40137e:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401382:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401384:	4313      	orrs	r3, r2
  401386:	461a      	mov	r2, r3
  401388:	697b      	ldr	r3, [r7, #20]
  40138a:	4313      	orrs	r3, r2
  40138c:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40138e:	687b      	ldr	r3, [r7, #4]
  401390:	697a      	ldr	r2, [r7, #20]
  401392:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  401398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  40139c:	693b      	ldr	r3, [r7, #16]
  40139e:	fa01 f303 	lsl.w	r3, r1, r3
  4013a2:	43db      	mvns	r3, r3
  4013a4:	4013      	ands	r3, r2
  4013a6:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4013a8:	683b      	ldr	r3, [r7, #0]
  4013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
  4013ae:	461a      	mov	r2, r3
  4013b0:	693b      	ldr	r3, [r7, #16]
  4013b2:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4013b4:	683b      	ldr	r3, [r7, #0]
  4013b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4013ba:	4619      	mov	r1, r3
  4013bc:	693b      	ldr	r3, [r7, #16]
  4013be:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  4013c2:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4013c4:	4313      	orrs	r3, r2
  4013c6:	461a      	mov	r2, r3
  4013c8:	697b      	ldr	r3, [r7, #20]
  4013ca:	4313      	orrs	r3, r2
  4013cc:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4013ce:	687b      	ldr	r3, [r7, #4]
  4013d0:	697a      	ldr	r2, [r7, #20]
  4013d2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4013d4:	2201      	movs	r2, #1
  4013d6:	693b      	ldr	r3, [r7, #16]
  4013d8:	fa02 f303 	lsl.w	r3, r2, r3
  4013dc:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  4013de:	683b      	ldr	r3, [r7, #0]
  4013e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  4013e4:	2b00      	cmp	r3, #0
  4013e6:	d006      	beq.n	4013f6 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
  4013e8:	687b      	ldr	r3, [r7, #4]
  4013ea:	6a1a      	ldr	r2, [r3, #32]
  4013ec:	68fb      	ldr	r3, [r7, #12]
  4013ee:	431a      	orrs	r2, r3
  4013f0:	687b      	ldr	r3, [r7, #4]
  4013f2:	621a      	str	r2, [r3, #32]
  4013f4:	e006      	b.n	401404 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4013f6:	687b      	ldr	r3, [r7, #4]
  4013f8:	6a1a      	ldr	r2, [r3, #32]
  4013fa:	68fb      	ldr	r3, [r7, #12]
  4013fc:	43db      	mvns	r3, r3
  4013fe:	401a      	ands	r2, r3
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  401404:	683b      	ldr	r3, [r7, #0]
  401406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40140a:	2b02      	cmp	r3, #2
  40140c:	d10b      	bne.n	401426 <pwm_channel_init+0x16e>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  40140e:	687b      	ldr	r3, [r7, #4]
  401410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401414:	2101      	movs	r1, #1
  401416:	693a      	ldr	r2, [r7, #16]
  401418:	fa01 f202 	lsl.w	r2, r1, r2
  40141c:	431a      	orrs	r2, r3
  40141e:	687b      	ldr	r3, [r7, #4]
  401420:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401424:	e024      	b.n	401470 <pwm_channel_init+0x1b8>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  401426:	687b      	ldr	r3, [r7, #4]
  401428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  40142c:	2101      	movs	r1, #1
  40142e:	693a      	ldr	r2, [r7, #16]
  401430:	fa01 f202 	lsl.w	r2, r1, r2
  401434:	43d2      	mvns	r2, r2
  401436:	401a      	ands	r2, r3
  401438:	687b      	ldr	r3, [r7, #4]
  40143a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40143e:	683b      	ldr	r3, [r7, #0]
  401440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  401444:	2b01      	cmp	r3, #1
  401446:	d109      	bne.n	40145c <pwm_channel_init+0x1a4>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  401448:	687b      	ldr	r3, [r7, #4]
  40144a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40144c:	2101      	movs	r1, #1
  40144e:	693a      	ldr	r2, [r7, #16]
  401450:	fa01 f202 	lsl.w	r2, r1, r2
  401454:	431a      	orrs	r2, r3
  401456:	687b      	ldr	r3, [r7, #4]
  401458:	669a      	str	r2, [r3, #104]	; 0x68
  40145a:	e009      	b.n	401470 <pwm_channel_init+0x1b8>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  40145c:	687b      	ldr	r3, [r7, #4]
  40145e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401460:	2101      	movs	r1, #1
  401462:	693a      	ldr	r2, [r7, #16]
  401464:	fa01 f202 	lsl.w	r2, r1, r2
  401468:	43d2      	mvns	r2, r2
  40146a:	401a      	ands	r2, r3
  40146c:	687b      	ldr	r3, [r7, #4]
  40146e:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  401470:	683b      	ldr	r3, [r7, #0]
  401472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401476:	2b02      	cmp	r3, #2
  401478:	d10c      	bne.n	401494 <pwm_channel_init+0x1dc>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  40147a:	687b      	ldr	r3, [r7, #4]
  40147c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401480:	2101      	movs	r1, #1
  401482:	693a      	ldr	r2, [r7, #16]
  401484:	fa01 f202 	lsl.w	r2, r1, r2
  401488:	0412      	lsls	r2, r2, #16
  40148a:	431a      	orrs	r2, r3
  40148c:	687b      	ldr	r3, [r7, #4]
  40148e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401492:	e027      	b.n	4014e4 <pwm_channel_init+0x22c>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401494:	687b      	ldr	r3, [r7, #4]
  401496:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  40149a:	2101      	movs	r1, #1
  40149c:	693a      	ldr	r2, [r7, #16]
  40149e:	fa01 f202 	lsl.w	r2, r1, r2
  4014a2:	0412      	lsls	r2, r2, #16
  4014a4:	43d2      	mvns	r2, r2
  4014a6:	401a      	ands	r2, r3
  4014a8:	687b      	ldr	r3, [r7, #4]
  4014aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4014ae:	683b      	ldr	r3, [r7, #0]
  4014b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  4014b4:	2b01      	cmp	r3, #1
  4014b6:	d10a      	bne.n	4014ce <pwm_channel_init+0x216>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4014b8:	687b      	ldr	r3, [r7, #4]
  4014ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014bc:	2101      	movs	r1, #1
  4014be:	693a      	ldr	r2, [r7, #16]
  4014c0:	fa01 f202 	lsl.w	r2, r1, r2
  4014c4:	0412      	lsls	r2, r2, #16
  4014c6:	431a      	orrs	r2, r3
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	669a      	str	r2, [r3, #104]	; 0x68
  4014cc:	e00a      	b.n	4014e4 <pwm_channel_init+0x22c>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  4014ce:	687b      	ldr	r3, [r7, #4]
  4014d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014d2:	2101      	movs	r1, #1
  4014d4:	693a      	ldr	r2, [r7, #16]
  4014d6:	fa01 f202 	lsl.w	r2, r1, r2
  4014da:	0412      	lsls	r2, r2, #16
  4014dc:	43d2      	mvns	r2, r2
  4014de:	401a      	ands	r2, r3
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  4014e4:	2300      	movs	r3, #0
  4014e6:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4014e8:	693b      	ldr	r3, [r7, #16]
  4014ea:	00db      	lsls	r3, r3, #3
  4014ec:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  4014ee:	687b      	ldr	r3, [r7, #4]
  4014f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4014f2:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  4014f4:	22ff      	movs	r2, #255	; 0xff
  4014f6:	693b      	ldr	r3, [r7, #16]
  4014f8:	fa02 f303 	lsl.w	r3, r2, r3
  4014fc:	43db      	mvns	r3, r3
  4014fe:	461a      	mov	r2, r3
  401500:	68bb      	ldr	r3, [r7, #8]
  401502:	4013      	ands	r3, r2
  401504:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401506:	683b      	ldr	r3, [r7, #0]
  401508:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  40150c:	461a      	mov	r2, r3
  40150e:	693b      	ldr	r3, [r7, #16]
  401510:	fa02 f303 	lsl.w	r3, r2, r3
  401514:	461a      	mov	r2, r3
  401516:	68bb      	ldr	r3, [r7, #8]
  401518:	4313      	orrs	r3, r2
  40151a:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	68ba      	ldr	r2, [r7, #8]
  401520:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401522:	693b      	ldr	r3, [r7, #16]
  401524:	2b00      	cmp	r3, #0
  401526:	d115      	bne.n	401554 <pwm_channel_init+0x29c>
		if (p_channel->spread_spectrum_mode ==
  401528:	683b      	ldr	r3, [r7, #0]
  40152a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40152e:	2b01      	cmp	r3, #1
  401530:	d109      	bne.n	401546 <pwm_channel_init+0x28e>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401532:	683b      	ldr	r3, [r7, #0]
  401534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401536:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40153a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  40153e:	687b      	ldr	r3, [r7, #4]
  401540:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401544:	e006      	b.n	401554 <pwm_channel_init+0x29c>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401546:	683b      	ldr	r3, [r7, #0]
  401548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40154a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  40154e:	687b      	ldr	r3, [r7, #4]
  401550:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401554:	687a      	ldr	r2, [r7, #4]
  401556:	693b      	ldr	r3, [r7, #16]
  401558:	3310      	adds	r3, #16
  40155a:	015b      	lsls	r3, r3, #5
  40155c:	4413      	add	r3, r2
  40155e:	681b      	ldr	r3, [r3, #0]
  401560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401564:	6879      	ldr	r1, [r7, #4]
  401566:	693b      	ldr	r3, [r7, #16]
  401568:	3310      	adds	r3, #16
  40156a:	015b      	lsls	r3, r3, #5
  40156c:	440b      	add	r3, r1
  40156e:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401570:	687a      	ldr	r2, [r7, #4]
  401572:	693b      	ldr	r3, [r7, #16]
  401574:	3310      	adds	r3, #16
  401576:	015b      	lsls	r3, r3, #5
  401578:	4413      	add	r3, r2
  40157a:	681a      	ldr	r2, [r3, #0]
  40157c:	683b      	ldr	r3, [r7, #0]
  40157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401584:	431a      	orrs	r2, r3
  401586:	6879      	ldr	r1, [r7, #4]
  401588:	693b      	ldr	r3, [r7, #16]
  40158a:	3310      	adds	r3, #16
  40158c:	015b      	lsls	r3, r3, #5
  40158e:	440b      	add	r3, r1
  401590:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401592:	2300      	movs	r3, #0
}
  401594:	4618      	mov	r0, r3
  401596:	371c      	adds	r7, #28
  401598:	46bd      	mov	sp, r7
  40159a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40159e:	4770      	bx	lr

004015a0 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  4015a0:	b480      	push	{r7}
  4015a2:	b087      	sub	sp, #28
  4015a4:	af00      	add	r7, sp, #0
  4015a6:	60f8      	str	r0, [r7, #12]
  4015a8:	60b9      	str	r1, [r7, #8]
  4015aa:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  4015ac:	68bb      	ldr	r3, [r7, #8]
  4015ae:	681b      	ldr	r3, [r3, #0]
  4015b0:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4015b2:	68bb      	ldr	r3, [r7, #8]
  4015b4:	691a      	ldr	r2, [r3, #16]
  4015b6:	687b      	ldr	r3, [r7, #4]
  4015b8:	429a      	cmp	r2, r3
  4015ba:	d202      	bcs.n	4015c2 <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  4015bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4015c0:	e00b      	b.n	4015da <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  4015c2:	68bb      	ldr	r3, [r7, #8]
  4015c4:	687a      	ldr	r2, [r7, #4]
  4015c6:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4015c8:	68fa      	ldr	r2, [r7, #12]
  4015ca:	697b      	ldr	r3, [r7, #20]
  4015cc:	015b      	lsls	r3, r3, #5
  4015ce:	4413      	add	r3, r2
  4015d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4015d4:	687a      	ldr	r2, [r7, #4]
  4015d6:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  4015d8:	2300      	movs	r3, #0
}
  4015da:	4618      	mov	r0, r3
  4015dc:	371c      	adds	r7, #28
  4015de:	46bd      	mov	sp, r7
  4015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015e4:	4770      	bx	lr
  4015e6:	bf00      	nop

004015e8 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  4015e8:	b480      	push	{r7}
  4015ea:	b083      	sub	sp, #12
  4015ec:	af00      	add	r7, sp, #0
  4015ee:	6078      	str	r0, [r7, #4]
  4015f0:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  4015f2:	2201      	movs	r2, #1
  4015f4:	683b      	ldr	r3, [r7, #0]
  4015f6:	fa02 f303 	lsl.w	r3, r2, r3
  4015fa:	461a      	mov	r2, r3
  4015fc:	687b      	ldr	r3, [r7, #4]
  4015fe:	605a      	str	r2, [r3, #4]
}
  401600:	bf00      	nop
  401602:	370c      	adds	r7, #12
  401604:	46bd      	mov	sp, r7
  401606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40160a:	4770      	bx	lr

0040160c <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  40160c:	b480      	push	{r7}
  40160e:	b083      	sub	sp, #12
  401610:	af00      	add	r7, sp, #0
  401612:	6078      	str	r0, [r7, #4]
  401614:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401616:	2201      	movs	r2, #1
  401618:	683b      	ldr	r3, [r7, #0]
  40161a:	fa02 f303 	lsl.w	r3, r2, r3
  40161e:	461a      	mov	r2, r3
  401620:	687b      	ldr	r3, [r7, #4]
  401622:	609a      	str	r2, [r3, #8]
}
  401624:	bf00      	nop
  401626:	370c      	adds	r7, #12
  401628:	46bd      	mov	sp, r7
  40162a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40162e:	4770      	bx	lr

00401630 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401630:	b480      	push	{r7}
  401632:	b083      	sub	sp, #12
  401634:	af00      	add	r7, sp, #0
  401636:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	69db      	ldr	r3, [r3, #28]
#endif
}
  40163c:	4618      	mov	r0, r3
  40163e:	370c      	adds	r7, #12
  401640:	46bd      	mov	sp, r7
  401642:	f85d 7b04 	ldr.w	r7, [sp], #4
  401646:	4770      	bx	lr

00401648 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401648:	b480      	push	{r7}
  40164a:	b085      	sub	sp, #20
  40164c:	af00      	add	r7, sp, #0
  40164e:	60f8      	str	r0, [r7, #12]
  401650:	60b9      	str	r1, [r7, #8]
  401652:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401654:	2201      	movs	r2, #1
  401656:	68bb      	ldr	r3, [r7, #8]
  401658:	409a      	lsls	r2, r3
  40165a:	687b      	ldr	r3, [r7, #4]
  40165c:	3310      	adds	r3, #16
  40165e:	2101      	movs	r1, #1
  401660:	fa01 f303 	lsl.w	r3, r1, r3
  401664:	4313      	orrs	r3, r2
  401666:	461a      	mov	r2, r3
  401668:	68fb      	ldr	r3, [r7, #12]
  40166a:	611a      	str	r2, [r3, #16]
#endif
}
  40166c:	bf00      	nop
  40166e:	3714      	adds	r7, #20
  401670:	46bd      	mov	sp, r7
  401672:	f85d 7b04 	ldr.w	r7, [sp], #4
  401676:	4770      	bx	lr

00401678 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401678:	b480      	push	{r7}
  40167a:	b085      	sub	sp, #20
  40167c:	af00      	add	r7, sp, #0
  40167e:	6078      	str	r0, [r7, #4]
  401680:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401682:	2300      	movs	r3, #0
  401684:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401686:	687b      	ldr	r3, [r7, #4]
  401688:	22ac      	movs	r2, #172	; 0xac
  40168a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40168c:	683b      	ldr	r3, [r7, #0]
  40168e:	681a      	ldr	r2, [r3, #0]
  401690:	683b      	ldr	r3, [r7, #0]
  401692:	685b      	ldr	r3, [r3, #4]
  401694:	fbb2 f3f3 	udiv	r3, r2, r3
  401698:	091b      	lsrs	r3, r3, #4
  40169a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40169c:	68fb      	ldr	r3, [r7, #12]
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d003      	beq.n	4016aa <uart_init+0x32>
  4016a2:	68fb      	ldr	r3, [r7, #12]
  4016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4016a8:	d301      	bcc.n	4016ae <uart_init+0x36>
		return 1;
  4016aa:	2301      	movs	r3, #1
  4016ac:	e00a      	b.n	4016c4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4016ae:	687b      	ldr	r3, [r7, #4]
  4016b0:	68fa      	ldr	r2, [r7, #12]
  4016b2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4016b4:	683b      	ldr	r3, [r7, #0]
  4016b6:	689a      	ldr	r2, [r3, #8]
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4016bc:	687b      	ldr	r3, [r7, #4]
  4016be:	2250      	movs	r2, #80	; 0x50
  4016c0:	601a      	str	r2, [r3, #0]

	return 0;
  4016c2:	2300      	movs	r3, #0
}
  4016c4:	4618      	mov	r0, r3
  4016c6:	3714      	adds	r7, #20
  4016c8:	46bd      	mov	sp, r7
  4016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ce:	4770      	bx	lr

004016d0 <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b083      	sub	sp, #12
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	695b      	ldr	r3, [r3, #20]
  4016dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	bf14      	ite	ne
  4016e4:	2301      	movne	r3, #1
  4016e6:	2300      	moveq	r3, #0
  4016e8:	b2db      	uxtb	r3, r3
}
  4016ea:	4618      	mov	r0, r3
  4016ec:	370c      	adds	r7, #12
  4016ee:	46bd      	mov	sp, r7
  4016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016f4:	4770      	bx	lr
  4016f6:	bf00      	nop

004016f8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4016f8:	b480      	push	{r7}
  4016fa:	b083      	sub	sp, #12
  4016fc:	af00      	add	r7, sp, #0
  4016fe:	6078      	str	r0, [r7, #4]
  401700:	460b      	mov	r3, r1
  401702:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	695b      	ldr	r3, [r3, #20]
  401708:	f003 0302 	and.w	r3, r3, #2
  40170c:	2b00      	cmp	r3, #0
  40170e:	d101      	bne.n	401714 <uart_write+0x1c>
		return 1;
  401710:	2301      	movs	r3, #1
  401712:	e003      	b.n	40171c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401714:	78fa      	ldrb	r2, [r7, #3]
  401716:	687b      	ldr	r3, [r7, #4]
  401718:	61da      	str	r2, [r3, #28]
	return 0;
  40171a:	2300      	movs	r3, #0
}
  40171c:	4618      	mov	r0, r3
  40171e:	370c      	adds	r7, #12
  401720:	46bd      	mov	sp, r7
  401722:	f85d 7b04 	ldr.w	r7, [sp], #4
  401726:	4770      	bx	lr

00401728 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401728:	b480      	push	{r7}
  40172a:	b083      	sub	sp, #12
  40172c:	af00      	add	r7, sp, #0
  40172e:	6078      	str	r0, [r7, #4]
  401730:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401732:	687b      	ldr	r3, [r7, #4]
  401734:	695b      	ldr	r3, [r3, #20]
  401736:	f003 0301 	and.w	r3, r3, #1
  40173a:	2b00      	cmp	r3, #0
  40173c:	d101      	bne.n	401742 <uart_read+0x1a>
		return 1;
  40173e:	2301      	movs	r3, #1
  401740:	e005      	b.n	40174e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401742:	687b      	ldr	r3, [r7, #4]
  401744:	699b      	ldr	r3, [r3, #24]
  401746:	b2da      	uxtb	r2, r3
  401748:	683b      	ldr	r3, [r7, #0]
  40174a:	701a      	strb	r2, [r3, #0]
	return 0;
  40174c:	2300      	movs	r3, #0
}
  40174e:	4618      	mov	r0, r3
  401750:	370c      	adds	r7, #12
  401752:	46bd      	mov	sp, r7
  401754:	f85d 7b04 	ldr.w	r7, [sp], #4
  401758:	4770      	bx	lr
  40175a:	bf00      	nop

0040175c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40175c:	b480      	push	{r7}
  40175e:	b089      	sub	sp, #36	; 0x24
  401760:	af00      	add	r7, sp, #0
  401762:	60f8      	str	r0, [r7, #12]
  401764:	60b9      	str	r1, [r7, #8]
  401766:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401768:	68bb      	ldr	r3, [r7, #8]
  40176a:	011a      	lsls	r2, r3, #4
  40176c:	687b      	ldr	r3, [r7, #4]
  40176e:	429a      	cmp	r2, r3
  401770:	d802      	bhi.n	401778 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401772:	2310      	movs	r3, #16
  401774:	61fb      	str	r3, [r7, #28]
  401776:	e001      	b.n	40177c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401778:	2308      	movs	r3, #8
  40177a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	00da      	lsls	r2, r3, #3
  401780:	69fb      	ldr	r3, [r7, #28]
  401782:	68b9      	ldr	r1, [r7, #8]
  401784:	fb01 f303 	mul.w	r3, r1, r3
  401788:	085b      	lsrs	r3, r3, #1
  40178a:	441a      	add	r2, r3
  40178c:	69fb      	ldr	r3, [r7, #28]
  40178e:	68b9      	ldr	r1, [r7, #8]
  401790:	fb01 f303 	mul.w	r3, r1, r3
  401794:	fbb2 f3f3 	udiv	r3, r2, r3
  401798:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40179a:	69bb      	ldr	r3, [r7, #24]
  40179c:	08db      	lsrs	r3, r3, #3
  40179e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4017a0:	69bb      	ldr	r3, [r7, #24]
  4017a2:	f003 0307 	and.w	r3, r3, #7
  4017a6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4017a8:	697b      	ldr	r3, [r7, #20]
  4017aa:	2b00      	cmp	r3, #0
  4017ac:	d003      	beq.n	4017b6 <usart_set_async_baudrate+0x5a>
  4017ae:	697b      	ldr	r3, [r7, #20]
  4017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4017b4:	d301      	bcc.n	4017ba <usart_set_async_baudrate+0x5e>
		return 1;
  4017b6:	2301      	movs	r3, #1
  4017b8:	e00f      	b.n	4017da <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4017ba:	69fb      	ldr	r3, [r7, #28]
  4017bc:	2b08      	cmp	r3, #8
  4017be:	d105      	bne.n	4017cc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4017c0:	68fb      	ldr	r3, [r7, #12]
  4017c2:	685b      	ldr	r3, [r3, #4]
  4017c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4017c8:	68fb      	ldr	r3, [r7, #12]
  4017ca:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4017cc:	693b      	ldr	r3, [r7, #16]
  4017ce:	041a      	lsls	r2, r3, #16
  4017d0:	697b      	ldr	r3, [r7, #20]
  4017d2:	431a      	orrs	r2, r3
  4017d4:	68fb      	ldr	r3, [r7, #12]
  4017d6:	621a      	str	r2, [r3, #32]

	return 0;
  4017d8:	2300      	movs	r3, #0
}
  4017da:	4618      	mov	r0, r3
  4017dc:	3724      	adds	r7, #36	; 0x24
  4017de:	46bd      	mov	sp, r7
  4017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017e4:	4770      	bx	lr
  4017e6:	bf00      	nop

004017e8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4017e8:	b580      	push	{r7, lr}
  4017ea:	b082      	sub	sp, #8
  4017ec:	af00      	add	r7, sp, #0
  4017ee:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4017f0:	6878      	ldr	r0, [r7, #4]
  4017f2:	4b0d      	ldr	r3, [pc, #52]	; (401828 <usart_reset+0x40>)
  4017f4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4017f6:	687b      	ldr	r3, [r7, #4]
  4017f8:	2200      	movs	r2, #0
  4017fa:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4017fc:	687b      	ldr	r3, [r7, #4]
  4017fe:	2200      	movs	r2, #0
  401800:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401802:	687b      	ldr	r3, [r7, #4]
  401804:	2200      	movs	r2, #0
  401806:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401808:	6878      	ldr	r0, [r7, #4]
  40180a:	4b08      	ldr	r3, [pc, #32]	; (40182c <usart_reset+0x44>)
  40180c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40180e:	6878      	ldr	r0, [r7, #4]
  401810:	4b07      	ldr	r3, [pc, #28]	; (401830 <usart_reset+0x48>)
  401812:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401814:	6878      	ldr	r0, [r7, #4]
  401816:	4b07      	ldr	r3, [pc, #28]	; (401834 <usart_reset+0x4c>)
  401818:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40181a:	6878      	ldr	r0, [r7, #4]
  40181c:	4b06      	ldr	r3, [pc, #24]	; (401838 <usart_reset+0x50>)
  40181e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401820:	bf00      	nop
  401822:	3708      	adds	r7, #8
  401824:	46bd      	mov	sp, r7
  401826:	bd80      	pop	{r7, pc}
  401828:	004019e9 	.word	0x004019e9
  40182c:	004018dd 	.word	0x004018dd
  401830:	00401915 	.word	0x00401915
  401834:	00401949 	.word	0x00401949
  401838:	00401965 	.word	0x00401965

0040183c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40183c:	b580      	push	{r7, lr}
  40183e:	b084      	sub	sp, #16
  401840:	af00      	add	r7, sp, #0
  401842:	60f8      	str	r0, [r7, #12]
  401844:	60b9      	str	r1, [r7, #8]
  401846:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401848:	68f8      	ldr	r0, [r7, #12]
  40184a:	4b1a      	ldr	r3, [pc, #104]	; (4018b4 <usart_init_rs232+0x78>)
  40184c:	4798      	blx	r3

	ul_reg_val = 0;
  40184e:	4b1a      	ldr	r3, [pc, #104]	; (4018b8 <usart_init_rs232+0x7c>)
  401850:	2200      	movs	r2, #0
  401852:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401854:	68bb      	ldr	r3, [r7, #8]
  401856:	2b00      	cmp	r3, #0
  401858:	d009      	beq.n	40186e <usart_init_rs232+0x32>
  40185a:	68bb      	ldr	r3, [r7, #8]
  40185c:	681b      	ldr	r3, [r3, #0]
  40185e:	687a      	ldr	r2, [r7, #4]
  401860:	4619      	mov	r1, r3
  401862:	68f8      	ldr	r0, [r7, #12]
  401864:	4b15      	ldr	r3, [pc, #84]	; (4018bc <usart_init_rs232+0x80>)
  401866:	4798      	blx	r3
  401868:	4603      	mov	r3, r0
  40186a:	2b00      	cmp	r3, #0
  40186c:	d001      	beq.n	401872 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40186e:	2301      	movs	r3, #1
  401870:	e01b      	b.n	4018aa <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401872:	68bb      	ldr	r3, [r7, #8]
  401874:	685a      	ldr	r2, [r3, #4]
  401876:	68bb      	ldr	r3, [r7, #8]
  401878:	689b      	ldr	r3, [r3, #8]
  40187a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40187c:	68bb      	ldr	r3, [r7, #8]
  40187e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401880:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401882:	68bb      	ldr	r3, [r7, #8]
  401884:	68db      	ldr	r3, [r3, #12]
  401886:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401888:	4b0b      	ldr	r3, [pc, #44]	; (4018b8 <usart_init_rs232+0x7c>)
  40188a:	681b      	ldr	r3, [r3, #0]
  40188c:	4313      	orrs	r3, r2
  40188e:	4a0a      	ldr	r2, [pc, #40]	; (4018b8 <usart_init_rs232+0x7c>)
  401890:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401892:	4b09      	ldr	r3, [pc, #36]	; (4018b8 <usart_init_rs232+0x7c>)
  401894:	681b      	ldr	r3, [r3, #0]
  401896:	4a08      	ldr	r2, [pc, #32]	; (4018b8 <usart_init_rs232+0x7c>)
  401898:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  40189a:	68fb      	ldr	r3, [r7, #12]
  40189c:	685a      	ldr	r2, [r3, #4]
  40189e:	4b06      	ldr	r3, [pc, #24]	; (4018b8 <usart_init_rs232+0x7c>)
  4018a0:	681b      	ldr	r3, [r3, #0]
  4018a2:	431a      	orrs	r2, r3
  4018a4:	68fb      	ldr	r3, [r7, #12]
  4018a6:	605a      	str	r2, [r3, #4]

	return 0;
  4018a8:	2300      	movs	r3, #0
}
  4018aa:	4618      	mov	r0, r3
  4018ac:	3710      	adds	r7, #16
  4018ae:	46bd      	mov	sp, r7
  4018b0:	bd80      	pop	{r7, pc}
  4018b2:	bf00      	nop
  4018b4:	004017e9 	.word	0x004017e9
  4018b8:	204008f8 	.word	0x204008f8
  4018bc:	0040175d 	.word	0x0040175d

004018c0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4018c0:	b480      	push	{r7}
  4018c2:	b083      	sub	sp, #12
  4018c4:	af00      	add	r7, sp, #0
  4018c6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4018c8:	687b      	ldr	r3, [r7, #4]
  4018ca:	2240      	movs	r2, #64	; 0x40
  4018cc:	601a      	str	r2, [r3, #0]
}
  4018ce:	bf00      	nop
  4018d0:	370c      	adds	r7, #12
  4018d2:	46bd      	mov	sp, r7
  4018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018d8:	4770      	bx	lr
  4018da:	bf00      	nop

004018dc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4018dc:	b480      	push	{r7}
  4018de:	b083      	sub	sp, #12
  4018e0:	af00      	add	r7, sp, #0
  4018e2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4018e4:	687b      	ldr	r3, [r7, #4]
  4018e6:	2288      	movs	r2, #136	; 0x88
  4018e8:	601a      	str	r2, [r3, #0]
}
  4018ea:	bf00      	nop
  4018ec:	370c      	adds	r7, #12
  4018ee:	46bd      	mov	sp, r7
  4018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop

004018f8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4018f8:	b480      	push	{r7}
  4018fa:	b083      	sub	sp, #12
  4018fc:	af00      	add	r7, sp, #0
  4018fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401900:	687b      	ldr	r3, [r7, #4]
  401902:	2210      	movs	r2, #16
  401904:	601a      	str	r2, [r3, #0]
}
  401906:	bf00      	nop
  401908:	370c      	adds	r7, #12
  40190a:	46bd      	mov	sp, r7
  40190c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401910:	4770      	bx	lr
  401912:	bf00      	nop

00401914 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401914:	b480      	push	{r7}
  401916:	b083      	sub	sp, #12
  401918:	af00      	add	r7, sp, #0
  40191a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40191c:	687b      	ldr	r3, [r7, #4]
  40191e:	2224      	movs	r2, #36	; 0x24
  401920:	601a      	str	r2, [r3, #0]
}
  401922:	bf00      	nop
  401924:	370c      	adds	r7, #12
  401926:	46bd      	mov	sp, r7
  401928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40192c:	4770      	bx	lr
  40192e:	bf00      	nop

00401930 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401930:	b480      	push	{r7}
  401932:	b083      	sub	sp, #12
  401934:	af00      	add	r7, sp, #0
  401936:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401938:	687b      	ldr	r3, [r7, #4]
  40193a:	695b      	ldr	r3, [r3, #20]
}
  40193c:	4618      	mov	r0, r3
  40193e:	370c      	adds	r7, #12
  401940:	46bd      	mov	sp, r7
  401942:	f85d 7b04 	ldr.w	r7, [sp], #4
  401946:	4770      	bx	lr

00401948 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401948:	b480      	push	{r7}
  40194a:	b083      	sub	sp, #12
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401950:	687b      	ldr	r3, [r7, #4]
  401952:	f44f 7280 	mov.w	r2, #256	; 0x100
  401956:	601a      	str	r2, [r3, #0]
}
  401958:	bf00      	nop
  40195a:	370c      	adds	r7, #12
  40195c:	46bd      	mov	sp, r7
  40195e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401962:	4770      	bx	lr

00401964 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401964:	b480      	push	{r7}
  401966:	b083      	sub	sp, #12
  401968:	af00      	add	r7, sp, #0
  40196a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40196c:	687b      	ldr	r3, [r7, #4]
  40196e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401972:	601a      	str	r2, [r3, #0]
}
  401974:	bf00      	nop
  401976:	370c      	adds	r7, #12
  401978:	46bd      	mov	sp, r7
  40197a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40197e:	4770      	bx	lr

00401980 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401980:	b480      	push	{r7}
  401982:	b083      	sub	sp, #12
  401984:	af00      	add	r7, sp, #0
  401986:	6078      	str	r0, [r7, #4]
  401988:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	695b      	ldr	r3, [r3, #20]
  40198e:	f003 0302 	and.w	r3, r3, #2
  401992:	2b00      	cmp	r3, #0
  401994:	d101      	bne.n	40199a <usart_write+0x1a>
		return 1;
  401996:	2301      	movs	r3, #1
  401998:	e005      	b.n	4019a6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4019a0:	687b      	ldr	r3, [r7, #4]
  4019a2:	61da      	str	r2, [r3, #28]
	return 0;
  4019a4:	2300      	movs	r3, #0
}
  4019a6:	4618      	mov	r0, r3
  4019a8:	370c      	adds	r7, #12
  4019aa:	46bd      	mov	sp, r7
  4019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop

004019b4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4019b4:	b480      	push	{r7}
  4019b6:	b083      	sub	sp, #12
  4019b8:	af00      	add	r7, sp, #0
  4019ba:	6078      	str	r0, [r7, #4]
  4019bc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	695b      	ldr	r3, [r3, #20]
  4019c2:	f003 0301 	and.w	r3, r3, #1
  4019c6:	2b00      	cmp	r3, #0
  4019c8:	d101      	bne.n	4019ce <usart_read+0x1a>
		return 1;
  4019ca:	2301      	movs	r3, #1
  4019cc:	e006      	b.n	4019dc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	699b      	ldr	r3, [r3, #24]
  4019d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4019d6:	683b      	ldr	r3, [r7, #0]
  4019d8:	601a      	str	r2, [r3, #0]

	return 0;
  4019da:	2300      	movs	r3, #0
}
  4019dc:	4618      	mov	r0, r3
  4019de:	370c      	adds	r7, #12
  4019e0:	46bd      	mov	sp, r7
  4019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019e6:	4770      	bx	lr

004019e8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4019e8:	b480      	push	{r7}
  4019ea:	b083      	sub	sp, #12
  4019ec:	af00      	add	r7, sp, #0
  4019ee:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4019f0:	687b      	ldr	r3, [r7, #4]
  4019f2:	4a04      	ldr	r2, [pc, #16]	; (401a04 <usart_disable_writeprotect+0x1c>)
  4019f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4019f8:	bf00      	nop
  4019fa:	370c      	adds	r7, #12
  4019fc:	46bd      	mov	sp, r7
  4019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a02:	4770      	bx	lr
  401a04:	55534100 	.word	0x55534100

00401a08 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401a08:	b480      	push	{r7}
  401a0a:	b083      	sub	sp, #12
  401a0c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a0e:	f3ef 8310 	mrs	r3, PRIMASK
  401a12:	607b      	str	r3, [r7, #4]
  return(result);
  401a14:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a16:	2b00      	cmp	r3, #0
  401a18:	bf0c      	ite	eq
  401a1a:	2301      	moveq	r3, #1
  401a1c:	2300      	movne	r3, #0
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401a22:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401a24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a28:	4b04      	ldr	r3, [pc, #16]	; (401a3c <cpu_irq_save+0x34>)
  401a2a:	2200      	movs	r2, #0
  401a2c:	701a      	strb	r2, [r3, #0]
	return flags;
  401a2e:	683b      	ldr	r3, [r7, #0]
}
  401a30:	4618      	mov	r0, r3
  401a32:	370c      	adds	r7, #12
  401a34:	46bd      	mov	sp, r7
  401a36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3a:	4770      	bx	lr
  401a3c:	20400000 	.word	0x20400000

00401a40 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401a40:	b480      	push	{r7}
  401a42:	b083      	sub	sp, #12
  401a44:	af00      	add	r7, sp, #0
  401a46:	6078      	str	r0, [r7, #4]
	return (flags);
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	2b00      	cmp	r3, #0
  401a4c:	bf14      	ite	ne
  401a4e:	2301      	movne	r3, #1
  401a50:	2300      	moveq	r3, #0
  401a52:	b2db      	uxtb	r3, r3
}
  401a54:	4618      	mov	r0, r3
  401a56:	370c      	adds	r7, #12
  401a58:	46bd      	mov	sp, r7
  401a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a5e:	4770      	bx	lr

00401a60 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401a60:	b580      	push	{r7, lr}
  401a62:	b082      	sub	sp, #8
  401a64:	af00      	add	r7, sp, #0
  401a66:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401a68:	6878      	ldr	r0, [r7, #4]
  401a6a:	4b07      	ldr	r3, [pc, #28]	; (401a88 <cpu_irq_restore+0x28>)
  401a6c:	4798      	blx	r3
  401a6e:	4603      	mov	r3, r0
  401a70:	2b00      	cmp	r3, #0
  401a72:	d005      	beq.n	401a80 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401a74:	4b05      	ldr	r3, [pc, #20]	; (401a8c <cpu_irq_restore+0x2c>)
  401a76:	2201      	movs	r2, #1
  401a78:	701a      	strb	r2, [r3, #0]
  401a7a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401a7e:	b662      	cpsie	i
}
  401a80:	bf00      	nop
  401a82:	3708      	adds	r7, #8
  401a84:	46bd      	mov	sp, r7
  401a86:	bd80      	pop	{r7, pc}
  401a88:	00401a41 	.word	0x00401a41
  401a8c:	20400000 	.word	0x20400000

00401a90 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401a90:	b580      	push	{r7, lr}
  401a92:	b084      	sub	sp, #16
  401a94:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401a96:	4b1e      	ldr	r3, [pc, #120]	; (401b10 <Reset_Handler+0x80>)
  401a98:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401a9a:	4b1e      	ldr	r3, [pc, #120]	; (401b14 <Reset_Handler+0x84>)
  401a9c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401a9e:	68fa      	ldr	r2, [r7, #12]
  401aa0:	68bb      	ldr	r3, [r7, #8]
  401aa2:	429a      	cmp	r2, r3
  401aa4:	d00c      	beq.n	401ac0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401aa6:	e007      	b.n	401ab8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401aa8:	68bb      	ldr	r3, [r7, #8]
  401aaa:	1d1a      	adds	r2, r3, #4
  401aac:	60ba      	str	r2, [r7, #8]
  401aae:	68fa      	ldr	r2, [r7, #12]
  401ab0:	1d11      	adds	r1, r2, #4
  401ab2:	60f9      	str	r1, [r7, #12]
  401ab4:	6812      	ldr	r2, [r2, #0]
  401ab6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401ab8:	68bb      	ldr	r3, [r7, #8]
  401aba:	4a17      	ldr	r2, [pc, #92]	; (401b18 <Reset_Handler+0x88>)
  401abc:	4293      	cmp	r3, r2
  401abe:	d3f3      	bcc.n	401aa8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401ac0:	4b16      	ldr	r3, [pc, #88]	; (401b1c <Reset_Handler+0x8c>)
  401ac2:	60bb      	str	r3, [r7, #8]
  401ac4:	e004      	b.n	401ad0 <Reset_Handler+0x40>
                *pDest++ = 0;
  401ac6:	68bb      	ldr	r3, [r7, #8]
  401ac8:	1d1a      	adds	r2, r3, #4
  401aca:	60ba      	str	r2, [r7, #8]
  401acc:	2200      	movs	r2, #0
  401ace:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401ad0:	68bb      	ldr	r3, [r7, #8]
  401ad2:	4a13      	ldr	r2, [pc, #76]	; (401b20 <Reset_Handler+0x90>)
  401ad4:	4293      	cmp	r3, r2
  401ad6:	d3f6      	bcc.n	401ac6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <Reset_Handler+0x94>)
  401ada:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401adc:	4a12      	ldr	r2, [pc, #72]	; (401b28 <Reset_Handler+0x98>)
  401ade:	68fb      	ldr	r3, [r7, #12]
  401ae0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ae4:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401ae6:	4b11      	ldr	r3, [pc, #68]	; (401b2c <Reset_Handler+0x9c>)
  401ae8:	4798      	blx	r3
  401aea:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401aec:	4a10      	ldr	r2, [pc, #64]	; (401b30 <Reset_Handler+0xa0>)
  401aee:	4b10      	ldr	r3, [pc, #64]	; (401b30 <Reset_Handler+0xa0>)
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401af6:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401af8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401afc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401b00:	6878      	ldr	r0, [r7, #4]
  401b02:	4b0c      	ldr	r3, [pc, #48]	; (401b34 <Reset_Handler+0xa4>)
  401b04:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401b06:	4b0c      	ldr	r3, [pc, #48]	; (401b38 <Reset_Handler+0xa8>)
  401b08:	4798      	blx	r3

        /* Branch to main function */
        main();
  401b0a:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <Reset_Handler+0xac>)
  401b0c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401b0e:	e7fe      	b.n	401b0e <Reset_Handler+0x7e>
  401b10:	004059c8 	.word	0x004059c8
  401b14:	20400000 	.word	0x20400000
  401b18:	2040086c 	.word	0x2040086c
  401b1c:	2040086c 	.word	0x2040086c
  401b20:	20400a4c 	.word	0x20400a4c
  401b24:	00400000 	.word	0x00400000
  401b28:	e000ed00 	.word	0xe000ed00
  401b2c:	00401a09 	.word	0x00401a09
  401b30:	e000ed88 	.word	0xe000ed88
  401b34:	00401a61 	.word	0x00401a61
  401b38:	00402879 	.word	0x00402879
  401b3c:	00402751 	.word	0x00402751

00401b40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401b40:	b480      	push	{r7}
  401b42:	af00      	add	r7, sp, #0
        while (1) {
        }
  401b44:	e7fe      	b.n	401b44 <Dummy_Handler+0x4>
  401b46:	bf00      	nop

00401b48 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401b48:	b480      	push	{r7}
  401b4a:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401b4c:	4b52      	ldr	r3, [pc, #328]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b50:	f003 0303 	and.w	r3, r3, #3
  401b54:	2b01      	cmp	r3, #1
  401b56:	d014      	beq.n	401b82 <SystemCoreClockUpdate+0x3a>
  401b58:	2b01      	cmp	r3, #1
  401b5a:	d302      	bcc.n	401b62 <SystemCoreClockUpdate+0x1a>
  401b5c:	2b02      	cmp	r3, #2
  401b5e:	d038      	beq.n	401bd2 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401b60:	e07a      	b.n	401c58 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401b62:	4b4e      	ldr	r3, [pc, #312]	; (401c9c <SystemCoreClockUpdate+0x154>)
  401b64:	695b      	ldr	r3, [r3, #20]
  401b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401b6a:	2b00      	cmp	r3, #0
  401b6c:	d004      	beq.n	401b78 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b6e:	4b4c      	ldr	r3, [pc, #304]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b74:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  401b76:	e06f      	b.n	401c58 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401b78:	4b49      	ldr	r3, [pc, #292]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401b7a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401b7e:	601a      	str	r2, [r3, #0]
      }
    break;
  401b80:	e06a      	b.n	401c58 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401b82:	4b45      	ldr	r3, [pc, #276]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401b84:	6a1b      	ldr	r3, [r3, #32]
  401b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401b8a:	2b00      	cmp	r3, #0
  401b8c:	d003      	beq.n	401b96 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401b8e:	4b44      	ldr	r3, [pc, #272]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401b90:	4a44      	ldr	r2, [pc, #272]	; (401ca4 <SystemCoreClockUpdate+0x15c>)
  401b92:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  401b94:	e060      	b.n	401c58 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b96:	4b42      	ldr	r3, [pc, #264]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401b98:	4a43      	ldr	r2, [pc, #268]	; (401ca8 <SystemCoreClockUpdate+0x160>)
  401b9a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401b9c:	4b3e      	ldr	r3, [pc, #248]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401b9e:	6a1b      	ldr	r3, [r3, #32]
  401ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ba4:	2b10      	cmp	r3, #16
  401ba6:	d004      	beq.n	401bb2 <SystemCoreClockUpdate+0x6a>
  401ba8:	2b20      	cmp	r3, #32
  401baa:	d008      	beq.n	401bbe <SystemCoreClockUpdate+0x76>
  401bac:	2b00      	cmp	r3, #0
  401bae:	d00e      	beq.n	401bce <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401bb0:	e00e      	b.n	401bd0 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401bb2:	4b3b      	ldr	r3, [pc, #236]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401bb4:	681b      	ldr	r3, [r3, #0]
  401bb6:	005b      	lsls	r3, r3, #1
  401bb8:	4a39      	ldr	r2, [pc, #228]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401bba:	6013      	str	r3, [r2, #0]
          break;
  401bbc:	e008      	b.n	401bd0 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401bbe:	4b38      	ldr	r3, [pc, #224]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401bc0:	681a      	ldr	r2, [r3, #0]
  401bc2:	4613      	mov	r3, r2
  401bc4:	005b      	lsls	r3, r3, #1
  401bc6:	4413      	add	r3, r2
  401bc8:	4a35      	ldr	r2, [pc, #212]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401bca:	6013      	str	r3, [r2, #0]
          break;
  401bcc:	e000      	b.n	401bd0 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401bce:	bf00      	nop

          default:
          break;
        }
      }
    break;
  401bd0:	e042      	b.n	401c58 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401bd2:	4b31      	ldr	r3, [pc, #196]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401bd4:	6a1b      	ldr	r3, [r3, #32]
  401bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401bda:	2b00      	cmp	r3, #0
  401bdc:	d003      	beq.n	401be6 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401bde:	4b30      	ldr	r3, [pc, #192]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401be0:	4a30      	ldr	r2, [pc, #192]	; (401ca4 <SystemCoreClockUpdate+0x15c>)
  401be2:	601a      	str	r2, [r3, #0]
  401be4:	e01c      	b.n	401c20 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401be6:	4b2e      	ldr	r3, [pc, #184]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401be8:	4a2f      	ldr	r2, [pc, #188]	; (401ca8 <SystemCoreClockUpdate+0x160>)
  401bea:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401bec:	4b2a      	ldr	r3, [pc, #168]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401bee:	6a1b      	ldr	r3, [r3, #32]
  401bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bf4:	2b10      	cmp	r3, #16
  401bf6:	d004      	beq.n	401c02 <SystemCoreClockUpdate+0xba>
  401bf8:	2b20      	cmp	r3, #32
  401bfa:	d008      	beq.n	401c0e <SystemCoreClockUpdate+0xc6>
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d00e      	beq.n	401c1e <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  401c00:	e00e      	b.n	401c20 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  401c02:	4b27      	ldr	r3, [pc, #156]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c04:	681b      	ldr	r3, [r3, #0]
  401c06:	005b      	lsls	r3, r3, #1
  401c08:	4a25      	ldr	r2, [pc, #148]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c0a:	6013      	str	r3, [r2, #0]
          break;
  401c0c:	e008      	b.n	401c20 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  401c0e:	4b24      	ldr	r3, [pc, #144]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c10:	681a      	ldr	r2, [r3, #0]
  401c12:	4613      	mov	r3, r2
  401c14:	005b      	lsls	r3, r3, #1
  401c16:	4413      	add	r3, r2
  401c18:	4a21      	ldr	r2, [pc, #132]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c1a:	6013      	str	r3, [r2, #0]
          break;
  401c1c:	e000      	b.n	401c20 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  401c1e:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401c20:	4b1d      	ldr	r3, [pc, #116]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c24:	f003 0303 	and.w	r3, r3, #3
  401c28:	2b02      	cmp	r3, #2
  401c2a:	d114      	bne.n	401c56 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c2c:	4b1a      	ldr	r3, [pc, #104]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401c30:	4b1e      	ldr	r3, [pc, #120]	; (401cac <SystemCoreClockUpdate+0x164>)
  401c32:	4013      	ands	r3, r2
  401c34:	0c1b      	lsrs	r3, r3, #16
  401c36:	3301      	adds	r3, #1
  401c38:	4a19      	ldr	r2, [pc, #100]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c3a:	6812      	ldr	r2, [r2, #0]
  401c3c:	fb02 f303 	mul.w	r3, r2, r3
  401c40:	4a17      	ldr	r2, [pc, #92]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c42:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c44:	4b14      	ldr	r3, [pc, #80]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401c48:	b2db      	uxtb	r3, r3
  401c4a:	4a15      	ldr	r2, [pc, #84]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c4c:	6812      	ldr	r2, [r2, #0]
  401c4e:	fbb2 f3f3 	udiv	r3, r2, r3
  401c52:	4a13      	ldr	r2, [pc, #76]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c54:	6013      	str	r3, [r2, #0]
      }
    break;
  401c56:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401c58:	4b0f      	ldr	r3, [pc, #60]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c60:	2b70      	cmp	r3, #112	; 0x70
  401c62:	d108      	bne.n	401c76 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401c64:	4b0e      	ldr	r3, [pc, #56]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c66:	681b      	ldr	r3, [r3, #0]
  401c68:	4a11      	ldr	r2, [pc, #68]	; (401cb0 <SystemCoreClockUpdate+0x168>)
  401c6a:	fba2 2303 	umull	r2, r3, r2, r3
  401c6e:	085b      	lsrs	r3, r3, #1
  401c70:	4a0b      	ldr	r2, [pc, #44]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c72:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401c74:	e00a      	b.n	401c8c <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401c76:	4b08      	ldr	r3, [pc, #32]	; (401c98 <SystemCoreClockUpdate+0x150>)
  401c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c7e:	091b      	lsrs	r3, r3, #4
  401c80:	4a07      	ldr	r2, [pc, #28]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c82:	6812      	ldr	r2, [r2, #0]
  401c84:	fa22 f303 	lsr.w	r3, r2, r3
  401c88:	4a05      	ldr	r2, [pc, #20]	; (401ca0 <SystemCoreClockUpdate+0x158>)
  401c8a:	6013      	str	r3, [r2, #0]
  }
}
  401c8c:	bf00      	nop
  401c8e:	46bd      	mov	sp, r7
  401c90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c94:	4770      	bx	lr
  401c96:	bf00      	nop
  401c98:	400e0600 	.word	0x400e0600
  401c9c:	400e1810 	.word	0x400e1810
  401ca0:	20400004 	.word	0x20400004
  401ca4:	00b71b00 	.word	0x00b71b00
  401ca8:	003d0900 	.word	0x003d0900
  401cac:	07ff0000 	.word	0x07ff0000
  401cb0:	aaaaaaab 	.word	0xaaaaaaab

00401cb4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401cb4:	b480      	push	{r7}
  401cb6:	b083      	sub	sp, #12
  401cb8:	af00      	add	r7, sp, #0
  401cba:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401cbc:	687b      	ldr	r3, [r7, #4]
  401cbe:	4a19      	ldr	r2, [pc, #100]	; (401d24 <system_init_flash+0x70>)
  401cc0:	4293      	cmp	r3, r2
  401cc2:	d804      	bhi.n	401cce <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401cc4:	4b18      	ldr	r3, [pc, #96]	; (401d28 <system_init_flash+0x74>)
  401cc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401cca:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401ccc:	e023      	b.n	401d16 <system_init_flash+0x62>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	4a16      	ldr	r2, [pc, #88]	; (401d2c <system_init_flash+0x78>)
  401cd2:	4293      	cmp	r3, r2
  401cd4:	d803      	bhi.n	401cde <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401cd6:	4b14      	ldr	r3, [pc, #80]	; (401d28 <system_init_flash+0x74>)
  401cd8:	4a15      	ldr	r2, [pc, #84]	; (401d30 <system_init_flash+0x7c>)
  401cda:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401cdc:	e01b      	b.n	401d16 <system_init_flash+0x62>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401cde:	687b      	ldr	r3, [r7, #4]
  401ce0:	4a14      	ldr	r2, [pc, #80]	; (401d34 <system_init_flash+0x80>)
  401ce2:	4293      	cmp	r3, r2
  401ce4:	d803      	bhi.n	401cee <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ce6:	4b10      	ldr	r3, [pc, #64]	; (401d28 <system_init_flash+0x74>)
  401ce8:	4a13      	ldr	r2, [pc, #76]	; (401d38 <system_init_flash+0x84>)
  401cea:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401cec:	e013      	b.n	401d16 <system_init_flash+0x62>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401cee:	687b      	ldr	r3, [r7, #4]
  401cf0:	4a12      	ldr	r2, [pc, #72]	; (401d3c <system_init_flash+0x88>)
  401cf2:	4293      	cmp	r3, r2
  401cf4:	d803      	bhi.n	401cfe <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401cf6:	4b0c      	ldr	r3, [pc, #48]	; (401d28 <system_init_flash+0x74>)
  401cf8:	4a11      	ldr	r2, [pc, #68]	; (401d40 <system_init_flash+0x8c>)
  401cfa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401cfc:	e00b      	b.n	401d16 <system_init_flash+0x62>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401cfe:	687b      	ldr	r3, [r7, #4]
  401d00:	4a10      	ldr	r2, [pc, #64]	; (401d44 <system_init_flash+0x90>)
  401d02:	4293      	cmp	r3, r2
  401d04:	d804      	bhi.n	401d10 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d06:	4b08      	ldr	r3, [pc, #32]	; (401d28 <system_init_flash+0x74>)
  401d08:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401d0c:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d0e:	e002      	b.n	401d16 <system_init_flash+0x62>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d10:	4b05      	ldr	r3, [pc, #20]	; (401d28 <system_init_flash+0x74>)
  401d12:	4a0d      	ldr	r2, [pc, #52]	; (401d48 <system_init_flash+0x94>)
  401d14:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d16:	bf00      	nop
  401d18:	370c      	adds	r7, #12
  401d1a:	46bd      	mov	sp, r7
  401d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d20:	4770      	bx	lr
  401d22:	bf00      	nop
  401d24:	01312cff 	.word	0x01312cff
  401d28:	400e0c00 	.word	0x400e0c00
  401d2c:	026259ff 	.word	0x026259ff
  401d30:	04000100 	.word	0x04000100
  401d34:	039386ff 	.word	0x039386ff
  401d38:	04000200 	.word	0x04000200
  401d3c:	04c4b3ff 	.word	0x04c4b3ff
  401d40:	04000300 	.word	0x04000300
  401d44:	05f5e0ff 	.word	0x05f5e0ff
  401d48:	04000500 	.word	0x04000500

00401d4c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401d4c:	b480      	push	{r7}
  401d4e:	b085      	sub	sp, #20
  401d50:	af00      	add	r7, sp, #0
  401d52:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401d54:	4b10      	ldr	r3, [pc, #64]	; (401d98 <_sbrk+0x4c>)
  401d56:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401d58:	4b10      	ldr	r3, [pc, #64]	; (401d9c <_sbrk+0x50>)
  401d5a:	681b      	ldr	r3, [r3, #0]
  401d5c:	2b00      	cmp	r3, #0
  401d5e:	d102      	bne.n	401d66 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401d60:	4b0e      	ldr	r3, [pc, #56]	; (401d9c <_sbrk+0x50>)
  401d62:	4a0f      	ldr	r2, [pc, #60]	; (401da0 <_sbrk+0x54>)
  401d64:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401d66:	4b0d      	ldr	r3, [pc, #52]	; (401d9c <_sbrk+0x50>)
  401d68:	681b      	ldr	r3, [r3, #0]
  401d6a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401d6c:	68ba      	ldr	r2, [r7, #8]
  401d6e:	687b      	ldr	r3, [r7, #4]
  401d70:	441a      	add	r2, r3
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	429a      	cmp	r2, r3
  401d76:	dd02      	ble.n	401d7e <_sbrk+0x32>
		return (caddr_t) -1;	
  401d78:	f04f 33ff 	mov.w	r3, #4294967295
  401d7c:	e006      	b.n	401d8c <_sbrk+0x40>
	}

	heap += incr;
  401d7e:	4b07      	ldr	r3, [pc, #28]	; (401d9c <_sbrk+0x50>)
  401d80:	681a      	ldr	r2, [r3, #0]
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	4413      	add	r3, r2
  401d86:	4a05      	ldr	r2, [pc, #20]	; (401d9c <_sbrk+0x50>)
  401d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401d8a:	68bb      	ldr	r3, [r7, #8]
}
  401d8c:	4618      	mov	r0, r3
  401d8e:	3714      	adds	r7, #20
  401d90:	46bd      	mov	sp, r7
  401d92:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d96:	4770      	bx	lr
  401d98:	2045fffc 	.word	0x2045fffc
  401d9c:	204008fc 	.word	0x204008fc
  401da0:	20402c50 	.word	0x20402c50

00401da4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401da4:	b480      	push	{r7}
  401da6:	b083      	sub	sp, #12
  401da8:	af00      	add	r7, sp, #0
  401daa:	6078      	str	r0, [r7, #4]
	return -1;
  401dac:	f04f 33ff 	mov.w	r3, #4294967295
}
  401db0:	4618      	mov	r0, r3
  401db2:	370c      	adds	r7, #12
  401db4:	46bd      	mov	sp, r7
  401db6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dba:	4770      	bx	lr

00401dbc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401dbc:	b480      	push	{r7}
  401dbe:	b083      	sub	sp, #12
  401dc0:	af00      	add	r7, sp, #0
  401dc2:	6078      	str	r0, [r7, #4]
  401dc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401dc6:	683b      	ldr	r3, [r7, #0]
  401dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401dcc:	605a      	str	r2, [r3, #4]

	return 0;
  401dce:	2300      	movs	r3, #0
}
  401dd0:	4618      	mov	r0, r3
  401dd2:	370c      	adds	r7, #12
  401dd4:	46bd      	mov	sp, r7
  401dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dda:	4770      	bx	lr

00401ddc <_isatty>:

extern int _isatty(int file)
{
  401ddc:	b480      	push	{r7}
  401dde:	b083      	sub	sp, #12
  401de0:	af00      	add	r7, sp, #0
  401de2:	6078      	str	r0, [r7, #4]
	return 1;
  401de4:	2301      	movs	r3, #1
}
  401de6:	4618      	mov	r0, r3
  401de8:	370c      	adds	r7, #12
  401dea:	46bd      	mov	sp, r7
  401dec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401df0:	4770      	bx	lr
  401df2:	bf00      	nop

00401df4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401df4:	b480      	push	{r7}
  401df6:	b085      	sub	sp, #20
  401df8:	af00      	add	r7, sp, #0
  401dfa:	60f8      	str	r0, [r7, #12]
  401dfc:	60b9      	str	r1, [r7, #8]
  401dfe:	607a      	str	r2, [r7, #4]
	return 0;
  401e00:	2300      	movs	r3, #0
}
  401e02:	4618      	mov	r0, r3
  401e04:	3714      	adds	r7, #20
  401e06:	46bd      	mov	sp, r7
  401e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e0c:	4770      	bx	lr
  401e0e:	bf00      	nop

00401e10 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401e10:	b480      	push	{r7}
  401e12:	b083      	sub	sp, #12
  401e14:	af00      	add	r7, sp, #0
  401e16:	4603      	mov	r3, r0
  401e18:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401e1a:	4909      	ldr	r1, [pc, #36]	; (401e40 <NVIC_EnableIRQ+0x30>)
  401e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e20:	095b      	lsrs	r3, r3, #5
  401e22:	79fa      	ldrb	r2, [r7, #7]
  401e24:	f002 021f 	and.w	r2, r2, #31
  401e28:	2001      	movs	r0, #1
  401e2a:	fa00 f202 	lsl.w	r2, r0, r2
  401e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401e32:	bf00      	nop
  401e34:	370c      	adds	r7, #12
  401e36:	46bd      	mov	sp, r7
  401e38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e3c:	4770      	bx	lr
  401e3e:	bf00      	nop
  401e40:	e000e100 	.word	0xe000e100

00401e44 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401e44:	b480      	push	{r7}
  401e46:	b083      	sub	sp, #12
  401e48:	af00      	add	r7, sp, #0
  401e4a:	4603      	mov	r3, r0
  401e4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401e4e:	4909      	ldr	r1, [pc, #36]	; (401e74 <NVIC_DisableIRQ+0x30>)
  401e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e54:	095b      	lsrs	r3, r3, #5
  401e56:	79fa      	ldrb	r2, [r7, #7]
  401e58:	f002 021f 	and.w	r2, r2, #31
  401e5c:	2001      	movs	r0, #1
  401e5e:	fa00 f202 	lsl.w	r2, r0, r2
  401e62:	3320      	adds	r3, #32
  401e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401e68:	bf00      	nop
  401e6a:	370c      	adds	r7, #12
  401e6c:	46bd      	mov	sp, r7
  401e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e72:	4770      	bx	lr
  401e74:	e000e100 	.word	0xe000e100

00401e78 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401e78:	b480      	push	{r7}
  401e7a:	b083      	sub	sp, #12
  401e7c:	af00      	add	r7, sp, #0
  401e7e:	4603      	mov	r3, r0
  401e80:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401e82:	4909      	ldr	r1, [pc, #36]	; (401ea8 <NVIC_ClearPendingIRQ+0x30>)
  401e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e88:	095b      	lsrs	r3, r3, #5
  401e8a:	79fa      	ldrb	r2, [r7, #7]
  401e8c:	f002 021f 	and.w	r2, r2, #31
  401e90:	2001      	movs	r0, #1
  401e92:	fa00 f202 	lsl.w	r2, r0, r2
  401e96:	3360      	adds	r3, #96	; 0x60
  401e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401e9c:	bf00      	nop
  401e9e:	370c      	adds	r7, #12
  401ea0:	46bd      	mov	sp, r7
  401ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ea6:	4770      	bx	lr
  401ea8:	e000e100 	.word	0xe000e100

00401eac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401eac:	b480      	push	{r7}
  401eae:	b083      	sub	sp, #12
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	4603      	mov	r3, r0
  401eb4:	6039      	str	r1, [r7, #0]
  401eb6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	da0b      	bge.n	401ed8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401ec0:	490d      	ldr	r1, [pc, #52]	; (401ef8 <NVIC_SetPriority+0x4c>)
  401ec2:	79fb      	ldrb	r3, [r7, #7]
  401ec4:	f003 030f 	and.w	r3, r3, #15
  401ec8:	3b04      	subs	r3, #4
  401eca:	683a      	ldr	r2, [r7, #0]
  401ecc:	b2d2      	uxtb	r2, r2
  401ece:	0152      	lsls	r2, r2, #5
  401ed0:	b2d2      	uxtb	r2, r2
  401ed2:	440b      	add	r3, r1
  401ed4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  401ed6:	e009      	b.n	401eec <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ed8:	4908      	ldr	r1, [pc, #32]	; (401efc <NVIC_SetPriority+0x50>)
  401eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ede:	683a      	ldr	r2, [r7, #0]
  401ee0:	b2d2      	uxtb	r2, r2
  401ee2:	0152      	lsls	r2, r2, #5
  401ee4:	b2d2      	uxtb	r2, r2
  401ee6:	440b      	add	r3, r1
  401ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401eec:	bf00      	nop
  401eee:	370c      	adds	r7, #12
  401ef0:	46bd      	mov	sp, r7
  401ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ef6:	4770      	bx	lr
  401ef8:	e000ed00 	.word	0xe000ed00
  401efc:	e000e100 	.word	0xe000e100

00401f00 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401f00:	b480      	push	{r7}
  401f02:	b083      	sub	sp, #12
  401f04:	af00      	add	r7, sp, #0
  401f06:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401f08:	687b      	ldr	r3, [r7, #4]
  401f0a:	2b07      	cmp	r3, #7
  401f0c:	d825      	bhi.n	401f5a <osc_get_rate+0x5a>
  401f0e:	a201      	add	r2, pc, #4	; (adr r2, 401f14 <osc_get_rate+0x14>)
  401f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401f14:	00401f35 	.word	0x00401f35
  401f18:	00401f3b 	.word	0x00401f3b
  401f1c:	00401f41 	.word	0x00401f41
  401f20:	00401f47 	.word	0x00401f47
  401f24:	00401f4b 	.word	0x00401f4b
  401f28:	00401f4f 	.word	0x00401f4f
  401f2c:	00401f53 	.word	0x00401f53
  401f30:	00401f57 	.word	0x00401f57
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401f34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401f38:	e010      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f3e:	e00d      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f44:	e00a      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401f46:	4b08      	ldr	r3, [pc, #32]	; (401f68 <osc_get_rate+0x68>)
  401f48:	e008      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401f4a:	4b08      	ldr	r3, [pc, #32]	; (401f6c <osc_get_rate+0x6c>)
  401f4c:	e006      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401f4e:	4b08      	ldr	r3, [pc, #32]	; (401f70 <osc_get_rate+0x70>)
  401f50:	e004      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401f52:	4b07      	ldr	r3, [pc, #28]	; (401f70 <osc_get_rate+0x70>)
  401f54:	e002      	b.n	401f5c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401f56:	4b06      	ldr	r3, [pc, #24]	; (401f70 <osc_get_rate+0x70>)
  401f58:	e000      	b.n	401f5c <osc_get_rate+0x5c>
	}

	return 0;
  401f5a:	2300      	movs	r3, #0
}
  401f5c:	4618      	mov	r0, r3
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr
  401f68:	003d0900 	.word	0x003d0900
  401f6c:	007a1200 	.word	0x007a1200
  401f70:	00b71b00 	.word	0x00b71b00

00401f74 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401f74:	b580      	push	{r7, lr}
  401f76:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401f78:	2006      	movs	r0, #6
  401f7a:	4b05      	ldr	r3, [pc, #20]	; (401f90 <sysclk_get_main_hz+0x1c>)
  401f7c:	4798      	blx	r3
  401f7e:	4602      	mov	r2, r0
  401f80:	4613      	mov	r3, r2
  401f82:	009b      	lsls	r3, r3, #2
  401f84:	4413      	add	r3, r2
  401f86:	009a      	lsls	r2, r3, #2
  401f88:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401f8a:	4618      	mov	r0, r3
  401f8c:	bd80      	pop	{r7, pc}
  401f8e:	bf00      	nop
  401f90:	00401f01 	.word	0x00401f01

00401f94 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401f94:	b580      	push	{r7, lr}
  401f96:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401f98:	4b02      	ldr	r3, [pc, #8]	; (401fa4 <sysclk_get_cpu_hz+0x10>)
  401f9a:	4798      	blx	r3
  401f9c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401f9e:	4618      	mov	r0, r3
  401fa0:	bd80      	pop	{r7, pc}
  401fa2:	bf00      	nop
  401fa4:	00401f75 	.word	0x00401f75

00401fa8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401fa8:	b580      	push	{r7, lr}
  401faa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401fac:	4b02      	ldr	r3, [pc, #8]	; (401fb8 <sysclk_get_peripheral_hz+0x10>)
  401fae:	4798      	blx	r3
  401fb0:	4603      	mov	r3, r0
  401fb2:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	bd80      	pop	{r7, pc}
  401fb8:	00401f75 	.word	0x00401f75

00401fbc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401fbc:	b580      	push	{r7, lr}
  401fbe:	b082      	sub	sp, #8
  401fc0:	af00      	add	r7, sp, #0
  401fc2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401fc4:	6878      	ldr	r0, [r7, #4]
  401fc6:	4b03      	ldr	r3, [pc, #12]	; (401fd4 <sysclk_enable_peripheral_clock+0x18>)
  401fc8:	4798      	blx	r3
}
  401fca:	bf00      	nop
  401fcc:	3708      	adds	r7, #8
  401fce:	46bd      	mov	sp, r7
  401fd0:	bd80      	pop	{r7, pc}
  401fd2:	bf00      	nop
  401fd4:	00401139 	.word	0x00401139

00401fd8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  401fd8:	b580      	push	{r7, lr}
  401fda:	b08c      	sub	sp, #48	; 0x30
  401fdc:	af00      	add	r7, sp, #0
  401fde:	6078      	str	r0, [r7, #4]
  401fe0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401fe2:	4b49      	ldr	r3, [pc, #292]	; (402108 <usart_serial_init+0x130>)
  401fe4:	4798      	blx	r3
  401fe6:	4603      	mov	r3, r0
  401fe8:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  401fea:	683b      	ldr	r3, [r7, #0]
  401fec:	681b      	ldr	r3, [r3, #0]
  401fee:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  401ff0:	683b      	ldr	r3, [r7, #0]
  401ff2:	689b      	ldr	r3, [r3, #8]
  401ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  401ff6:	683b      	ldr	r3, [r7, #0]
  401ff8:	681b      	ldr	r3, [r3, #0]
  401ffa:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  401ffc:	683b      	ldr	r3, [r7, #0]
  401ffe:	685b      	ldr	r3, [r3, #4]
  402000:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402002:	683b      	ldr	r3, [r7, #0]
  402004:	689b      	ldr	r3, [r3, #8]
  402006:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402008:	683b      	ldr	r3, [r7, #0]
  40200a:	68db      	ldr	r3, [r3, #12]
  40200c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40200e:	2300      	movs	r3, #0
  402010:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402012:	687b      	ldr	r3, [r7, #4]
  402014:	4a3d      	ldr	r2, [pc, #244]	; (40210c <usart_serial_init+0x134>)
  402016:	4293      	cmp	r3, r2
  402018:	d108      	bne.n	40202c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40201a:	2007      	movs	r0, #7
  40201c:	4b3c      	ldr	r3, [pc, #240]	; (402110 <usart_serial_init+0x138>)
  40201e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402020:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402024:	4619      	mov	r1, r3
  402026:	6878      	ldr	r0, [r7, #4]
  402028:	4b3a      	ldr	r3, [pc, #232]	; (402114 <usart_serial_init+0x13c>)
  40202a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	4a3a      	ldr	r2, [pc, #232]	; (402118 <usart_serial_init+0x140>)
  402030:	4293      	cmp	r3, r2
  402032:	d108      	bne.n	402046 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402034:	2008      	movs	r0, #8
  402036:	4b36      	ldr	r3, [pc, #216]	; (402110 <usart_serial_init+0x138>)
  402038:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40203e:	4619      	mov	r1, r3
  402040:	6878      	ldr	r0, [r7, #4]
  402042:	4b34      	ldr	r3, [pc, #208]	; (402114 <usart_serial_init+0x13c>)
  402044:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402046:	687b      	ldr	r3, [r7, #4]
  402048:	4a34      	ldr	r2, [pc, #208]	; (40211c <usart_serial_init+0x144>)
  40204a:	4293      	cmp	r3, r2
  40204c:	d108      	bne.n	402060 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40204e:	202c      	movs	r0, #44	; 0x2c
  402050:	4b2f      	ldr	r3, [pc, #188]	; (402110 <usart_serial_init+0x138>)
  402052:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402054:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402058:	4619      	mov	r1, r3
  40205a:	6878      	ldr	r0, [r7, #4]
  40205c:	4b2d      	ldr	r3, [pc, #180]	; (402114 <usart_serial_init+0x13c>)
  40205e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402060:	687b      	ldr	r3, [r7, #4]
  402062:	4a2f      	ldr	r2, [pc, #188]	; (402120 <usart_serial_init+0x148>)
  402064:	4293      	cmp	r3, r2
  402066:	d108      	bne.n	40207a <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  402068:	202d      	movs	r0, #45	; 0x2d
  40206a:	4b29      	ldr	r3, [pc, #164]	; (402110 <usart_serial_init+0x138>)
  40206c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402072:	4619      	mov	r1, r3
  402074:	6878      	ldr	r0, [r7, #4]
  402076:	4b27      	ldr	r3, [pc, #156]	; (402114 <usart_serial_init+0x13c>)
  402078:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	4a29      	ldr	r2, [pc, #164]	; (402124 <usart_serial_init+0x14c>)
  40207e:	4293      	cmp	r3, r2
  402080:	d111      	bne.n	4020a6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402082:	200d      	movs	r0, #13
  402084:	4b22      	ldr	r3, [pc, #136]	; (402110 <usart_serial_init+0x138>)
  402086:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402088:	4b1f      	ldr	r3, [pc, #124]	; (402108 <usart_serial_init+0x130>)
  40208a:	4798      	blx	r3
  40208c:	4602      	mov	r2, r0
  40208e:	f107 030c 	add.w	r3, r7, #12
  402092:	4619      	mov	r1, r3
  402094:	6878      	ldr	r0, [r7, #4]
  402096:	4b24      	ldr	r3, [pc, #144]	; (402128 <usart_serial_init+0x150>)
  402098:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40209a:	6878      	ldr	r0, [r7, #4]
  40209c:	4b23      	ldr	r3, [pc, #140]	; (40212c <usart_serial_init+0x154>)
  40209e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4020a0:	6878      	ldr	r0, [r7, #4]
  4020a2:	4b23      	ldr	r3, [pc, #140]	; (402130 <usart_serial_init+0x158>)
  4020a4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4020a6:	687b      	ldr	r3, [r7, #4]
  4020a8:	4a22      	ldr	r2, [pc, #136]	; (402134 <usart_serial_init+0x15c>)
  4020aa:	4293      	cmp	r3, r2
  4020ac:	d111      	bne.n	4020d2 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4020ae:	200e      	movs	r0, #14
  4020b0:	4b17      	ldr	r3, [pc, #92]	; (402110 <usart_serial_init+0x138>)
  4020b2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4020b4:	4b14      	ldr	r3, [pc, #80]	; (402108 <usart_serial_init+0x130>)
  4020b6:	4798      	blx	r3
  4020b8:	4602      	mov	r2, r0
  4020ba:	f107 030c 	add.w	r3, r7, #12
  4020be:	4619      	mov	r1, r3
  4020c0:	6878      	ldr	r0, [r7, #4]
  4020c2:	4b19      	ldr	r3, [pc, #100]	; (402128 <usart_serial_init+0x150>)
  4020c4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4020c6:	6878      	ldr	r0, [r7, #4]
  4020c8:	4b18      	ldr	r3, [pc, #96]	; (40212c <usart_serial_init+0x154>)
  4020ca:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4020cc:	6878      	ldr	r0, [r7, #4]
  4020ce:	4b18      	ldr	r3, [pc, #96]	; (402130 <usart_serial_init+0x158>)
  4020d0:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4020d2:	687b      	ldr	r3, [r7, #4]
  4020d4:	4a18      	ldr	r2, [pc, #96]	; (402138 <usart_serial_init+0x160>)
  4020d6:	4293      	cmp	r3, r2
  4020d8:	d111      	bne.n	4020fe <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4020da:	200f      	movs	r0, #15
  4020dc:	4b0c      	ldr	r3, [pc, #48]	; (402110 <usart_serial_init+0x138>)
  4020de:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4020e0:	4b09      	ldr	r3, [pc, #36]	; (402108 <usart_serial_init+0x130>)
  4020e2:	4798      	blx	r3
  4020e4:	4602      	mov	r2, r0
  4020e6:	f107 030c 	add.w	r3, r7, #12
  4020ea:	4619      	mov	r1, r3
  4020ec:	6878      	ldr	r0, [r7, #4]
  4020ee:	4b0e      	ldr	r3, [pc, #56]	; (402128 <usart_serial_init+0x150>)
  4020f0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4020f2:	6878      	ldr	r0, [r7, #4]
  4020f4:	4b0d      	ldr	r3, [pc, #52]	; (40212c <usart_serial_init+0x154>)
  4020f6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4020f8:	6878      	ldr	r0, [r7, #4]
  4020fa:	4b0d      	ldr	r3, [pc, #52]	; (402130 <usart_serial_init+0x158>)
  4020fc:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4020fe:	bf00      	nop
  402100:	3730      	adds	r7, #48	; 0x30
  402102:	46bd      	mov	sp, r7
  402104:	bd80      	pop	{r7, pc}
  402106:	bf00      	nop
  402108:	00401fa9 	.word	0x00401fa9
  40210c:	400e0800 	.word	0x400e0800
  402110:	00401fbd 	.word	0x00401fbd
  402114:	00401679 	.word	0x00401679
  402118:	400e0a00 	.word	0x400e0a00
  40211c:	400e1a00 	.word	0x400e1a00
  402120:	400e1c00 	.word	0x400e1c00
  402124:	40024000 	.word	0x40024000
  402128:	0040183d 	.word	0x0040183d
  40212c:	004018c1 	.word	0x004018c1
  402130:	004018f9 	.word	0x004018f9
  402134:	40028000 	.word	0x40028000
  402138:	4002c000 	.word	0x4002c000

0040213c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40213c:	b580      	push	{r7, lr}
  40213e:	b082      	sub	sp, #8
  402140:	af00      	add	r7, sp, #0
  402142:	6078      	str	r0, [r7, #4]
  402144:	460b      	mov	r3, r1
  402146:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402148:	687b      	ldr	r3, [r7, #4]
  40214a:	4a36      	ldr	r2, [pc, #216]	; (402224 <usart_serial_putchar+0xe8>)
  40214c:	4293      	cmp	r3, r2
  40214e:	d10a      	bne.n	402166 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402150:	bf00      	nop
  402152:	78fb      	ldrb	r3, [r7, #3]
  402154:	4619      	mov	r1, r3
  402156:	6878      	ldr	r0, [r7, #4]
  402158:	4b33      	ldr	r3, [pc, #204]	; (402228 <usart_serial_putchar+0xec>)
  40215a:	4798      	blx	r3
  40215c:	4603      	mov	r3, r0
  40215e:	2b00      	cmp	r3, #0
  402160:	d1f7      	bne.n	402152 <usart_serial_putchar+0x16>
		return 1;
  402162:	2301      	movs	r3, #1
  402164:	e05a      	b.n	40221c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402166:	687b      	ldr	r3, [r7, #4]
  402168:	4a30      	ldr	r2, [pc, #192]	; (40222c <usart_serial_putchar+0xf0>)
  40216a:	4293      	cmp	r3, r2
  40216c:	d10a      	bne.n	402184 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40216e:	bf00      	nop
  402170:	78fb      	ldrb	r3, [r7, #3]
  402172:	4619      	mov	r1, r3
  402174:	6878      	ldr	r0, [r7, #4]
  402176:	4b2c      	ldr	r3, [pc, #176]	; (402228 <usart_serial_putchar+0xec>)
  402178:	4798      	blx	r3
  40217a:	4603      	mov	r3, r0
  40217c:	2b00      	cmp	r3, #0
  40217e:	d1f7      	bne.n	402170 <usart_serial_putchar+0x34>
		return 1;
  402180:	2301      	movs	r3, #1
  402182:	e04b      	b.n	40221c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402184:	687b      	ldr	r3, [r7, #4]
  402186:	4a2a      	ldr	r2, [pc, #168]	; (402230 <usart_serial_putchar+0xf4>)
  402188:	4293      	cmp	r3, r2
  40218a:	d10a      	bne.n	4021a2 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  40218c:	bf00      	nop
  40218e:	78fb      	ldrb	r3, [r7, #3]
  402190:	4619      	mov	r1, r3
  402192:	6878      	ldr	r0, [r7, #4]
  402194:	4b24      	ldr	r3, [pc, #144]	; (402228 <usart_serial_putchar+0xec>)
  402196:	4798      	blx	r3
  402198:	4603      	mov	r3, r0
  40219a:	2b00      	cmp	r3, #0
  40219c:	d1f7      	bne.n	40218e <usart_serial_putchar+0x52>
		return 1;
  40219e:	2301      	movs	r3, #1
  4021a0:	e03c      	b.n	40221c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4021a2:	687b      	ldr	r3, [r7, #4]
  4021a4:	4a23      	ldr	r2, [pc, #140]	; (402234 <usart_serial_putchar+0xf8>)
  4021a6:	4293      	cmp	r3, r2
  4021a8:	d10a      	bne.n	4021c0 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4021aa:	bf00      	nop
  4021ac:	78fb      	ldrb	r3, [r7, #3]
  4021ae:	4619      	mov	r1, r3
  4021b0:	6878      	ldr	r0, [r7, #4]
  4021b2:	4b1d      	ldr	r3, [pc, #116]	; (402228 <usart_serial_putchar+0xec>)
  4021b4:	4798      	blx	r3
  4021b6:	4603      	mov	r3, r0
  4021b8:	2b00      	cmp	r3, #0
  4021ba:	d1f7      	bne.n	4021ac <usart_serial_putchar+0x70>
		return 1;
  4021bc:	2301      	movs	r3, #1
  4021be:	e02d      	b.n	40221c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4021c0:	687b      	ldr	r3, [r7, #4]
  4021c2:	4a1d      	ldr	r2, [pc, #116]	; (402238 <usart_serial_putchar+0xfc>)
  4021c4:	4293      	cmp	r3, r2
  4021c6:	d10a      	bne.n	4021de <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4021c8:	bf00      	nop
  4021ca:	78fb      	ldrb	r3, [r7, #3]
  4021cc:	4619      	mov	r1, r3
  4021ce:	6878      	ldr	r0, [r7, #4]
  4021d0:	4b1a      	ldr	r3, [pc, #104]	; (40223c <usart_serial_putchar+0x100>)
  4021d2:	4798      	blx	r3
  4021d4:	4603      	mov	r3, r0
  4021d6:	2b00      	cmp	r3, #0
  4021d8:	d1f7      	bne.n	4021ca <usart_serial_putchar+0x8e>
		return 1;
  4021da:	2301      	movs	r3, #1
  4021dc:	e01e      	b.n	40221c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	4a17      	ldr	r2, [pc, #92]	; (402240 <usart_serial_putchar+0x104>)
  4021e2:	4293      	cmp	r3, r2
  4021e4:	d10a      	bne.n	4021fc <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4021e6:	bf00      	nop
  4021e8:	78fb      	ldrb	r3, [r7, #3]
  4021ea:	4619      	mov	r1, r3
  4021ec:	6878      	ldr	r0, [r7, #4]
  4021ee:	4b13      	ldr	r3, [pc, #76]	; (40223c <usart_serial_putchar+0x100>)
  4021f0:	4798      	blx	r3
  4021f2:	4603      	mov	r3, r0
  4021f4:	2b00      	cmp	r3, #0
  4021f6:	d1f7      	bne.n	4021e8 <usart_serial_putchar+0xac>
		return 1;
  4021f8:	2301      	movs	r3, #1
  4021fa:	e00f      	b.n	40221c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4021fc:	687b      	ldr	r3, [r7, #4]
  4021fe:	4a11      	ldr	r2, [pc, #68]	; (402244 <usart_serial_putchar+0x108>)
  402200:	4293      	cmp	r3, r2
  402202:	d10a      	bne.n	40221a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402204:	bf00      	nop
  402206:	78fb      	ldrb	r3, [r7, #3]
  402208:	4619      	mov	r1, r3
  40220a:	6878      	ldr	r0, [r7, #4]
  40220c:	4b0b      	ldr	r3, [pc, #44]	; (40223c <usart_serial_putchar+0x100>)
  40220e:	4798      	blx	r3
  402210:	4603      	mov	r3, r0
  402212:	2b00      	cmp	r3, #0
  402214:	d1f7      	bne.n	402206 <usart_serial_putchar+0xca>
		return 1;
  402216:	2301      	movs	r3, #1
  402218:	e000      	b.n	40221c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40221a:	2300      	movs	r3, #0
}
  40221c:	4618      	mov	r0, r3
  40221e:	3708      	adds	r7, #8
  402220:	46bd      	mov	sp, r7
  402222:	bd80      	pop	{r7, pc}
  402224:	400e0800 	.word	0x400e0800
  402228:	004016f9 	.word	0x004016f9
  40222c:	400e0a00 	.word	0x400e0a00
  402230:	400e1a00 	.word	0x400e1a00
  402234:	400e1c00 	.word	0x400e1c00
  402238:	40024000 	.word	0x40024000
  40223c:	00401981 	.word	0x00401981
  402240:	40028000 	.word	0x40028000
  402244:	4002c000 	.word	0x4002c000

00402248 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402248:	b580      	push	{r7, lr}
  40224a:	b084      	sub	sp, #16
  40224c:	af00      	add	r7, sp, #0
  40224e:	6078      	str	r0, [r7, #4]
  402250:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402252:	2300      	movs	r3, #0
  402254:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402256:	687b      	ldr	r3, [r7, #4]
  402258:	4a34      	ldr	r2, [pc, #208]	; (40232c <usart_serial_getchar+0xe4>)
  40225a:	4293      	cmp	r3, r2
  40225c:	d107      	bne.n	40226e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40225e:	bf00      	nop
  402260:	6839      	ldr	r1, [r7, #0]
  402262:	6878      	ldr	r0, [r7, #4]
  402264:	4b32      	ldr	r3, [pc, #200]	; (402330 <usart_serial_getchar+0xe8>)
  402266:	4798      	blx	r3
  402268:	4603      	mov	r3, r0
  40226a:	2b00      	cmp	r3, #0
  40226c:	d1f8      	bne.n	402260 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40226e:	687b      	ldr	r3, [r7, #4]
  402270:	4a30      	ldr	r2, [pc, #192]	; (402334 <usart_serial_getchar+0xec>)
  402272:	4293      	cmp	r3, r2
  402274:	d107      	bne.n	402286 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  402276:	bf00      	nop
  402278:	6839      	ldr	r1, [r7, #0]
  40227a:	6878      	ldr	r0, [r7, #4]
  40227c:	4b2c      	ldr	r3, [pc, #176]	; (402330 <usart_serial_getchar+0xe8>)
  40227e:	4798      	blx	r3
  402280:	4603      	mov	r3, r0
  402282:	2b00      	cmp	r3, #0
  402284:	d1f8      	bne.n	402278 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402286:	687b      	ldr	r3, [r7, #4]
  402288:	4a2b      	ldr	r2, [pc, #172]	; (402338 <usart_serial_getchar+0xf0>)
  40228a:	4293      	cmp	r3, r2
  40228c:	d107      	bne.n	40229e <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  40228e:	bf00      	nop
  402290:	6839      	ldr	r1, [r7, #0]
  402292:	6878      	ldr	r0, [r7, #4]
  402294:	4b26      	ldr	r3, [pc, #152]	; (402330 <usart_serial_getchar+0xe8>)
  402296:	4798      	blx	r3
  402298:	4603      	mov	r3, r0
  40229a:	2b00      	cmp	r3, #0
  40229c:	d1f8      	bne.n	402290 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40229e:	687b      	ldr	r3, [r7, #4]
  4022a0:	4a26      	ldr	r2, [pc, #152]	; (40233c <usart_serial_getchar+0xf4>)
  4022a2:	4293      	cmp	r3, r2
  4022a4:	d107      	bne.n	4022b6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  4022a6:	bf00      	nop
  4022a8:	6839      	ldr	r1, [r7, #0]
  4022aa:	6878      	ldr	r0, [r7, #4]
  4022ac:	4b20      	ldr	r3, [pc, #128]	; (402330 <usart_serial_getchar+0xe8>)
  4022ae:	4798      	blx	r3
  4022b0:	4603      	mov	r3, r0
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	d1f8      	bne.n	4022a8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4022b6:	687b      	ldr	r3, [r7, #4]
  4022b8:	4a21      	ldr	r2, [pc, #132]	; (402340 <usart_serial_getchar+0xf8>)
  4022ba:	4293      	cmp	r3, r2
  4022bc:	d10d      	bne.n	4022da <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4022be:	bf00      	nop
  4022c0:	f107 030c 	add.w	r3, r7, #12
  4022c4:	4619      	mov	r1, r3
  4022c6:	6878      	ldr	r0, [r7, #4]
  4022c8:	4b1e      	ldr	r3, [pc, #120]	; (402344 <usart_serial_getchar+0xfc>)
  4022ca:	4798      	blx	r3
  4022cc:	4603      	mov	r3, r0
  4022ce:	2b00      	cmp	r3, #0
  4022d0:	d1f6      	bne.n	4022c0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4022d2:	68fb      	ldr	r3, [r7, #12]
  4022d4:	b2da      	uxtb	r2, r3
  4022d6:	683b      	ldr	r3, [r7, #0]
  4022d8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4022da:	687b      	ldr	r3, [r7, #4]
  4022dc:	4a1a      	ldr	r2, [pc, #104]	; (402348 <usart_serial_getchar+0x100>)
  4022de:	4293      	cmp	r3, r2
  4022e0:	d10d      	bne.n	4022fe <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4022e2:	bf00      	nop
  4022e4:	f107 030c 	add.w	r3, r7, #12
  4022e8:	4619      	mov	r1, r3
  4022ea:	6878      	ldr	r0, [r7, #4]
  4022ec:	4b15      	ldr	r3, [pc, #84]	; (402344 <usart_serial_getchar+0xfc>)
  4022ee:	4798      	blx	r3
  4022f0:	4603      	mov	r3, r0
  4022f2:	2b00      	cmp	r3, #0
  4022f4:	d1f6      	bne.n	4022e4 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4022f6:	68fb      	ldr	r3, [r7, #12]
  4022f8:	b2da      	uxtb	r2, r3
  4022fa:	683b      	ldr	r3, [r7, #0]
  4022fc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4022fe:	687b      	ldr	r3, [r7, #4]
  402300:	4a12      	ldr	r2, [pc, #72]	; (40234c <usart_serial_getchar+0x104>)
  402302:	4293      	cmp	r3, r2
  402304:	d10d      	bne.n	402322 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402306:	bf00      	nop
  402308:	f107 030c 	add.w	r3, r7, #12
  40230c:	4619      	mov	r1, r3
  40230e:	6878      	ldr	r0, [r7, #4]
  402310:	4b0c      	ldr	r3, [pc, #48]	; (402344 <usart_serial_getchar+0xfc>)
  402312:	4798      	blx	r3
  402314:	4603      	mov	r3, r0
  402316:	2b00      	cmp	r3, #0
  402318:	d1f6      	bne.n	402308 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  40231a:	68fb      	ldr	r3, [r7, #12]
  40231c:	b2da      	uxtb	r2, r3
  40231e:	683b      	ldr	r3, [r7, #0]
  402320:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402322:	bf00      	nop
  402324:	3710      	adds	r7, #16
  402326:	46bd      	mov	sp, r7
  402328:	bd80      	pop	{r7, pc}
  40232a:	bf00      	nop
  40232c:	400e0800 	.word	0x400e0800
  402330:	00401729 	.word	0x00401729
  402334:	400e0a00 	.word	0x400e0a00
  402338:	400e1a00 	.word	0x400e1a00
  40233c:	400e1c00 	.word	0x400e1c00
  402340:	40024000 	.word	0x40024000
  402344:	004019b5 	.word	0x004019b5
  402348:	40028000 	.word	0x40028000
  40234c:	4002c000 	.word	0x4002c000

00402350 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402350:	b580      	push	{r7, lr}
  402352:	b082      	sub	sp, #8
  402354:	af00      	add	r7, sp, #0
  402356:	6078      	str	r0, [r7, #4]
  402358:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40235a:	4a0f      	ldr	r2, [pc, #60]	; (402398 <stdio_serial_init+0x48>)
  40235c:	687b      	ldr	r3, [r7, #4]
  40235e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402360:	4b0e      	ldr	r3, [pc, #56]	; (40239c <stdio_serial_init+0x4c>)
  402362:	4a0f      	ldr	r2, [pc, #60]	; (4023a0 <stdio_serial_init+0x50>)
  402364:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402366:	4b0f      	ldr	r3, [pc, #60]	; (4023a4 <stdio_serial_init+0x54>)
  402368:	4a0f      	ldr	r2, [pc, #60]	; (4023a8 <stdio_serial_init+0x58>)
  40236a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40236c:	6839      	ldr	r1, [r7, #0]
  40236e:	6878      	ldr	r0, [r7, #4]
  402370:	4b0e      	ldr	r3, [pc, #56]	; (4023ac <stdio_serial_init+0x5c>)
  402372:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402374:	4b0e      	ldr	r3, [pc, #56]	; (4023b0 <stdio_serial_init+0x60>)
  402376:	681b      	ldr	r3, [r3, #0]
  402378:	689b      	ldr	r3, [r3, #8]
  40237a:	2100      	movs	r1, #0
  40237c:	4618      	mov	r0, r3
  40237e:	4b0d      	ldr	r3, [pc, #52]	; (4023b4 <stdio_serial_init+0x64>)
  402380:	4798      	blx	r3
	setbuf(stdin, NULL);
  402382:	4b0b      	ldr	r3, [pc, #44]	; (4023b0 <stdio_serial_init+0x60>)
  402384:	681b      	ldr	r3, [r3, #0]
  402386:	685b      	ldr	r3, [r3, #4]
  402388:	2100      	movs	r1, #0
  40238a:	4618      	mov	r0, r3
  40238c:	4b09      	ldr	r3, [pc, #36]	; (4023b4 <stdio_serial_init+0x64>)
  40238e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  402390:	bf00      	nop
  402392:	3708      	adds	r7, #8
  402394:	46bd      	mov	sp, r7
  402396:	bd80      	pop	{r7, pc}
  402398:	2040093c 	.word	0x2040093c
  40239c:	20400938 	.word	0x20400938
  4023a0:	0040213d 	.word	0x0040213d
  4023a4:	20400934 	.word	0x20400934
  4023a8:	00402249 	.word	0x00402249
  4023ac:	00401fd9 	.word	0x00401fd9
  4023b0:	20400430 	.word	0x20400430
  4023b4:	0040298d 	.word	0x0040298d

004023b8 <LED_init>:
};

/**
 * @Brief Inicializa o pino do LED
 */
void LED_init(int estado){
  4023b8:	b590      	push	{r4, r7, lr}
  4023ba:	b085      	sub	sp, #20
  4023bc:	af02      	add	r7, sp, #8
  4023be:	6078      	str	r0, [r7, #4]
    pmc_enable_periph_clk(LED_PIO_ID);
  4023c0:	200c      	movs	r0, #12
  4023c2:	4b07      	ldr	r3, [pc, #28]	; (4023e0 <LED_init+0x28>)
  4023c4:	4798      	blx	r3
    pio_set_output(LED_PIO, LED_PIN_MASK, estado, 0, 0 );
  4023c6:	687a      	ldr	r2, [r7, #4]
  4023c8:	2300      	movs	r3, #0
  4023ca:	9300      	str	r3, [sp, #0]
  4023cc:	2300      	movs	r3, #0
  4023ce:	f44f 7180 	mov.w	r1, #256	; 0x100
  4023d2:	4804      	ldr	r0, [pc, #16]	; (4023e4 <LED_init+0x2c>)
  4023d4:	4c04      	ldr	r4, [pc, #16]	; (4023e8 <LED_init+0x30>)
  4023d6:	47a0      	blx	r4
};
  4023d8:	bf00      	nop
  4023da:	370c      	adds	r7, #12
  4023dc:	46bd      	mov	sp, r7
  4023de:	bd90      	pop	{r4, r7, pc}
  4023e0:	00401139 	.word	0x00401139
  4023e4:	400e1200 	.word	0x400e1200
  4023e8:	00400c99 	.word	0x00400c99

004023ec <configure_console>:
 * 1 stop bit
 * sem paridade
 */

static void configure_console(void)
{
  4023ec:	b590      	push	{r4, r7, lr}
  4023ee:	b085      	sub	sp, #20
  4023f0:	af00      	add	r7, sp, #0

  /* Configura USART1 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  4023f2:	200b      	movs	r0, #11
  4023f4:	4b15      	ldr	r3, [pc, #84]	; (40244c <configure_console+0x60>)
  4023f6:	4798      	blx	r3
  sysclk_enable_peripheral_clock(ID_PIOA);
  4023f8:	200a      	movs	r0, #10
  4023fa:	4b14      	ldr	r3, [pc, #80]	; (40244c <configure_console+0x60>)
  4023fc:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  4023fe:	2210      	movs	r2, #16
  402400:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402404:	4812      	ldr	r0, [pc, #72]	; (402450 <configure_console+0x64>)
  402406:	4b13      	ldr	r3, [pc, #76]	; (402454 <configure_console+0x68>)
  402408:	4798      	blx	r3
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  40240a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40240e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402412:	4811      	ldr	r0, [pc, #68]	; (402458 <configure_console+0x6c>)
  402414:	4b0f      	ldr	r3, [pc, #60]	; (402454 <configure_console+0x68>)
  402416:	4798      	blx	r3
 	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402418:	4a10      	ldr	r2, [pc, #64]	; (40245c <configure_console+0x70>)
  40241a:	4b10      	ldr	r3, [pc, #64]	; (40245c <configure_console+0x70>)
  40241c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  402420:	f043 0310 	orr.w	r3, r3, #16
  402424:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
 
	const usart_serial_options_t uart_serial_options = {
  402428:	4b0d      	ldr	r3, [pc, #52]	; (402460 <configure_console+0x74>)
  40242a:	463c      	mov	r4, r7
  40242c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40242e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  402432:	200e      	movs	r0, #14
  402434:	4b05      	ldr	r3, [pc, #20]	; (40244c <configure_console+0x60>)
  402436:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402438:	463b      	mov	r3, r7
  40243a:	4619      	mov	r1, r3
  40243c:	4809      	ldr	r0, [pc, #36]	; (402464 <configure_console+0x78>)
  40243e:	4b0a      	ldr	r3, [pc, #40]	; (402468 <configure_console+0x7c>)
  402440:	4798      	blx	r3
}
  402442:	bf00      	nop
  402444:	3714      	adds	r7, #20
  402446:	46bd      	mov	sp, r7
  402448:	bd90      	pop	{r4, r7, pc}
  40244a:	bf00      	nop
  40244c:	00401fbd 	.word	0x00401fbd
  402450:	400e1000 	.word	0x400e1000
  402454:	00400b89 	.word	0x00400b89
  402458:	400e0e00 	.word	0x400e0e00
  40245c:	40088000 	.word	0x40088000
  402460:	00405918 	.word	0x00405918
  402464:	40028000 	.word	0x40028000
  402468:	00402351 	.word	0x00402351

0040246c <USART0_init>:

/**
 * \brief Configure UART console.
 */
static void USART0_init(void){
  40246c:	b580      	push	{r7, lr}
  40246e:	b086      	sub	sp, #24
  402470:	af00      	add	r7, sp, #0
  
  /* Configura USART0 Pinos */
  sysclk_enable_peripheral_clock(ID_PIOB);
  402472:	200b      	movs	r0, #11
  402474:	4b19      	ldr	r3, [pc, #100]	; (4024dc <USART0_init+0x70>)
  402476:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_C, PIO_PB0);
  402478:	2201      	movs	r2, #1
  40247a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40247e:	4818      	ldr	r0, [pc, #96]	; (4024e0 <USART0_init+0x74>)
  402480:	4b18      	ldr	r3, [pc, #96]	; (4024e4 <USART0_init+0x78>)
  402482:	4798      	blx	r3
  pio_set_peripheral(PIOB, PIO_PERIPH_C, PIO_PB1);
  402484:	2202      	movs	r2, #2
  402486:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40248a:	4815      	ldr	r0, [pc, #84]	; (4024e0 <USART0_init+0x74>)
  40248c:	4b15      	ldr	r3, [pc, #84]	; (4024e4 <USART0_init+0x78>)
  40248e:	4798      	blx	r3
  
  /* Configura opcoes USART */
  const sam_usart_opt_t usart_settings = {
  402490:	463b      	mov	r3, r7
  402492:	2200      	movs	r2, #0
  402494:	601a      	str	r2, [r3, #0]
  402496:	605a      	str	r2, [r3, #4]
  402498:	609a      	str	r2, [r3, #8]
  40249a:	60da      	str	r2, [r3, #12]
  40249c:	611a      	str	r2, [r3, #16]
  40249e:	615a      	str	r2, [r3, #20]
  4024a0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  4024a4:	603b      	str	r3, [r7, #0]
  4024a6:	23c0      	movs	r3, #192	; 0xc0
  4024a8:	607b      	str	r3, [r7, #4]
  4024aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024ae:	60bb      	str	r3, [r7, #8]
    .stop_bits    = US_MR_NBSTOP_1_BIT,
    .channel_mode = US_MR_CHMODE_NORMAL
  };

  /* Ativa Clock periferico USART0 */
  sysclk_enable_peripheral_clock(ID_USART0);
  4024b0:	200d      	movs	r0, #13
  4024b2:	4b0a      	ldr	r3, [pc, #40]	; (4024dc <USART0_init+0x70>)
  4024b4:	4798      	blx	r3
  
  /* Configura USART para operar em modo RS232 */
  usart_init_rs232(USART0, &usart_settings, sysclk_get_peripheral_hz());
  4024b6:	4b0c      	ldr	r3, [pc, #48]	; (4024e8 <USART0_init+0x7c>)
  4024b8:	4798      	blx	r3
  4024ba:	4602      	mov	r2, r0
  4024bc:	463b      	mov	r3, r7
  4024be:	4619      	mov	r1, r3
  4024c0:	480a      	ldr	r0, [pc, #40]	; (4024ec <USART0_init+0x80>)
  4024c2:	4b0b      	ldr	r3, [pc, #44]	; (4024f0 <USART0_init+0x84>)
  4024c4:	4798      	blx	r3
  //usart_enable_interrupt(USART0, US_IER_RXRDY);
  //NVIC_EnableIRQ(ID_USART0);
  
  /* Enable the receiver and transmitter. */
	usart_enable_tx(USART0);
  4024c6:	4809      	ldr	r0, [pc, #36]	; (4024ec <USART0_init+0x80>)
  4024c8:	4b0a      	ldr	r3, [pc, #40]	; (4024f4 <USART0_init+0x88>)
  4024ca:	4798      	blx	r3
	usart_enable_rx(USART0);
  4024cc:	4807      	ldr	r0, [pc, #28]	; (4024ec <USART0_init+0x80>)
  4024ce:	4b0a      	ldr	r3, [pc, #40]	; (4024f8 <USART0_init+0x8c>)
  4024d0:	4798      	blx	r3

 }
  4024d2:	bf00      	nop
  4024d4:	3718      	adds	r7, #24
  4024d6:	46bd      	mov	sp, r7
  4024d8:	bd80      	pop	{r7, pc}
  4024da:	bf00      	nop
  4024dc:	00401fbd 	.word	0x00401fbd
  4024e0:	400e1000 	.word	0x400e1000
  4024e4:	00400b89 	.word	0x00400b89
  4024e8:	00401fa9 	.word	0x00401fa9
  4024ec:	40024000 	.word	0x40024000
  4024f0:	0040183d 	.word	0x0040183d
  4024f4:	004018c1 	.word	0x004018c1
  4024f8:	004018f9 	.word	0x004018f9

004024fc <usart_putString>:


/**
 *  Envia para o UART uma string
 */
uint32_t usart_putString(uint8_t *pstring){
  4024fc:	b580      	push	{r7, lr}
  4024fe:	b084      	sub	sp, #16
  402500:	af00      	add	r7, sp, #0
  402502:	6078      	str	r0, [r7, #4]
  uint32_t i = 0 ;
  402504:	2300      	movs	r3, #0
  402506:	60fb      	str	r3, [r7, #12]

  while(*(pstring + i)){
  402508:	e010      	b.n	40252c <usart_putString+0x30>
    usart_serial_putchar(USART0, *(pstring+i++));
  40250a:	68fb      	ldr	r3, [r7, #12]
  40250c:	1c5a      	adds	r2, r3, #1
  40250e:	60fa      	str	r2, [r7, #12]
  402510:	687a      	ldr	r2, [r7, #4]
  402512:	4413      	add	r3, r2
  402514:	781b      	ldrb	r3, [r3, #0]
  402516:	4619      	mov	r1, r3
  402518:	480a      	ldr	r0, [pc, #40]	; (402544 <usart_putString+0x48>)
  40251a:	4b0b      	ldr	r3, [pc, #44]	; (402548 <usart_putString+0x4c>)
  40251c:	4798      	blx	r3
    while(!uart_is_tx_empty(USART0)){};
  40251e:	bf00      	nop
  402520:	4808      	ldr	r0, [pc, #32]	; (402544 <usart_putString+0x48>)
  402522:	4b0a      	ldr	r3, [pc, #40]	; (40254c <usart_putString+0x50>)
  402524:	4798      	blx	r3
  402526:	4603      	mov	r3, r0
  402528:	2b00      	cmp	r3, #0
  40252a:	d0f9      	beq.n	402520 <usart_putString+0x24>
 *  Envia para o UART uma string
 */
uint32_t usart_putString(uint8_t *pstring){
  uint32_t i = 0 ;

  while(*(pstring + i)){
  40252c:	687a      	ldr	r2, [r7, #4]
  40252e:	68fb      	ldr	r3, [r7, #12]
  402530:	4413      	add	r3, r2
  402532:	781b      	ldrb	r3, [r3, #0]
  402534:	2b00      	cmp	r3, #0
  402536:	d1e8      	bne.n	40250a <usart_putString+0xe>
    usart_serial_putchar(USART0, *(pstring+i++));
    while(!uart_is_tx_empty(USART0)){};
  }    
     
  return(i);
  402538:	68fb      	ldr	r3, [r7, #12]
}
  40253a:	4618      	mov	r0, r3
  40253c:	3710      	adds	r7, #16
  40253e:	46bd      	mov	sp, r7
  402540:	bd80      	pop	{r7, pc}
  402542:	bf00      	nop
  402544:	40024000 	.word	0x40024000
  402548:	0040213d 	.word	0x0040213d
  40254c:	004016d1 	.word	0x004016d1

00402550 <USART0_Handler>:
  //*(pstring+i+1)= 0x00;
  return(i);
  
}

  void USART0_Handler(void){
  402550:	b580      	push	{r7, lr}
  402552:	b082      	sub	sp, #8
  402554:	af00      	add	r7, sp, #0
	  uint32_t ret = usart_get_status(USART0);
  402556:	4806      	ldr	r0, [pc, #24]	; (402570 <USART0_Handler+0x20>)
  402558:	4b06      	ldr	r3, [pc, #24]	; (402574 <USART0_Handler+0x24>)
  40255a:	4798      	blx	r3
  40255c:	6078      	str	r0, [r7, #4]
	  if(ret & US_IER_RXRDY){
  40255e:	687b      	ldr	r3, [r7, #4]
  402560:	f003 0301 	and.w	r3, r3, #1
  402564:	2b00      	cmp	r3, #0
		  //usart_getString(bufferRX);
		  //printf("%s", bufferRX);
		  } else if(ret & US_IER_TXRDY){
	  }
  }
  402566:	bf00      	nop
  402568:	3708      	adds	r7, #8
  40256a:	46bd      	mov	sp, r7
  40256c:	bd80      	pop	{r7, pc}
  40256e:	bf00      	nop
  402570:	40024000 	.word	0x40024000
  402574:	00401931 	.word	0x00401931

00402578 <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  402578:	b580      	push	{r7, lr}
  40257a:	b082      	sub	sp, #8
  40257c:	af00      	add	r7, sp, #0

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  40257e:	4811      	ldr	r0, [pc, #68]	; (4025c4 <PWM0_Handler+0x4c>)
  402580:	4b11      	ldr	r3, [pc, #68]	; (4025c8 <PWM0_Handler+0x50>)
  402582:	4798      	blx	r3
  402584:	6078      	str	r0, [r7, #4]
	

	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) == (1 << PIN_PWM_LED0_CHANNEL)) {
  402586:	687b      	ldr	r3, [r7, #4]
  402588:	f003 0301 	and.w	r3, r3, #1
  40258c:	2b00      	cmp	r3, #0
  40258e:	d014      	beq.n	4025ba <PWM0_Handler+0x42>
		if(flag){
  402590:	4b0e      	ldr	r3, [pc, #56]	; (4025cc <PWM0_Handler+0x54>)
  402592:	681b      	ldr	r3, [r3, #0]
  402594:	2b00      	cmp	r3, #0
  402596:	d008      	beq.n	4025aa <PWM0_Handler+0x32>
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  402598:	4b0d      	ldr	r3, [pc, #52]	; (4025d0 <PWM0_Handler+0x58>)
  40259a:	2200      	movs	r2, #0
  40259c:	601a      	str	r2, [r3, #0]
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 50);
  40259e:	2232      	movs	r2, #50	; 0x32
  4025a0:	490b      	ldr	r1, [pc, #44]	; (4025d0 <PWM0_Handler+0x58>)
  4025a2:	4808      	ldr	r0, [pc, #32]	; (4025c4 <PWM0_Handler+0x4c>)
  4025a4:	4b0b      	ldr	r3, [pc, #44]	; (4025d4 <PWM0_Handler+0x5c>)
  4025a6:	4798      	blx	r3
		else{
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 100);
		}
	}
}
  4025a8:	e007      	b.n	4025ba <PWM0_Handler+0x42>
		if(flag){
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 50);
		}
		else{
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  4025aa:	4b09      	ldr	r3, [pc, #36]	; (4025d0 <PWM0_Handler+0x58>)
  4025ac:	2200      	movs	r2, #0
  4025ae:	601a      	str	r2, [r3, #0]
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 100);
  4025b0:	2264      	movs	r2, #100	; 0x64
  4025b2:	4907      	ldr	r1, [pc, #28]	; (4025d0 <PWM0_Handler+0x58>)
  4025b4:	4803      	ldr	r0, [pc, #12]	; (4025c4 <PWM0_Handler+0x4c>)
  4025b6:	4b07      	ldr	r3, [pc, #28]	; (4025d4 <PWM0_Handler+0x5c>)
  4025b8:	4798      	blx	r3
		}
	}
}
  4025ba:	bf00      	nop
  4025bc:	3708      	adds	r7, #8
  4025be:	46bd      	mov	sp, r7
  4025c0:	bd80      	pop	{r7, pc}
  4025c2:	bf00      	nop
  4025c4:	40020000 	.word	0x40020000
  4025c8:	00401631 	.word	0x00401631
  4025cc:	2040097c 	.word	0x2040097c
  4025d0:	20400940 	.word	0x20400940
  4025d4:	004015a1 	.word	0x004015a1

004025d8 <Motor_state>:


void Motor_state(uint32_t state){
  4025d8:	b480      	push	{r7}
  4025da:	b083      	sub	sp, #12
  4025dc:	af00      	add	r7, sp, #0
  4025de:	6078      	str	r0, [r7, #4]
	
	if(state){
  4025e0:	687b      	ldr	r3, [r7, #4]
  4025e2:	2b00      	cmp	r3, #0
  4025e4:	d003      	beq.n	4025ee <Motor_state+0x16>
		flag = 1;
  4025e6:	4b06      	ldr	r3, [pc, #24]	; (402600 <Motor_state+0x28>)
  4025e8:	2201      	movs	r2, #1
  4025ea:	601a      	str	r2, [r3, #0]
	}
	else{
		flag = 0;
	}
	
};
  4025ec:	e002      	b.n	4025f4 <Motor_state+0x1c>
	
	if(state){
		flag = 1;
	}
	else{
		flag = 0;
  4025ee:	4b04      	ldr	r3, [pc, #16]	; (402600 <Motor_state+0x28>)
  4025f0:	2200      	movs	r2, #0
  4025f2:	601a      	str	r2, [r3, #0]
	}
	
};
  4025f4:	bf00      	nop
  4025f6:	370c      	adds	r7, #12
  4025f8:	46bd      	mov	sp, r7
  4025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025fe:	4770      	bx	lr
  402600:	2040097c 	.word	0x2040097c

00402604 <PWM0_Init>:

void PWM0_Init(){
  402604:	b580      	push	{r7, lr}
  402606:	b084      	sub	sp, #16
  402608:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  40260a:	201f      	movs	r0, #31
  40260c:	4b23      	ldr	r3, [pc, #140]	; (40269c <PWM0_Init+0x98>)
  40260e:	4798      	blx	r3


	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  402610:	2100      	movs	r1, #0
  402612:	4823      	ldr	r0, [pc, #140]	; (4026a0 <PWM0_Init+0x9c>)
  402614:	4b23      	ldr	r3, [pc, #140]	; (4026a4 <PWM0_Init+0xa0>)
  402616:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  402618:	2101      	movs	r1, #1
  40261a:	4821      	ldr	r0, [pc, #132]	; (4026a0 <PWM0_Init+0x9c>)
  40261c:	4b21      	ldr	r3, [pc, #132]	; (4026a4 <PWM0_Init+0xa0>)
  40261e:	4798      	blx	r3


	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  402620:	4b21      	ldr	r3, [pc, #132]	; (4026a8 <PWM0_Init+0xa4>)
  402622:	607b      	str	r3, [r7, #4]
  402624:	2300      	movs	r3, #0
  402626:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  402628:	4b20      	ldr	r3, [pc, #128]	; (4026ac <PWM0_Init+0xa8>)
  40262a:	4798      	blx	r3
  40262c:	4603      	mov	r3, r0
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);


	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  40262e:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM0, &clock_setting);
  402630:	1d3b      	adds	r3, r7, #4
  402632:	4619      	mov	r1, r3
  402634:	481a      	ldr	r0, [pc, #104]	; (4026a0 <PWM0_Init+0x9c>)
  402636:	4b1e      	ldr	r3, [pc, #120]	; (4026b0 <PWM0_Init+0xac>)
  402638:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  40263a:	4b1e      	ldr	r3, [pc, #120]	; (4026b4 <PWM0_Init+0xb0>)
  40263c:	2200      	movs	r2, #0
  40263e:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  402640:	4b1c      	ldr	r3, [pc, #112]	; (4026b4 <PWM0_Init+0xb0>)
  402642:	2200      	movs	r2, #0
  402644:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  402646:	4b1b      	ldr	r3, [pc, #108]	; (4026b4 <PWM0_Init+0xb0>)
  402648:	220b      	movs	r2, #11
  40264a:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  40264c:	4b19      	ldr	r3, [pc, #100]	; (4026b4 <PWM0_Init+0xb0>)
  40264e:	2264      	movs	r2, #100	; 0x64
  402650:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = 100;
  402652:	4b18      	ldr	r3, [pc, #96]	; (4026b4 <PWM0_Init+0xb0>)
  402654:	2264      	movs	r2, #100	; 0x64
  402656:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  402658:	4b16      	ldr	r3, [pc, #88]	; (4026b4 <PWM0_Init+0xb0>)
  40265a:	2200      	movs	r2, #0
  40265c:	601a      	str	r2, [r3, #0]

	pwm_channel_init(PWM0, &g_pwm_channel_led);
  40265e:	4915      	ldr	r1, [pc, #84]	; (4026b4 <PWM0_Init+0xb0>)
  402660:	480f      	ldr	r0, [pc, #60]	; (4026a0 <PWM0_Init+0x9c>)
  402662:	4b15      	ldr	r3, [pc, #84]	; (4026b8 <PWM0_Init+0xb4>)
  402664:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  402666:	2200      	movs	r2, #0
  402668:	2100      	movs	r1, #0
  40266a:	480d      	ldr	r0, [pc, #52]	; (4026a0 <PWM0_Init+0x9c>)
  40266c:	4b13      	ldr	r3, [pc, #76]	; (4026bc <PWM0_Init+0xb8>)
  40266e:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  402670:	201f      	movs	r0, #31
  402672:	4b13      	ldr	r3, [pc, #76]	; (4026c0 <PWM0_Init+0xbc>)
  402674:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  402676:	201f      	movs	r0, #31
  402678:	4b12      	ldr	r3, [pc, #72]	; (4026c4 <PWM0_Init+0xc0>)
  40267a:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  40267c:	2100      	movs	r1, #0
  40267e:	201f      	movs	r0, #31
  402680:	4b11      	ldr	r3, [pc, #68]	; (4026c8 <PWM0_Init+0xc4>)
  402682:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  402684:	201f      	movs	r0, #31
  402686:	4b11      	ldr	r3, [pc, #68]	; (4026cc <PWM0_Init+0xc8>)
  402688:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  40268a:	2100      	movs	r1, #0
  40268c:	4804      	ldr	r0, [pc, #16]	; (4026a0 <PWM0_Init+0x9c>)
  40268e:	4b10      	ldr	r3, [pc, #64]	; (4026d0 <PWM0_Init+0xcc>)
  402690:	4798      	blx	r3

}
  402692:	bf00      	nop
  402694:	3710      	adds	r7, #16
  402696:	46bd      	mov	sp, r7
  402698:	bd80      	pop	{r7, pc}
  40269a:	bf00      	nop
  40269c:	00401139 	.word	0x00401139
  4026a0:	40020000 	.word	0x40020000
  4026a4:	0040160d 	.word	0x0040160d
  4026a8:	000186a0 	.word	0x000186a0
  4026ac:	00401f95 	.word	0x00401f95
  4026b0:	00401239 	.word	0x00401239
  4026b4:	20400940 	.word	0x20400940
  4026b8:	004012b9 	.word	0x004012b9
  4026bc:	00401649 	.word	0x00401649
  4026c0:	00401e45 	.word	0x00401e45
  4026c4:	00401e79 	.word	0x00401e79
  4026c8:	00401ead 	.word	0x00401ead
  4026cc:	00401e11 	.word	0x00401e11
  4026d0:	004015e9 	.word	0x004015e9

004026d4 <hbridge_Init>:

void hbridge_Init(){
  4026d4:	b590      	push	{r4, r7, lr}
  4026d6:	b083      	sub	sp, #12
  4026d8:	af02      	add	r7, sp, #8
	
	pmc_enable_periph_clk(PIN1_PIO_ID);
  4026da:	2010      	movs	r0, #16
  4026dc:	4b18      	ldr	r3, [pc, #96]	; (402740 <hbridge_Init+0x6c>)
  4026de:	4798      	blx	r3
	pmc_enable_periph_clk(PIN2_PIO_ID);
  4026e0:	200a      	movs	r0, #10
  4026e2:	4b17      	ldr	r3, [pc, #92]	; (402740 <hbridge_Init+0x6c>)
  4026e4:	4798      	blx	r3
	pmc_enable_periph_clk(PIN3_PIO_ID);
  4026e6:	200c      	movs	r0, #12
  4026e8:	4b15      	ldr	r3, [pc, #84]	; (402740 <hbridge_Init+0x6c>)
  4026ea:	4798      	blx	r3
	pmc_enable_periph_clk(PIN4_PIO_ID);
  4026ec:	200a      	movs	r0, #10
  4026ee:	4b14      	ldr	r3, [pc, #80]	; (402740 <hbridge_Init+0x6c>)
  4026f0:	4798      	blx	r3
	
	pio_set_output(PIN1_PIO, PIN1_PIN_MASK, 1, 0, 0);
  4026f2:	2300      	movs	r3, #0
  4026f4:	9300      	str	r3, [sp, #0]
  4026f6:	2300      	movs	r3, #0
  4026f8:	2201      	movs	r2, #1
  4026fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4026fe:	4811      	ldr	r0, [pc, #68]	; (402744 <hbridge_Init+0x70>)
  402700:	4c11      	ldr	r4, [pc, #68]	; (402748 <hbridge_Init+0x74>)
  402702:	47a0      	blx	r4
	pio_set_output(PIN2_PIO, PIN2_PIN_MASK, 0, 0, 0);
  402704:	2300      	movs	r3, #0
  402706:	9300      	str	r3, [sp, #0]
  402708:	2300      	movs	r3, #0
  40270a:	2200      	movs	r2, #0
  40270c:	2140      	movs	r1, #64	; 0x40
  40270e:	480f      	ldr	r0, [pc, #60]	; (40274c <hbridge_Init+0x78>)
  402710:	4c0d      	ldr	r4, [pc, #52]	; (402748 <hbridge_Init+0x74>)
  402712:	47a0      	blx	r4
	pio_set_output(PIN2_PIO, PIN3_PIN_MASK, 1, 0, 0);
  402714:	2300      	movs	r3, #0
  402716:	9300      	str	r3, [sp, #0]
  402718:	2300      	movs	r3, #0
  40271a:	2201      	movs	r2, #1
  40271c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402720:	480a      	ldr	r0, [pc, #40]	; (40274c <hbridge_Init+0x78>)
  402722:	4c09      	ldr	r4, [pc, #36]	; (402748 <hbridge_Init+0x74>)
  402724:	47a0      	blx	r4
	pio_set_output(PIN2_PIO, PIN4_PIN_MASK, 0, 0, 0);
  402726:	2300      	movs	r3, #0
  402728:	9300      	str	r3, [sp, #0]
  40272a:	2300      	movs	r3, #0
  40272c:	2200      	movs	r2, #0
  40272e:	2104      	movs	r1, #4
  402730:	4806      	ldr	r0, [pc, #24]	; (40274c <hbridge_Init+0x78>)
  402732:	4c05      	ldr	r4, [pc, #20]	; (402748 <hbridge_Init+0x74>)
  402734:	47a0      	blx	r4
}
  402736:	bf00      	nop
  402738:	3704      	adds	r7, #4
  40273a:	46bd      	mov	sp, r7
  40273c:	bd90      	pop	{r4, r7, pc}
  40273e:	bf00      	nop
  402740:	00401139 	.word	0x00401139
  402744:	400e1400 	.word	0x400e1400
  402748:	00400c99 	.word	0x00400c99
  40274c:	400e0e00 	.word	0x400e0e00

00402750 <main>:


/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  402750:	b5b0      	push	{r4, r5, r7, lr}
  402752:	b082      	sub	sp, #8
  402754:	af00      	add	r7, sp, #0


  /* Initialize the SAM system */
  sysclk_init();
  402756:	4b36      	ldr	r3, [pc, #216]	; (402830 <main+0xe0>)
  402758:	4798      	blx	r3
  board_init();
  40275a:	4b36      	ldr	r3, [pc, #216]	; (402834 <main+0xe4>)
  40275c:	4798      	blx	r3
  
  /* Inicializa com serial com PC*/
  configure_console();
  40275e:	4b36      	ldr	r3, [pc, #216]	; (402838 <main+0xe8>)
  402760:	4798      	blx	r3
 
  /* Configura USART0 para comunicacao com o HM-10 */
  USART0_init();
  402762:	4b36      	ldr	r3, [pc, #216]	; (40283c <main+0xec>)
  402764:	4798      	blx	r3

  LED_init(1);
  402766:	2001      	movs	r0, #1
  402768:	4b35      	ldr	r3, [pc, #212]	; (402840 <main+0xf0>)
  40276a:	4798      	blx	r3

  sprintf(bufferTX, "%s", "AT+CONA81B6AAB4B86");
  40276c:	4a35      	ldr	r2, [pc, #212]	; (402844 <main+0xf4>)
  40276e:	4b36      	ldr	r3, [pc, #216]	; (402848 <main+0xf8>)
  402770:	4615      	mov	r5, r2
  402772:	461c      	mov	r4, r3
  402774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402776:	6028      	str	r0, [r5, #0]
  402778:	6069      	str	r1, [r5, #4]
  40277a:	60aa      	str	r2, [r5, #8]
  40277c:	60eb      	str	r3, [r5, #12]
  40277e:	8823      	ldrh	r3, [r4, #0]
  402780:	78a2      	ldrb	r2, [r4, #2]
  402782:	822b      	strh	r3, [r5, #16]
  402784:	4613      	mov	r3, r2
  402786:	74ab      	strb	r3, [r5, #18]
  //sprintf(bufferTX, "%s", "AT+ROLE1");
  usart_putString(bufferTX);
  402788:	482e      	ldr	r0, [pc, #184]	; (402844 <main+0xf4>)
  40278a:	4b30      	ldr	r3, [pc, #192]	; (40284c <main+0xfc>)
  40278c:	4798      	blx	r3

  /* Inicializa funcao de delay */
  //delay_init( sysclk_get_cpu_hz());

  /**/
  PWM0_Init();
  40278e:	4b30      	ldr	r3, [pc, #192]	; (402850 <main+0x100>)
  402790:	4798      	blx	r3

  /**/
  hbridge_Init();
  402792:	4b30      	ldr	r3, [pc, #192]	; (402854 <main+0x104>)
  402794:	4798      	blx	r3
        
	while (1) {
		Motor_state(0);
  402796:	2000      	movs	r0, #0
  402798:	4b2f      	ldr	r3, [pc, #188]	; (402858 <main+0x108>)
  40279a:	4798      	blx	r3
		pio_set(LED_PIO, LED_PIN_MASK);
  40279c:	f44f 7180 	mov.w	r1, #256	; 0x100
  4027a0:	482e      	ldr	r0, [pc, #184]	; (40285c <main+0x10c>)
  4027a2:	4b2f      	ldr	r3, [pc, #188]	; (402860 <main+0x110>)
  4027a4:	4798      	blx	r3
		usart_serial_getchar(USART0, &c);
  4027a6:	1cfb      	adds	r3, r7, #3
  4027a8:	4619      	mov	r1, r3
  4027aa:	482e      	ldr	r0, [pc, #184]	; (402864 <main+0x114>)
  4027ac:	4b2e      	ldr	r3, [pc, #184]	; (402868 <main+0x118>)
  4027ae:	4798      	blx	r3
		usart_serial_getchar(USART0, &d);
  4027b0:	1cbb      	adds	r3, r7, #2
  4027b2:	4619      	mov	r1, r3
  4027b4:	482b      	ldr	r0, [pc, #172]	; (402864 <main+0x114>)
  4027b6:	4b2c      	ldr	r3, [pc, #176]	; (402868 <main+0x118>)
  4027b8:	4798      	blx	r3
		if (c == 170 && d == 170){
  4027ba:	78fb      	ldrb	r3, [r7, #3]
  4027bc:	2baa      	cmp	r3, #170	; 0xaa
  4027be:	d1ea      	bne.n	402796 <main+0x46>
  4027c0:	78bb      	ldrb	r3, [r7, #2]
  4027c2:	2baa      	cmp	r3, #170	; 0xaa
  4027c4:	d1e7      	bne.n	402796 <main+0x46>
			usart_serial_getchar(USART0, &c);
  4027c6:	1cfb      	adds	r3, r7, #3
  4027c8:	4619      	mov	r1, r3
  4027ca:	4826      	ldr	r0, [pc, #152]	; (402864 <main+0x114>)
  4027cc:	4b26      	ldr	r3, [pc, #152]	; (402868 <main+0x118>)
  4027ce:	4798      	blx	r3
			if (c == 4) {
  4027d0:	78fb      	ldrb	r3, [r7, #3]
  4027d2:	2b04      	cmp	r3, #4
  4027d4:	d1df      	bne.n	402796 <main+0x46>
				usart_serial_getchar(USART0, &c);
  4027d6:	1cfb      	adds	r3, r7, #3
  4027d8:	4619      	mov	r1, r3
  4027da:	4822      	ldr	r0, [pc, #136]	; (402864 <main+0x114>)
  4027dc:	4b22      	ldr	r3, [pc, #136]	; (402868 <main+0x118>)
  4027de:	4798      	blx	r3
				if (c == 128) {
  4027e0:	78fb      	ldrb	r3, [r7, #3]
  4027e2:	2b80      	cmp	r3, #128	; 0x80
  4027e4:	d1d7      	bne.n	402796 <main+0x46>
					usart_serial_getchar(USART0, &c);
  4027e6:	1cfb      	adds	r3, r7, #3
  4027e8:	4619      	mov	r1, r3
  4027ea:	481e      	ldr	r0, [pc, #120]	; (402864 <main+0x114>)
  4027ec:	4b1e      	ldr	r3, [pc, #120]	; (402868 <main+0x118>)
  4027ee:	4798      	blx	r3
					if (c == 2) {
  4027f0:	78fb      	ldrb	r3, [r7, #3]
  4027f2:	2b02      	cmp	r3, #2
  4027f4:	d1cf      	bne.n	402796 <main+0x46>
						usart_serial_getchar(USART0, &c);
  4027f6:	1cfb      	adds	r3, r7, #3
  4027f8:	4619      	mov	r1, r3
  4027fa:	481a      	ldr	r0, [pc, #104]	; (402864 <main+0x114>)
  4027fc:	4b1a      	ldr	r3, [pc, #104]	; (402868 <main+0x118>)
  4027fe:	4798      	blx	r3
						usart_serial_getchar(USART0, &d);
  402800:	1cbb      	adds	r3, r7, #2
  402802:	4619      	mov	r1, r3
  402804:	4817      	ldr	r0, [pc, #92]	; (402864 <main+0x114>)
  402806:	4b18      	ldr	r3, [pc, #96]	; (402868 <main+0x118>)
  402808:	4798      	blx	r3
						int rawValue = ((int)c << 8) | d;
  40280a:	78fb      	ldrb	r3, [r7, #3]
  40280c:	021b      	lsls	r3, r3, #8
  40280e:	78ba      	ldrb	r2, [r7, #2]
  402810:	4313      	orrs	r3, r2
  402812:	607b      	str	r3, [r7, #4]
						Motor_state(1);
  402814:	2001      	movs	r0, #1
  402816:	4b10      	ldr	r3, [pc, #64]	; (402858 <main+0x108>)
  402818:	4798      	blx	r3
						pio_clear(LED_PIO, LED_PIN_MASK);
  40281a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40281e:	480f      	ldr	r0, [pc, #60]	; (40285c <main+0x10c>)
  402820:	4b12      	ldr	r3, [pc, #72]	; (40286c <main+0x11c>)
  402822:	4798      	blx	r3
						printf("%d \n", rawValue);
  402824:	6879      	ldr	r1, [r7, #4]
  402826:	4812      	ldr	r0, [pc, #72]	; (402870 <main+0x120>)
  402828:	4b12      	ldr	r3, [pc, #72]	; (402874 <main+0x124>)
  40282a:	4798      	blx	r3
					}
				}
			}
		}
	}
  40282c:	e7b3      	b.n	402796 <main+0x46>
  40282e:	bf00      	nop
  402830:	0040049d 	.word	0x0040049d
  402834:	00400a6d 	.word	0x00400a6d
  402838:	004023ed 	.word	0x004023ed
  40283c:	0040246d 	.word	0x0040246d
  402840:	004023b9 	.word	0x004023b9
  402844:	204009e4 	.word	0x204009e4
  402848:	00405928 	.word	0x00405928
  40284c:	004024fd 	.word	0x004024fd
  402850:	00402605 	.word	0x00402605
  402854:	004026d5 	.word	0x004026d5
  402858:	004025d9 	.word	0x004025d9
  40285c:	400e1200 	.word	0x400e1200
  402860:	00400b51 	.word	0x00400b51
  402864:	40024000 	.word	0x40024000
  402868:	00402249 	.word	0x00402249
  40286c:	00400b6d 	.word	0x00400b6d
  402870:	0040593c 	.word	0x0040593c
  402874:	004028c9 	.word	0x004028c9

00402878 <__libc_init_array>:
  402878:	b570      	push	{r4, r5, r6, lr}
  40287a:	4e0f      	ldr	r6, [pc, #60]	; (4028b8 <__libc_init_array+0x40>)
  40287c:	4d0f      	ldr	r5, [pc, #60]	; (4028bc <__libc_init_array+0x44>)
  40287e:	1b76      	subs	r6, r6, r5
  402880:	10b6      	asrs	r6, r6, #2
  402882:	bf18      	it	ne
  402884:	2400      	movne	r4, #0
  402886:	d005      	beq.n	402894 <__libc_init_array+0x1c>
  402888:	3401      	adds	r4, #1
  40288a:	f855 3b04 	ldr.w	r3, [r5], #4
  40288e:	4798      	blx	r3
  402890:	42a6      	cmp	r6, r4
  402892:	d1f9      	bne.n	402888 <__libc_init_array+0x10>
  402894:	4e0a      	ldr	r6, [pc, #40]	; (4028c0 <__libc_init_array+0x48>)
  402896:	4d0b      	ldr	r5, [pc, #44]	; (4028c4 <__libc_init_array+0x4c>)
  402898:	1b76      	subs	r6, r6, r5
  40289a:	f003 f87f 	bl	40599c <_init>
  40289e:	10b6      	asrs	r6, r6, #2
  4028a0:	bf18      	it	ne
  4028a2:	2400      	movne	r4, #0
  4028a4:	d006      	beq.n	4028b4 <__libc_init_array+0x3c>
  4028a6:	3401      	adds	r4, #1
  4028a8:	f855 3b04 	ldr.w	r3, [r5], #4
  4028ac:	4798      	blx	r3
  4028ae:	42a6      	cmp	r6, r4
  4028b0:	d1f9      	bne.n	4028a6 <__libc_init_array+0x2e>
  4028b2:	bd70      	pop	{r4, r5, r6, pc}
  4028b4:	bd70      	pop	{r4, r5, r6, pc}
  4028b6:	bf00      	nop
  4028b8:	004059a8 	.word	0x004059a8
  4028bc:	004059a8 	.word	0x004059a8
  4028c0:	004059b0 	.word	0x004059b0
  4028c4:	004059a8 	.word	0x004059a8

004028c8 <iprintf>:
  4028c8:	b40f      	push	{r0, r1, r2, r3}
  4028ca:	b500      	push	{lr}
  4028cc:	4907      	ldr	r1, [pc, #28]	; (4028ec <iprintf+0x24>)
  4028ce:	b083      	sub	sp, #12
  4028d0:	ab04      	add	r3, sp, #16
  4028d2:	6808      	ldr	r0, [r1, #0]
  4028d4:	f853 2b04 	ldr.w	r2, [r3], #4
  4028d8:	6881      	ldr	r1, [r0, #8]
  4028da:	9301      	str	r3, [sp, #4]
  4028dc:	f000 f942 	bl	402b64 <_vfiprintf_r>
  4028e0:	b003      	add	sp, #12
  4028e2:	f85d eb04 	ldr.w	lr, [sp], #4
  4028e6:	b004      	add	sp, #16
  4028e8:	4770      	bx	lr
  4028ea:	bf00      	nop
  4028ec:	20400430 	.word	0x20400430

004028f0 <memset>:
  4028f0:	b470      	push	{r4, r5, r6}
  4028f2:	0784      	lsls	r4, r0, #30
  4028f4:	d046      	beq.n	402984 <memset+0x94>
  4028f6:	1e54      	subs	r4, r2, #1
  4028f8:	2a00      	cmp	r2, #0
  4028fa:	d041      	beq.n	402980 <memset+0x90>
  4028fc:	b2cd      	uxtb	r5, r1
  4028fe:	4603      	mov	r3, r0
  402900:	e002      	b.n	402908 <memset+0x18>
  402902:	1e62      	subs	r2, r4, #1
  402904:	b3e4      	cbz	r4, 402980 <memset+0x90>
  402906:	4614      	mov	r4, r2
  402908:	f803 5b01 	strb.w	r5, [r3], #1
  40290c:	079a      	lsls	r2, r3, #30
  40290e:	d1f8      	bne.n	402902 <memset+0x12>
  402910:	2c03      	cmp	r4, #3
  402912:	d92e      	bls.n	402972 <memset+0x82>
  402914:	b2cd      	uxtb	r5, r1
  402916:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40291a:	2c0f      	cmp	r4, #15
  40291c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402920:	d919      	bls.n	402956 <memset+0x66>
  402922:	f103 0210 	add.w	r2, r3, #16
  402926:	4626      	mov	r6, r4
  402928:	3e10      	subs	r6, #16
  40292a:	2e0f      	cmp	r6, #15
  40292c:	f842 5c10 	str.w	r5, [r2, #-16]
  402930:	f842 5c0c 	str.w	r5, [r2, #-12]
  402934:	f842 5c08 	str.w	r5, [r2, #-8]
  402938:	f842 5c04 	str.w	r5, [r2, #-4]
  40293c:	f102 0210 	add.w	r2, r2, #16
  402940:	d8f2      	bhi.n	402928 <memset+0x38>
  402942:	f1a4 0210 	sub.w	r2, r4, #16
  402946:	f022 020f 	bic.w	r2, r2, #15
  40294a:	f004 040f 	and.w	r4, r4, #15
  40294e:	3210      	adds	r2, #16
  402950:	2c03      	cmp	r4, #3
  402952:	4413      	add	r3, r2
  402954:	d90d      	bls.n	402972 <memset+0x82>
  402956:	461e      	mov	r6, r3
  402958:	4622      	mov	r2, r4
  40295a:	3a04      	subs	r2, #4
  40295c:	2a03      	cmp	r2, #3
  40295e:	f846 5b04 	str.w	r5, [r6], #4
  402962:	d8fa      	bhi.n	40295a <memset+0x6a>
  402964:	1f22      	subs	r2, r4, #4
  402966:	f022 0203 	bic.w	r2, r2, #3
  40296a:	3204      	adds	r2, #4
  40296c:	4413      	add	r3, r2
  40296e:	f004 0403 	and.w	r4, r4, #3
  402972:	b12c      	cbz	r4, 402980 <memset+0x90>
  402974:	b2c9      	uxtb	r1, r1
  402976:	441c      	add	r4, r3
  402978:	f803 1b01 	strb.w	r1, [r3], #1
  40297c:	42a3      	cmp	r3, r4
  40297e:	d1fb      	bne.n	402978 <memset+0x88>
  402980:	bc70      	pop	{r4, r5, r6}
  402982:	4770      	bx	lr
  402984:	4614      	mov	r4, r2
  402986:	4603      	mov	r3, r0
  402988:	e7c2      	b.n	402910 <memset+0x20>
  40298a:	bf00      	nop

0040298c <setbuf>:
  40298c:	2900      	cmp	r1, #0
  40298e:	bf0c      	ite	eq
  402990:	2202      	moveq	r2, #2
  402992:	2200      	movne	r2, #0
  402994:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402998:	f000 b800 	b.w	40299c <setvbuf>

0040299c <setvbuf>:
  40299c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4029a0:	4c51      	ldr	r4, [pc, #324]	; (402ae8 <setvbuf+0x14c>)
  4029a2:	6825      	ldr	r5, [r4, #0]
  4029a4:	b083      	sub	sp, #12
  4029a6:	4604      	mov	r4, r0
  4029a8:	460f      	mov	r7, r1
  4029aa:	4690      	mov	r8, r2
  4029ac:	461e      	mov	r6, r3
  4029ae:	b115      	cbz	r5, 4029b6 <setvbuf+0x1a>
  4029b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d079      	beq.n	402aaa <setvbuf+0x10e>
  4029b6:	f1b8 0f02 	cmp.w	r8, #2
  4029ba:	d004      	beq.n	4029c6 <setvbuf+0x2a>
  4029bc:	f1b8 0f01 	cmp.w	r8, #1
  4029c0:	d87f      	bhi.n	402ac2 <setvbuf+0x126>
  4029c2:	2e00      	cmp	r6, #0
  4029c4:	db7d      	blt.n	402ac2 <setvbuf+0x126>
  4029c6:	4621      	mov	r1, r4
  4029c8:	4628      	mov	r0, r5
  4029ca:	f001 f917 	bl	403bfc <_fflush_r>
  4029ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4029d0:	b141      	cbz	r1, 4029e4 <setvbuf+0x48>
  4029d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4029d6:	4299      	cmp	r1, r3
  4029d8:	d002      	beq.n	4029e0 <setvbuf+0x44>
  4029da:	4628      	mov	r0, r5
  4029dc:	f001 fa6c 	bl	403eb8 <_free_r>
  4029e0:	2300      	movs	r3, #0
  4029e2:	6323      	str	r3, [r4, #48]	; 0x30
  4029e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029e8:	2200      	movs	r2, #0
  4029ea:	61a2      	str	r2, [r4, #24]
  4029ec:	6062      	str	r2, [r4, #4]
  4029ee:	061a      	lsls	r2, r3, #24
  4029f0:	d454      	bmi.n	402a9c <setvbuf+0x100>
  4029f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4029f6:	f023 0303 	bic.w	r3, r3, #3
  4029fa:	f1b8 0f02 	cmp.w	r8, #2
  4029fe:	81a3      	strh	r3, [r4, #12]
  402a00:	d039      	beq.n	402a76 <setvbuf+0xda>
  402a02:	ab01      	add	r3, sp, #4
  402a04:	466a      	mov	r2, sp
  402a06:	4621      	mov	r1, r4
  402a08:	4628      	mov	r0, r5
  402a0a:	f001 fcf3 	bl	4043f4 <__swhatbuf_r>
  402a0e:	89a3      	ldrh	r3, [r4, #12]
  402a10:	4318      	orrs	r0, r3
  402a12:	81a0      	strh	r0, [r4, #12]
  402a14:	b326      	cbz	r6, 402a60 <setvbuf+0xc4>
  402a16:	b327      	cbz	r7, 402a62 <setvbuf+0xc6>
  402a18:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	d04d      	beq.n	402aba <setvbuf+0x11e>
  402a1e:	9b00      	ldr	r3, [sp, #0]
  402a20:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  402a24:	6027      	str	r7, [r4, #0]
  402a26:	429e      	cmp	r6, r3
  402a28:	bf1c      	itt	ne
  402a2a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  402a2e:	81a0      	strhne	r0, [r4, #12]
  402a30:	f1b8 0f01 	cmp.w	r8, #1
  402a34:	bf08      	it	eq
  402a36:	f040 0001 	orreq.w	r0, r0, #1
  402a3a:	b283      	uxth	r3, r0
  402a3c:	bf08      	it	eq
  402a3e:	81a0      	strheq	r0, [r4, #12]
  402a40:	f003 0008 	and.w	r0, r3, #8
  402a44:	b280      	uxth	r0, r0
  402a46:	6127      	str	r7, [r4, #16]
  402a48:	6166      	str	r6, [r4, #20]
  402a4a:	b318      	cbz	r0, 402a94 <setvbuf+0xf8>
  402a4c:	f013 0001 	ands.w	r0, r3, #1
  402a50:	d02f      	beq.n	402ab2 <setvbuf+0x116>
  402a52:	2000      	movs	r0, #0
  402a54:	4276      	negs	r6, r6
  402a56:	61a6      	str	r6, [r4, #24]
  402a58:	60a0      	str	r0, [r4, #8]
  402a5a:	b003      	add	sp, #12
  402a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a60:	9e00      	ldr	r6, [sp, #0]
  402a62:	4630      	mov	r0, r6
  402a64:	f001 fd3a 	bl	4044dc <malloc>
  402a68:	4607      	mov	r7, r0
  402a6a:	b368      	cbz	r0, 402ac8 <setvbuf+0x12c>
  402a6c:	89a3      	ldrh	r3, [r4, #12]
  402a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a72:	81a3      	strh	r3, [r4, #12]
  402a74:	e7d0      	b.n	402a18 <setvbuf+0x7c>
  402a76:	2000      	movs	r0, #0
  402a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402a7c:	f043 0302 	orr.w	r3, r3, #2
  402a80:	2500      	movs	r5, #0
  402a82:	2101      	movs	r1, #1
  402a84:	81a3      	strh	r3, [r4, #12]
  402a86:	60a5      	str	r5, [r4, #8]
  402a88:	6022      	str	r2, [r4, #0]
  402a8a:	6122      	str	r2, [r4, #16]
  402a8c:	6161      	str	r1, [r4, #20]
  402a8e:	b003      	add	sp, #12
  402a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a94:	60a0      	str	r0, [r4, #8]
  402a96:	b003      	add	sp, #12
  402a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a9c:	6921      	ldr	r1, [r4, #16]
  402a9e:	4628      	mov	r0, r5
  402aa0:	f001 fa0a 	bl	403eb8 <_free_r>
  402aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aa8:	e7a3      	b.n	4029f2 <setvbuf+0x56>
  402aaa:	4628      	mov	r0, r5
  402aac:	f001 f93a 	bl	403d24 <__sinit>
  402ab0:	e781      	b.n	4029b6 <setvbuf+0x1a>
  402ab2:	60a6      	str	r6, [r4, #8]
  402ab4:	b003      	add	sp, #12
  402ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402aba:	4628      	mov	r0, r5
  402abc:	f001 f932 	bl	403d24 <__sinit>
  402ac0:	e7ad      	b.n	402a1e <setvbuf+0x82>
  402ac2:	f04f 30ff 	mov.w	r0, #4294967295
  402ac6:	e7e2      	b.n	402a8e <setvbuf+0xf2>
  402ac8:	f8dd 9000 	ldr.w	r9, [sp]
  402acc:	45b1      	cmp	r9, r6
  402ace:	d006      	beq.n	402ade <setvbuf+0x142>
  402ad0:	4648      	mov	r0, r9
  402ad2:	f001 fd03 	bl	4044dc <malloc>
  402ad6:	4607      	mov	r7, r0
  402ad8:	b108      	cbz	r0, 402ade <setvbuf+0x142>
  402ada:	464e      	mov	r6, r9
  402adc:	e7c6      	b.n	402a6c <setvbuf+0xd0>
  402ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ae2:	f04f 30ff 	mov.w	r0, #4294967295
  402ae6:	e7c7      	b.n	402a78 <setvbuf+0xdc>
  402ae8:	20400430 	.word	0x20400430

00402aec <__sprint_r.part.0>:
  402aec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402af2:	049c      	lsls	r4, r3, #18
  402af4:	4692      	mov	sl, r2
  402af6:	d52c      	bpl.n	402b52 <__sprint_r.part.0+0x66>
  402af8:	6893      	ldr	r3, [r2, #8]
  402afa:	6812      	ldr	r2, [r2, #0]
  402afc:	b33b      	cbz	r3, 402b4e <__sprint_r.part.0+0x62>
  402afe:	460f      	mov	r7, r1
  402b00:	4680      	mov	r8, r0
  402b02:	f102 0908 	add.w	r9, r2, #8
  402b06:	e919 0060 	ldmdb	r9, {r5, r6}
  402b0a:	08b6      	lsrs	r6, r6, #2
  402b0c:	d017      	beq.n	402b3e <__sprint_r.part.0+0x52>
  402b0e:	3d04      	subs	r5, #4
  402b10:	2400      	movs	r4, #0
  402b12:	e001      	b.n	402b18 <__sprint_r.part.0+0x2c>
  402b14:	42a6      	cmp	r6, r4
  402b16:	d010      	beq.n	402b3a <__sprint_r.part.0+0x4e>
  402b18:	463a      	mov	r2, r7
  402b1a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402b1e:	4640      	mov	r0, r8
  402b20:	f001 f96a 	bl	403df8 <_fputwc_r>
  402b24:	1c43      	adds	r3, r0, #1
  402b26:	f104 0401 	add.w	r4, r4, #1
  402b2a:	d1f3      	bne.n	402b14 <__sprint_r.part.0+0x28>
  402b2c:	2300      	movs	r3, #0
  402b2e:	f8ca 3008 	str.w	r3, [sl, #8]
  402b32:	f8ca 3004 	str.w	r3, [sl, #4]
  402b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402b3e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  402b42:	f8ca 3008 	str.w	r3, [sl, #8]
  402b46:	f109 0908 	add.w	r9, r9, #8
  402b4a:	2b00      	cmp	r3, #0
  402b4c:	d1db      	bne.n	402b06 <__sprint_r.part.0+0x1a>
  402b4e:	2000      	movs	r0, #0
  402b50:	e7ec      	b.n	402b2c <__sprint_r.part.0+0x40>
  402b52:	f001 fa99 	bl	404088 <__sfvwrite_r>
  402b56:	2300      	movs	r3, #0
  402b58:	f8ca 3008 	str.w	r3, [sl, #8]
  402b5c:	f8ca 3004 	str.w	r3, [sl, #4]
  402b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402b64 <_vfiprintf_r>:
  402b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b68:	b0ab      	sub	sp, #172	; 0xac
  402b6a:	461c      	mov	r4, r3
  402b6c:	9100      	str	r1, [sp, #0]
  402b6e:	4690      	mov	r8, r2
  402b70:	9304      	str	r3, [sp, #16]
  402b72:	9005      	str	r0, [sp, #20]
  402b74:	b118      	cbz	r0, 402b7e <_vfiprintf_r+0x1a>
  402b76:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b78:	2b00      	cmp	r3, #0
  402b7a:	f000 80de 	beq.w	402d3a <_vfiprintf_r+0x1d6>
  402b7e:	9800      	ldr	r0, [sp, #0]
  402b80:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  402b84:	b28a      	uxth	r2, r1
  402b86:	0495      	lsls	r5, r2, #18
  402b88:	d407      	bmi.n	402b9a <_vfiprintf_r+0x36>
  402b8a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  402b8c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  402b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402b94:	8182      	strh	r2, [r0, #12]
  402b96:	6643      	str	r3, [r0, #100]	; 0x64
  402b98:	b292      	uxth	r2, r2
  402b9a:	0711      	lsls	r1, r2, #28
  402b9c:	f140 80b1 	bpl.w	402d02 <_vfiprintf_r+0x19e>
  402ba0:	9b00      	ldr	r3, [sp, #0]
  402ba2:	691b      	ldr	r3, [r3, #16]
  402ba4:	2b00      	cmp	r3, #0
  402ba6:	f000 80ac 	beq.w	402d02 <_vfiprintf_r+0x19e>
  402baa:	f002 021a 	and.w	r2, r2, #26
  402bae:	2a0a      	cmp	r2, #10
  402bb0:	f000 80b5 	beq.w	402d1e <_vfiprintf_r+0x1ba>
  402bb4:	2300      	movs	r3, #0
  402bb6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  402bba:	9302      	str	r3, [sp, #8]
  402bbc:	930f      	str	r3, [sp, #60]	; 0x3c
  402bbe:	930e      	str	r3, [sp, #56]	; 0x38
  402bc0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  402bc4:	46da      	mov	sl, fp
  402bc6:	f898 3000 	ldrb.w	r3, [r8]
  402bca:	4644      	mov	r4, r8
  402bcc:	b1fb      	cbz	r3, 402c0e <_vfiprintf_r+0xaa>
  402bce:	2b25      	cmp	r3, #37	; 0x25
  402bd0:	d102      	bne.n	402bd8 <_vfiprintf_r+0x74>
  402bd2:	e01c      	b.n	402c0e <_vfiprintf_r+0xaa>
  402bd4:	2b25      	cmp	r3, #37	; 0x25
  402bd6:	d003      	beq.n	402be0 <_vfiprintf_r+0x7c>
  402bd8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402bdc:	2b00      	cmp	r3, #0
  402bde:	d1f9      	bne.n	402bd4 <_vfiprintf_r+0x70>
  402be0:	ebc8 0504 	rsb	r5, r8, r4
  402be4:	b19d      	cbz	r5, 402c0e <_vfiprintf_r+0xaa>
  402be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402bea:	f8ca 8000 	str.w	r8, [sl]
  402bee:	3301      	adds	r3, #1
  402bf0:	442a      	add	r2, r5
  402bf2:	2b07      	cmp	r3, #7
  402bf4:	f8ca 5004 	str.w	r5, [sl, #4]
  402bf8:	920f      	str	r2, [sp, #60]	; 0x3c
  402bfa:	930e      	str	r3, [sp, #56]	; 0x38
  402bfc:	dd7b      	ble.n	402cf6 <_vfiprintf_r+0x192>
  402bfe:	2a00      	cmp	r2, #0
  402c00:	f040 8528 	bne.w	403654 <_vfiprintf_r+0xaf0>
  402c04:	9b02      	ldr	r3, [sp, #8]
  402c06:	920e      	str	r2, [sp, #56]	; 0x38
  402c08:	442b      	add	r3, r5
  402c0a:	46da      	mov	sl, fp
  402c0c:	9302      	str	r3, [sp, #8]
  402c0e:	7823      	ldrb	r3, [r4, #0]
  402c10:	2b00      	cmp	r3, #0
  402c12:	f000 843e 	beq.w	403492 <_vfiprintf_r+0x92e>
  402c16:	2100      	movs	r1, #0
  402c18:	f04f 0300 	mov.w	r3, #0
  402c1c:	f04f 32ff 	mov.w	r2, #4294967295
  402c20:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402c24:	f104 0801 	add.w	r8, r4, #1
  402c28:	7863      	ldrb	r3, [r4, #1]
  402c2a:	9201      	str	r2, [sp, #4]
  402c2c:	4608      	mov	r0, r1
  402c2e:	460e      	mov	r6, r1
  402c30:	460c      	mov	r4, r1
  402c32:	f108 0801 	add.w	r8, r8, #1
  402c36:	f1a3 0220 	sub.w	r2, r3, #32
  402c3a:	2a58      	cmp	r2, #88	; 0x58
  402c3c:	f200 8393 	bhi.w	403366 <_vfiprintf_r+0x802>
  402c40:	e8df f012 	tbh	[pc, r2, lsl #1]
  402c44:	03910346 	.word	0x03910346
  402c48:	034e0391 	.word	0x034e0391
  402c4c:	03910391 	.word	0x03910391
  402c50:	03910391 	.word	0x03910391
  402c54:	03910391 	.word	0x03910391
  402c58:	02670289 	.word	0x02670289
  402c5c:	00800391 	.word	0x00800391
  402c60:	0391026c 	.word	0x0391026c
  402c64:	025901c6 	.word	0x025901c6
  402c68:	02590259 	.word	0x02590259
  402c6c:	02590259 	.word	0x02590259
  402c70:	02590259 	.word	0x02590259
  402c74:	02590259 	.word	0x02590259
  402c78:	03910391 	.word	0x03910391
  402c7c:	03910391 	.word	0x03910391
  402c80:	03910391 	.word	0x03910391
  402c84:	03910391 	.word	0x03910391
  402c88:	03910391 	.word	0x03910391
  402c8c:	039101cb 	.word	0x039101cb
  402c90:	03910391 	.word	0x03910391
  402c94:	03910391 	.word	0x03910391
  402c98:	03910391 	.word	0x03910391
  402c9c:	03910391 	.word	0x03910391
  402ca0:	02140391 	.word	0x02140391
  402ca4:	03910391 	.word	0x03910391
  402ca8:	03910391 	.word	0x03910391
  402cac:	02ee0391 	.word	0x02ee0391
  402cb0:	03910391 	.word	0x03910391
  402cb4:	03910311 	.word	0x03910311
  402cb8:	03910391 	.word	0x03910391
  402cbc:	03910391 	.word	0x03910391
  402cc0:	03910391 	.word	0x03910391
  402cc4:	03910391 	.word	0x03910391
  402cc8:	03340391 	.word	0x03340391
  402ccc:	0391038a 	.word	0x0391038a
  402cd0:	03910391 	.word	0x03910391
  402cd4:	038a0367 	.word	0x038a0367
  402cd8:	03910391 	.word	0x03910391
  402cdc:	0391036c 	.word	0x0391036c
  402ce0:	02950379 	.word	0x02950379
  402ce4:	02e90085 	.word	0x02e90085
  402ce8:	029b0391 	.word	0x029b0391
  402cec:	02ba0391 	.word	0x02ba0391
  402cf0:	03910391 	.word	0x03910391
  402cf4:	0353      	.short	0x0353
  402cf6:	f10a 0a08 	add.w	sl, sl, #8
  402cfa:	9b02      	ldr	r3, [sp, #8]
  402cfc:	442b      	add	r3, r5
  402cfe:	9302      	str	r3, [sp, #8]
  402d00:	e785      	b.n	402c0e <_vfiprintf_r+0xaa>
  402d02:	9900      	ldr	r1, [sp, #0]
  402d04:	9805      	ldr	r0, [sp, #20]
  402d06:	f000 fe61 	bl	4039cc <__swsetup_r>
  402d0a:	2800      	cmp	r0, #0
  402d0c:	f040 8558 	bne.w	4037c0 <_vfiprintf_r+0xc5c>
  402d10:	9b00      	ldr	r3, [sp, #0]
  402d12:	899a      	ldrh	r2, [r3, #12]
  402d14:	f002 021a 	and.w	r2, r2, #26
  402d18:	2a0a      	cmp	r2, #10
  402d1a:	f47f af4b 	bne.w	402bb4 <_vfiprintf_r+0x50>
  402d1e:	9900      	ldr	r1, [sp, #0]
  402d20:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  402d24:	2b00      	cmp	r3, #0
  402d26:	f6ff af45 	blt.w	402bb4 <_vfiprintf_r+0x50>
  402d2a:	4623      	mov	r3, r4
  402d2c:	4642      	mov	r2, r8
  402d2e:	9805      	ldr	r0, [sp, #20]
  402d30:	f000 fe16 	bl	403960 <__sbprintf>
  402d34:	b02b      	add	sp, #172	; 0xac
  402d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d3a:	f000 fff3 	bl	403d24 <__sinit>
  402d3e:	e71e      	b.n	402b7e <_vfiprintf_r+0x1a>
  402d40:	4264      	negs	r4, r4
  402d42:	9304      	str	r3, [sp, #16]
  402d44:	f046 0604 	orr.w	r6, r6, #4
  402d48:	f898 3000 	ldrb.w	r3, [r8]
  402d4c:	e771      	b.n	402c32 <_vfiprintf_r+0xce>
  402d4e:	2130      	movs	r1, #48	; 0x30
  402d50:	9804      	ldr	r0, [sp, #16]
  402d52:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  402d56:	9901      	ldr	r1, [sp, #4]
  402d58:	9406      	str	r4, [sp, #24]
  402d5a:	f04f 0300 	mov.w	r3, #0
  402d5e:	2278      	movs	r2, #120	; 0x78
  402d60:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  402d64:	2900      	cmp	r1, #0
  402d66:	4603      	mov	r3, r0
  402d68:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  402d6c:	6804      	ldr	r4, [r0, #0]
  402d6e:	f103 0304 	add.w	r3, r3, #4
  402d72:	f04f 0500 	mov.w	r5, #0
  402d76:	f046 0202 	orr.w	r2, r6, #2
  402d7a:	f2c0 8525 	blt.w	4037c8 <_vfiprintf_r+0xc64>
  402d7e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402d82:	ea54 0205 	orrs.w	r2, r4, r5
  402d86:	f046 0602 	orr.w	r6, r6, #2
  402d8a:	9304      	str	r3, [sp, #16]
  402d8c:	f040 84bf 	bne.w	40370e <_vfiprintf_r+0xbaa>
  402d90:	48b3      	ldr	r0, [pc, #716]	; (403060 <_vfiprintf_r+0x4fc>)
  402d92:	9b01      	ldr	r3, [sp, #4]
  402d94:	2b00      	cmp	r3, #0
  402d96:	f040 841c 	bne.w	4035d2 <_vfiprintf_r+0xa6e>
  402d9a:	4699      	mov	r9, r3
  402d9c:	2300      	movs	r3, #0
  402d9e:	9301      	str	r3, [sp, #4]
  402da0:	9303      	str	r3, [sp, #12]
  402da2:	465f      	mov	r7, fp
  402da4:	9b01      	ldr	r3, [sp, #4]
  402da6:	9a03      	ldr	r2, [sp, #12]
  402da8:	4293      	cmp	r3, r2
  402daa:	bfb8      	it	lt
  402dac:	4613      	movlt	r3, r2
  402dae:	461d      	mov	r5, r3
  402db0:	f1b9 0f00 	cmp.w	r9, #0
  402db4:	d000      	beq.n	402db8 <_vfiprintf_r+0x254>
  402db6:	3501      	adds	r5, #1
  402db8:	f016 0302 	ands.w	r3, r6, #2
  402dbc:	9307      	str	r3, [sp, #28]
  402dbe:	bf18      	it	ne
  402dc0:	3502      	addne	r5, #2
  402dc2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  402dc6:	9308      	str	r3, [sp, #32]
  402dc8:	f040 82f1 	bne.w	4033ae <_vfiprintf_r+0x84a>
  402dcc:	9b06      	ldr	r3, [sp, #24]
  402dce:	1b5c      	subs	r4, r3, r5
  402dd0:	2c00      	cmp	r4, #0
  402dd2:	f340 82ec 	ble.w	4033ae <_vfiprintf_r+0x84a>
  402dd6:	2c10      	cmp	r4, #16
  402dd8:	f340 8556 	ble.w	403888 <_vfiprintf_r+0xd24>
  402ddc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 403064 <_vfiprintf_r+0x500>
  402de0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  402de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402de6:	46d4      	mov	ip, sl
  402de8:	2310      	movs	r3, #16
  402dea:	46c2      	mov	sl, r8
  402dec:	4670      	mov	r0, lr
  402dee:	46a8      	mov	r8, r5
  402df0:	464d      	mov	r5, r9
  402df2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402df6:	e007      	b.n	402e08 <_vfiprintf_r+0x2a4>
  402df8:	f100 0e02 	add.w	lr, r0, #2
  402dfc:	f10c 0c08 	add.w	ip, ip, #8
  402e00:	4608      	mov	r0, r1
  402e02:	3c10      	subs	r4, #16
  402e04:	2c10      	cmp	r4, #16
  402e06:	dd13      	ble.n	402e30 <_vfiprintf_r+0x2cc>
  402e08:	1c41      	adds	r1, r0, #1
  402e0a:	3210      	adds	r2, #16
  402e0c:	2907      	cmp	r1, #7
  402e0e:	920f      	str	r2, [sp, #60]	; 0x3c
  402e10:	f8cc 5000 	str.w	r5, [ip]
  402e14:	f8cc 3004 	str.w	r3, [ip, #4]
  402e18:	910e      	str	r1, [sp, #56]	; 0x38
  402e1a:	dded      	ble.n	402df8 <_vfiprintf_r+0x294>
  402e1c:	2a00      	cmp	r2, #0
  402e1e:	f040 82b7 	bne.w	403390 <_vfiprintf_r+0x82c>
  402e22:	3c10      	subs	r4, #16
  402e24:	2c10      	cmp	r4, #16
  402e26:	4610      	mov	r0, r2
  402e28:	f04f 0e01 	mov.w	lr, #1
  402e2c:	46dc      	mov	ip, fp
  402e2e:	dceb      	bgt.n	402e08 <_vfiprintf_r+0x2a4>
  402e30:	46a9      	mov	r9, r5
  402e32:	4670      	mov	r0, lr
  402e34:	4645      	mov	r5, r8
  402e36:	46d0      	mov	r8, sl
  402e38:	46e2      	mov	sl, ip
  402e3a:	4422      	add	r2, r4
  402e3c:	2807      	cmp	r0, #7
  402e3e:	920f      	str	r2, [sp, #60]	; 0x3c
  402e40:	f8ca 9000 	str.w	r9, [sl]
  402e44:	f8ca 4004 	str.w	r4, [sl, #4]
  402e48:	900e      	str	r0, [sp, #56]	; 0x38
  402e4a:	f300 8375 	bgt.w	403538 <_vfiprintf_r+0x9d4>
  402e4e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  402e52:	f10a 0a08 	add.w	sl, sl, #8
  402e56:	f100 0e01 	add.w	lr, r0, #1
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	f040 82b0 	bne.w	4033c0 <_vfiprintf_r+0x85c>
  402e60:	9b07      	ldr	r3, [sp, #28]
  402e62:	2b00      	cmp	r3, #0
  402e64:	f000 82c3 	beq.w	4033ee <_vfiprintf_r+0x88a>
  402e68:	3202      	adds	r2, #2
  402e6a:	a90c      	add	r1, sp, #48	; 0x30
  402e6c:	2302      	movs	r3, #2
  402e6e:	f1be 0f07 	cmp.w	lr, #7
  402e72:	920f      	str	r2, [sp, #60]	; 0x3c
  402e74:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402e78:	e88a 000a 	stmia.w	sl, {r1, r3}
  402e7c:	f340 8378 	ble.w	403570 <_vfiprintf_r+0xa0c>
  402e80:	2a00      	cmp	r2, #0
  402e82:	f040 840a 	bne.w	40369a <_vfiprintf_r+0xb36>
  402e86:	9b08      	ldr	r3, [sp, #32]
  402e88:	2b80      	cmp	r3, #128	; 0x80
  402e8a:	f04f 0e01 	mov.w	lr, #1
  402e8e:	4610      	mov	r0, r2
  402e90:	46da      	mov	sl, fp
  402e92:	f040 82b0 	bne.w	4033f6 <_vfiprintf_r+0x892>
  402e96:	9b06      	ldr	r3, [sp, #24]
  402e98:	1b5c      	subs	r4, r3, r5
  402e9a:	2c00      	cmp	r4, #0
  402e9c:	f340 82ab 	ble.w	4033f6 <_vfiprintf_r+0x892>
  402ea0:	2c10      	cmp	r4, #16
  402ea2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 403068 <_vfiprintf_r+0x504>
  402ea6:	f340 850b 	ble.w	4038c0 <_vfiprintf_r+0xd5c>
  402eaa:	46d6      	mov	lr, sl
  402eac:	2310      	movs	r3, #16
  402eae:	46c2      	mov	sl, r8
  402eb0:	46a8      	mov	r8, r5
  402eb2:	464d      	mov	r5, r9
  402eb4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402eb8:	e007      	b.n	402eca <_vfiprintf_r+0x366>
  402eba:	f100 0c02 	add.w	ip, r0, #2
  402ebe:	f10e 0e08 	add.w	lr, lr, #8
  402ec2:	4608      	mov	r0, r1
  402ec4:	3c10      	subs	r4, #16
  402ec6:	2c10      	cmp	r4, #16
  402ec8:	dd13      	ble.n	402ef2 <_vfiprintf_r+0x38e>
  402eca:	1c41      	adds	r1, r0, #1
  402ecc:	3210      	adds	r2, #16
  402ece:	2907      	cmp	r1, #7
  402ed0:	920f      	str	r2, [sp, #60]	; 0x3c
  402ed2:	f8ce 5000 	str.w	r5, [lr]
  402ed6:	f8ce 3004 	str.w	r3, [lr, #4]
  402eda:	910e      	str	r1, [sp, #56]	; 0x38
  402edc:	dded      	ble.n	402eba <_vfiprintf_r+0x356>
  402ede:	2a00      	cmp	r2, #0
  402ee0:	f040 8315 	bne.w	40350e <_vfiprintf_r+0x9aa>
  402ee4:	3c10      	subs	r4, #16
  402ee6:	2c10      	cmp	r4, #16
  402ee8:	f04f 0c01 	mov.w	ip, #1
  402eec:	4610      	mov	r0, r2
  402eee:	46de      	mov	lr, fp
  402ef0:	dceb      	bgt.n	402eca <_vfiprintf_r+0x366>
  402ef2:	46a9      	mov	r9, r5
  402ef4:	4645      	mov	r5, r8
  402ef6:	46d0      	mov	r8, sl
  402ef8:	46f2      	mov	sl, lr
  402efa:	4422      	add	r2, r4
  402efc:	f1bc 0f07 	cmp.w	ip, #7
  402f00:	920f      	str	r2, [sp, #60]	; 0x3c
  402f02:	f8ca 9000 	str.w	r9, [sl]
  402f06:	f8ca 4004 	str.w	r4, [sl, #4]
  402f0a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  402f0e:	f300 83d2 	bgt.w	4036b6 <_vfiprintf_r+0xb52>
  402f12:	9b01      	ldr	r3, [sp, #4]
  402f14:	9903      	ldr	r1, [sp, #12]
  402f16:	1a5c      	subs	r4, r3, r1
  402f18:	2c00      	cmp	r4, #0
  402f1a:	f10a 0a08 	add.w	sl, sl, #8
  402f1e:	f10c 0e01 	add.w	lr, ip, #1
  402f22:	4660      	mov	r0, ip
  402f24:	f300 826d 	bgt.w	403402 <_vfiprintf_r+0x89e>
  402f28:	9903      	ldr	r1, [sp, #12]
  402f2a:	f8ca 7000 	str.w	r7, [sl]
  402f2e:	440a      	add	r2, r1
  402f30:	f1be 0f07 	cmp.w	lr, #7
  402f34:	920f      	str	r2, [sp, #60]	; 0x3c
  402f36:	f8ca 1004 	str.w	r1, [sl, #4]
  402f3a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402f3e:	f340 82ce 	ble.w	4034de <_vfiprintf_r+0x97a>
  402f42:	2a00      	cmp	r2, #0
  402f44:	f040 833a 	bne.w	4035bc <_vfiprintf_r+0xa58>
  402f48:	0770      	lsls	r0, r6, #29
  402f4a:	920e      	str	r2, [sp, #56]	; 0x38
  402f4c:	d538      	bpl.n	402fc0 <_vfiprintf_r+0x45c>
  402f4e:	9b06      	ldr	r3, [sp, #24]
  402f50:	1b5c      	subs	r4, r3, r5
  402f52:	2c00      	cmp	r4, #0
  402f54:	dd34      	ble.n	402fc0 <_vfiprintf_r+0x45c>
  402f56:	46da      	mov	sl, fp
  402f58:	2c10      	cmp	r4, #16
  402f5a:	f340 84ab 	ble.w	4038b4 <_vfiprintf_r+0xd50>
  402f5e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 403064 <_vfiprintf_r+0x500>
  402f62:	990e      	ldr	r1, [sp, #56]	; 0x38
  402f64:	464f      	mov	r7, r9
  402f66:	2610      	movs	r6, #16
  402f68:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402f6c:	e006      	b.n	402f7c <_vfiprintf_r+0x418>
  402f6e:	1c88      	adds	r0, r1, #2
  402f70:	f10a 0a08 	add.w	sl, sl, #8
  402f74:	4619      	mov	r1, r3
  402f76:	3c10      	subs	r4, #16
  402f78:	2c10      	cmp	r4, #16
  402f7a:	dd13      	ble.n	402fa4 <_vfiprintf_r+0x440>
  402f7c:	1c4b      	adds	r3, r1, #1
  402f7e:	3210      	adds	r2, #16
  402f80:	2b07      	cmp	r3, #7
  402f82:	920f      	str	r2, [sp, #60]	; 0x3c
  402f84:	f8ca 7000 	str.w	r7, [sl]
  402f88:	f8ca 6004 	str.w	r6, [sl, #4]
  402f8c:	930e      	str	r3, [sp, #56]	; 0x38
  402f8e:	ddee      	ble.n	402f6e <_vfiprintf_r+0x40a>
  402f90:	2a00      	cmp	r2, #0
  402f92:	f040 828e 	bne.w	4034b2 <_vfiprintf_r+0x94e>
  402f96:	3c10      	subs	r4, #16
  402f98:	2c10      	cmp	r4, #16
  402f9a:	f04f 0001 	mov.w	r0, #1
  402f9e:	4611      	mov	r1, r2
  402fa0:	46da      	mov	sl, fp
  402fa2:	dceb      	bgt.n	402f7c <_vfiprintf_r+0x418>
  402fa4:	46b9      	mov	r9, r7
  402fa6:	4422      	add	r2, r4
  402fa8:	2807      	cmp	r0, #7
  402faa:	920f      	str	r2, [sp, #60]	; 0x3c
  402fac:	f8ca 9000 	str.w	r9, [sl]
  402fb0:	f8ca 4004 	str.w	r4, [sl, #4]
  402fb4:	900e      	str	r0, [sp, #56]	; 0x38
  402fb6:	f340 829b 	ble.w	4034f0 <_vfiprintf_r+0x98c>
  402fba:	2a00      	cmp	r2, #0
  402fbc:	f040 8425 	bne.w	40380a <_vfiprintf_r+0xca6>
  402fc0:	9b02      	ldr	r3, [sp, #8]
  402fc2:	9a06      	ldr	r2, [sp, #24]
  402fc4:	42aa      	cmp	r2, r5
  402fc6:	bfac      	ite	ge
  402fc8:	189b      	addge	r3, r3, r2
  402fca:	195b      	addlt	r3, r3, r5
  402fcc:	9302      	str	r3, [sp, #8]
  402fce:	e299      	b.n	403504 <_vfiprintf_r+0x9a0>
  402fd0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402fd4:	f898 3000 	ldrb.w	r3, [r8]
  402fd8:	e62b      	b.n	402c32 <_vfiprintf_r+0xce>
  402fda:	9406      	str	r4, [sp, #24]
  402fdc:	2900      	cmp	r1, #0
  402fde:	f040 84af 	bne.w	403940 <_vfiprintf_r+0xddc>
  402fe2:	f046 0610 	orr.w	r6, r6, #16
  402fe6:	06b3      	lsls	r3, r6, #26
  402fe8:	f140 8312 	bpl.w	403610 <_vfiprintf_r+0xaac>
  402fec:	9904      	ldr	r1, [sp, #16]
  402fee:	3107      	adds	r1, #7
  402ff0:	f021 0107 	bic.w	r1, r1, #7
  402ff4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402ff8:	3108      	adds	r1, #8
  402ffa:	9104      	str	r1, [sp, #16]
  402ffc:	4614      	mov	r4, r2
  402ffe:	461d      	mov	r5, r3
  403000:	2a00      	cmp	r2, #0
  403002:	f173 0300 	sbcs.w	r3, r3, #0
  403006:	f2c0 8386 	blt.w	403716 <_vfiprintf_r+0xbb2>
  40300a:	9b01      	ldr	r3, [sp, #4]
  40300c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403010:	2b00      	cmp	r3, #0
  403012:	f2c0 831a 	blt.w	40364a <_vfiprintf_r+0xae6>
  403016:	ea54 0305 	orrs.w	r3, r4, r5
  40301a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40301e:	f000 80ed 	beq.w	4031fc <_vfiprintf_r+0x698>
  403022:	2d00      	cmp	r5, #0
  403024:	bf08      	it	eq
  403026:	2c0a      	cmpeq	r4, #10
  403028:	f0c0 80ed 	bcc.w	403206 <_vfiprintf_r+0x6a2>
  40302c:	465f      	mov	r7, fp
  40302e:	4620      	mov	r0, r4
  403030:	4629      	mov	r1, r5
  403032:	220a      	movs	r2, #10
  403034:	2300      	movs	r3, #0
  403036:	f002 facd 	bl	4055d4 <__aeabi_uldivmod>
  40303a:	3230      	adds	r2, #48	; 0x30
  40303c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  403040:	4620      	mov	r0, r4
  403042:	4629      	mov	r1, r5
  403044:	2300      	movs	r3, #0
  403046:	220a      	movs	r2, #10
  403048:	f002 fac4 	bl	4055d4 <__aeabi_uldivmod>
  40304c:	4604      	mov	r4, r0
  40304e:	460d      	mov	r5, r1
  403050:	ea54 0305 	orrs.w	r3, r4, r5
  403054:	d1eb      	bne.n	40302e <_vfiprintf_r+0x4ca>
  403056:	ebc7 030b 	rsb	r3, r7, fp
  40305a:	9303      	str	r3, [sp, #12]
  40305c:	e6a2      	b.n	402da4 <_vfiprintf_r+0x240>
  40305e:	bf00      	nop
  403060:	00405970 	.word	0x00405970
  403064:	0040598c 	.word	0x0040598c
  403068:	0040594c 	.word	0x0040594c
  40306c:	9406      	str	r4, [sp, #24]
  40306e:	2900      	cmp	r1, #0
  403070:	f040 8462 	bne.w	403938 <_vfiprintf_r+0xdd4>
  403074:	f046 0610 	orr.w	r6, r6, #16
  403078:	f016 0320 	ands.w	r3, r6, #32
  40307c:	f000 82ae 	beq.w	4035dc <_vfiprintf_r+0xa78>
  403080:	9b04      	ldr	r3, [sp, #16]
  403082:	3307      	adds	r3, #7
  403084:	f023 0307 	bic.w	r3, r3, #7
  403088:	f04f 0200 	mov.w	r2, #0
  40308c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403090:	e9d3 4500 	ldrd	r4, r5, [r3]
  403094:	f103 0208 	add.w	r2, r3, #8
  403098:	9b01      	ldr	r3, [sp, #4]
  40309a:	9204      	str	r2, [sp, #16]
  40309c:	2b00      	cmp	r3, #0
  40309e:	f2c0 8174 	blt.w	40338a <_vfiprintf_r+0x826>
  4030a2:	ea54 0305 	orrs.w	r3, r4, r5
  4030a6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4030aa:	f040 816e 	bne.w	40338a <_vfiprintf_r+0x826>
  4030ae:	9b01      	ldr	r3, [sp, #4]
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	f000 8430 	beq.w	403916 <_vfiprintf_r+0xdb2>
  4030b6:	f04f 0900 	mov.w	r9, #0
  4030ba:	2400      	movs	r4, #0
  4030bc:	2500      	movs	r5, #0
  4030be:	465f      	mov	r7, fp
  4030c0:	08e2      	lsrs	r2, r4, #3
  4030c2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4030c6:	08e9      	lsrs	r1, r5, #3
  4030c8:	f004 0307 	and.w	r3, r4, #7
  4030cc:	460d      	mov	r5, r1
  4030ce:	4614      	mov	r4, r2
  4030d0:	3330      	adds	r3, #48	; 0x30
  4030d2:	ea54 0205 	orrs.w	r2, r4, r5
  4030d6:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4030da:	d1f1      	bne.n	4030c0 <_vfiprintf_r+0x55c>
  4030dc:	07f4      	lsls	r4, r6, #31
  4030de:	d5ba      	bpl.n	403056 <_vfiprintf_r+0x4f2>
  4030e0:	2b30      	cmp	r3, #48	; 0x30
  4030e2:	d0b8      	beq.n	403056 <_vfiprintf_r+0x4f2>
  4030e4:	2230      	movs	r2, #48	; 0x30
  4030e6:	1e7b      	subs	r3, r7, #1
  4030e8:	f807 2c01 	strb.w	r2, [r7, #-1]
  4030ec:	ebc3 020b 	rsb	r2, r3, fp
  4030f0:	9203      	str	r2, [sp, #12]
  4030f2:	461f      	mov	r7, r3
  4030f4:	e656      	b.n	402da4 <_vfiprintf_r+0x240>
  4030f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4030fa:	2400      	movs	r4, #0
  4030fc:	f818 3b01 	ldrb.w	r3, [r8], #1
  403100:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403104:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  403108:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40310c:	2a09      	cmp	r2, #9
  40310e:	d9f5      	bls.n	4030fc <_vfiprintf_r+0x598>
  403110:	e591      	b.n	402c36 <_vfiprintf_r+0xd2>
  403112:	f898 3000 	ldrb.w	r3, [r8]
  403116:	2101      	movs	r1, #1
  403118:	202b      	movs	r0, #43	; 0x2b
  40311a:	e58a      	b.n	402c32 <_vfiprintf_r+0xce>
  40311c:	f898 3000 	ldrb.w	r3, [r8]
  403120:	2b2a      	cmp	r3, #42	; 0x2a
  403122:	f108 0501 	add.w	r5, r8, #1
  403126:	f000 83dd 	beq.w	4038e4 <_vfiprintf_r+0xd80>
  40312a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40312e:	2a09      	cmp	r2, #9
  403130:	46a8      	mov	r8, r5
  403132:	bf98      	it	ls
  403134:	2500      	movls	r5, #0
  403136:	f200 83ce 	bhi.w	4038d6 <_vfiprintf_r+0xd72>
  40313a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40313e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403142:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  403146:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40314a:	2a09      	cmp	r2, #9
  40314c:	d9f5      	bls.n	40313a <_vfiprintf_r+0x5d6>
  40314e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  403152:	9201      	str	r2, [sp, #4]
  403154:	e56f      	b.n	402c36 <_vfiprintf_r+0xd2>
  403156:	9a04      	ldr	r2, [sp, #16]
  403158:	6814      	ldr	r4, [r2, #0]
  40315a:	4613      	mov	r3, r2
  40315c:	2c00      	cmp	r4, #0
  40315e:	f103 0304 	add.w	r3, r3, #4
  403162:	f6ff aded 	blt.w	402d40 <_vfiprintf_r+0x1dc>
  403166:	9304      	str	r3, [sp, #16]
  403168:	f898 3000 	ldrb.w	r3, [r8]
  40316c:	e561      	b.n	402c32 <_vfiprintf_r+0xce>
  40316e:	9406      	str	r4, [sp, #24]
  403170:	2900      	cmp	r1, #0
  403172:	d081      	beq.n	403078 <_vfiprintf_r+0x514>
  403174:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403178:	e77e      	b.n	403078 <_vfiprintf_r+0x514>
  40317a:	9a04      	ldr	r2, [sp, #16]
  40317c:	9406      	str	r4, [sp, #24]
  40317e:	6817      	ldr	r7, [r2, #0]
  403180:	f04f 0300 	mov.w	r3, #0
  403184:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403188:	1d14      	adds	r4, r2, #4
  40318a:	9b01      	ldr	r3, [sp, #4]
  40318c:	2f00      	cmp	r7, #0
  40318e:	f000 8386 	beq.w	40389e <_vfiprintf_r+0xd3a>
  403192:	2b00      	cmp	r3, #0
  403194:	f2c0 835f 	blt.w	403856 <_vfiprintf_r+0xcf2>
  403198:	461a      	mov	r2, r3
  40319a:	2100      	movs	r1, #0
  40319c:	4638      	mov	r0, r7
  40319e:	f001 fc5f 	bl	404a60 <memchr>
  4031a2:	2800      	cmp	r0, #0
  4031a4:	f000 838f 	beq.w	4038c6 <_vfiprintf_r+0xd62>
  4031a8:	1bc3      	subs	r3, r0, r7
  4031aa:	9303      	str	r3, [sp, #12]
  4031ac:	2300      	movs	r3, #0
  4031ae:	9404      	str	r4, [sp, #16]
  4031b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4031b4:	9301      	str	r3, [sp, #4]
  4031b6:	e5f5      	b.n	402da4 <_vfiprintf_r+0x240>
  4031b8:	9406      	str	r4, [sp, #24]
  4031ba:	2900      	cmp	r1, #0
  4031bc:	f040 83b9 	bne.w	403932 <_vfiprintf_r+0xdce>
  4031c0:	f016 0920 	ands.w	r9, r6, #32
  4031c4:	d135      	bne.n	403232 <_vfiprintf_r+0x6ce>
  4031c6:	f016 0310 	ands.w	r3, r6, #16
  4031ca:	d103      	bne.n	4031d4 <_vfiprintf_r+0x670>
  4031cc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4031d0:	f040 832a 	bne.w	403828 <_vfiprintf_r+0xcc4>
  4031d4:	9a04      	ldr	r2, [sp, #16]
  4031d6:	4613      	mov	r3, r2
  4031d8:	6814      	ldr	r4, [r2, #0]
  4031da:	9a01      	ldr	r2, [sp, #4]
  4031dc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4031e0:	2a00      	cmp	r2, #0
  4031e2:	f103 0304 	add.w	r3, r3, #4
  4031e6:	f04f 0500 	mov.w	r5, #0
  4031ea:	f2c0 8332 	blt.w	403852 <_vfiprintf_r+0xcee>
  4031ee:	ea54 0205 	orrs.w	r2, r4, r5
  4031f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4031f6:	9304      	str	r3, [sp, #16]
  4031f8:	f47f af13 	bne.w	403022 <_vfiprintf_r+0x4be>
  4031fc:	9b01      	ldr	r3, [sp, #4]
  4031fe:	2b00      	cmp	r3, #0
  403200:	f43f adcc 	beq.w	402d9c <_vfiprintf_r+0x238>
  403204:	2400      	movs	r4, #0
  403206:	af2a      	add	r7, sp, #168	; 0xa8
  403208:	3430      	adds	r4, #48	; 0x30
  40320a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40320e:	ebc7 030b 	rsb	r3, r7, fp
  403212:	9303      	str	r3, [sp, #12]
  403214:	e5c6      	b.n	402da4 <_vfiprintf_r+0x240>
  403216:	f046 0620 	orr.w	r6, r6, #32
  40321a:	f898 3000 	ldrb.w	r3, [r8]
  40321e:	e508      	b.n	402c32 <_vfiprintf_r+0xce>
  403220:	9406      	str	r4, [sp, #24]
  403222:	2900      	cmp	r1, #0
  403224:	f040 836e 	bne.w	403904 <_vfiprintf_r+0xda0>
  403228:	f046 0610 	orr.w	r6, r6, #16
  40322c:	f016 0920 	ands.w	r9, r6, #32
  403230:	d0c9      	beq.n	4031c6 <_vfiprintf_r+0x662>
  403232:	9b04      	ldr	r3, [sp, #16]
  403234:	3307      	adds	r3, #7
  403236:	f023 0307 	bic.w	r3, r3, #7
  40323a:	f04f 0200 	mov.w	r2, #0
  40323e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403242:	e9d3 4500 	ldrd	r4, r5, [r3]
  403246:	f103 0208 	add.w	r2, r3, #8
  40324a:	9b01      	ldr	r3, [sp, #4]
  40324c:	9204      	str	r2, [sp, #16]
  40324e:	2b00      	cmp	r3, #0
  403250:	f2c0 81f9 	blt.w	403646 <_vfiprintf_r+0xae2>
  403254:	ea54 0305 	orrs.w	r3, r4, r5
  403258:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40325c:	f04f 0900 	mov.w	r9, #0
  403260:	f47f aedf 	bne.w	403022 <_vfiprintf_r+0x4be>
  403264:	e7ca      	b.n	4031fc <_vfiprintf_r+0x698>
  403266:	9406      	str	r4, [sp, #24]
  403268:	2900      	cmp	r1, #0
  40326a:	f040 8351 	bne.w	403910 <_vfiprintf_r+0xdac>
  40326e:	06b2      	lsls	r2, r6, #26
  403270:	48ae      	ldr	r0, [pc, #696]	; (40352c <_vfiprintf_r+0x9c8>)
  403272:	d541      	bpl.n	4032f8 <_vfiprintf_r+0x794>
  403274:	9a04      	ldr	r2, [sp, #16]
  403276:	3207      	adds	r2, #7
  403278:	f022 0207 	bic.w	r2, r2, #7
  40327c:	e9d2 4500 	ldrd	r4, r5, [r2]
  403280:	f102 0108 	add.w	r1, r2, #8
  403284:	9104      	str	r1, [sp, #16]
  403286:	f016 0901 	ands.w	r9, r6, #1
  40328a:	f000 8177 	beq.w	40357c <_vfiprintf_r+0xa18>
  40328e:	ea54 0205 	orrs.w	r2, r4, r5
  403292:	f040 8226 	bne.w	4036e2 <_vfiprintf_r+0xb7e>
  403296:	f04f 0300 	mov.w	r3, #0
  40329a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40329e:	9b01      	ldr	r3, [sp, #4]
  4032a0:	2b00      	cmp	r3, #0
  4032a2:	f2c0 8196 	blt.w	4035d2 <_vfiprintf_r+0xa6e>
  4032a6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4032aa:	e572      	b.n	402d92 <_vfiprintf_r+0x22e>
  4032ac:	9a04      	ldr	r2, [sp, #16]
  4032ae:	9406      	str	r4, [sp, #24]
  4032b0:	6813      	ldr	r3, [r2, #0]
  4032b2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4032b6:	4613      	mov	r3, r2
  4032b8:	f04f 0100 	mov.w	r1, #0
  4032bc:	2501      	movs	r5, #1
  4032be:	3304      	adds	r3, #4
  4032c0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4032c4:	9304      	str	r3, [sp, #16]
  4032c6:	9503      	str	r5, [sp, #12]
  4032c8:	af10      	add	r7, sp, #64	; 0x40
  4032ca:	2300      	movs	r3, #0
  4032cc:	9301      	str	r3, [sp, #4]
  4032ce:	e573      	b.n	402db8 <_vfiprintf_r+0x254>
  4032d0:	f898 3000 	ldrb.w	r3, [r8]
  4032d4:	2800      	cmp	r0, #0
  4032d6:	f47f acac 	bne.w	402c32 <_vfiprintf_r+0xce>
  4032da:	2101      	movs	r1, #1
  4032dc:	2020      	movs	r0, #32
  4032de:	e4a8      	b.n	402c32 <_vfiprintf_r+0xce>
  4032e0:	f046 0601 	orr.w	r6, r6, #1
  4032e4:	f898 3000 	ldrb.w	r3, [r8]
  4032e8:	e4a3      	b.n	402c32 <_vfiprintf_r+0xce>
  4032ea:	9406      	str	r4, [sp, #24]
  4032ec:	2900      	cmp	r1, #0
  4032ee:	f040 830c 	bne.w	40390a <_vfiprintf_r+0xda6>
  4032f2:	06b2      	lsls	r2, r6, #26
  4032f4:	488e      	ldr	r0, [pc, #568]	; (403530 <_vfiprintf_r+0x9cc>)
  4032f6:	d4bd      	bmi.n	403274 <_vfiprintf_r+0x710>
  4032f8:	9904      	ldr	r1, [sp, #16]
  4032fa:	06f7      	lsls	r7, r6, #27
  4032fc:	460a      	mov	r2, r1
  4032fe:	f100 819d 	bmi.w	40363c <_vfiprintf_r+0xad8>
  403302:	0675      	lsls	r5, r6, #25
  403304:	f140 819a 	bpl.w	40363c <_vfiprintf_r+0xad8>
  403308:	3204      	adds	r2, #4
  40330a:	880c      	ldrh	r4, [r1, #0]
  40330c:	9204      	str	r2, [sp, #16]
  40330e:	2500      	movs	r5, #0
  403310:	e7b9      	b.n	403286 <_vfiprintf_r+0x722>
  403312:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  403316:	f898 3000 	ldrb.w	r3, [r8]
  40331a:	e48a      	b.n	402c32 <_vfiprintf_r+0xce>
  40331c:	f898 3000 	ldrb.w	r3, [r8]
  403320:	2b6c      	cmp	r3, #108	; 0x6c
  403322:	bf03      	ittte	eq
  403324:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  403328:	f046 0620 	orreq.w	r6, r6, #32
  40332c:	f108 0801 	addeq.w	r8, r8, #1
  403330:	f046 0610 	orrne.w	r6, r6, #16
  403334:	e47d      	b.n	402c32 <_vfiprintf_r+0xce>
  403336:	2900      	cmp	r1, #0
  403338:	f040 8309 	bne.w	40394e <_vfiprintf_r+0xdea>
  40333c:	06b4      	lsls	r4, r6, #26
  40333e:	f140 821c 	bpl.w	40377a <_vfiprintf_r+0xc16>
  403342:	9a04      	ldr	r2, [sp, #16]
  403344:	9902      	ldr	r1, [sp, #8]
  403346:	6813      	ldr	r3, [r2, #0]
  403348:	17cd      	asrs	r5, r1, #31
  40334a:	4608      	mov	r0, r1
  40334c:	3204      	adds	r2, #4
  40334e:	4629      	mov	r1, r5
  403350:	9204      	str	r2, [sp, #16]
  403352:	e9c3 0100 	strd	r0, r1, [r3]
  403356:	e436      	b.n	402bc6 <_vfiprintf_r+0x62>
  403358:	9406      	str	r4, [sp, #24]
  40335a:	2900      	cmp	r1, #0
  40335c:	f43f ae43 	beq.w	402fe6 <_vfiprintf_r+0x482>
  403360:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403364:	e63f      	b.n	402fe6 <_vfiprintf_r+0x482>
  403366:	9406      	str	r4, [sp, #24]
  403368:	2900      	cmp	r1, #0
  40336a:	f040 82ed 	bne.w	403948 <_vfiprintf_r+0xde4>
  40336e:	2b00      	cmp	r3, #0
  403370:	f000 808f 	beq.w	403492 <_vfiprintf_r+0x92e>
  403374:	2501      	movs	r5, #1
  403376:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40337a:	f04f 0300 	mov.w	r3, #0
  40337e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403382:	9503      	str	r5, [sp, #12]
  403384:	af10      	add	r7, sp, #64	; 0x40
  403386:	e7a0      	b.n	4032ca <_vfiprintf_r+0x766>
  403388:	9304      	str	r3, [sp, #16]
  40338a:	f04f 0900 	mov.w	r9, #0
  40338e:	e696      	b.n	4030be <_vfiprintf_r+0x55a>
  403390:	aa0d      	add	r2, sp, #52	; 0x34
  403392:	9900      	ldr	r1, [sp, #0]
  403394:	9309      	str	r3, [sp, #36]	; 0x24
  403396:	4648      	mov	r0, r9
  403398:	f7ff fba8 	bl	402aec <__sprint_r.part.0>
  40339c:	2800      	cmp	r0, #0
  40339e:	d17f      	bne.n	4034a0 <_vfiprintf_r+0x93c>
  4033a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4033a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4033a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4033a6:	f100 0e01 	add.w	lr, r0, #1
  4033aa:	46dc      	mov	ip, fp
  4033ac:	e529      	b.n	402e02 <_vfiprintf_r+0x29e>
  4033ae:	980e      	ldr	r0, [sp, #56]	; 0x38
  4033b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4033b2:	f100 0e01 	add.w	lr, r0, #1
  4033b6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4033ba:	2b00      	cmp	r3, #0
  4033bc:	f43f ad50 	beq.w	402e60 <_vfiprintf_r+0x2fc>
  4033c0:	3201      	adds	r2, #1
  4033c2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4033c6:	2301      	movs	r3, #1
  4033c8:	f1be 0f07 	cmp.w	lr, #7
  4033cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4033ce:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4033d2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4033d6:	f340 80bf 	ble.w	403558 <_vfiprintf_r+0x9f4>
  4033da:	2a00      	cmp	r2, #0
  4033dc:	f040 814e 	bne.w	40367c <_vfiprintf_r+0xb18>
  4033e0:	9907      	ldr	r1, [sp, #28]
  4033e2:	2900      	cmp	r1, #0
  4033e4:	f040 80be 	bne.w	403564 <_vfiprintf_r+0xa00>
  4033e8:	469e      	mov	lr, r3
  4033ea:	4610      	mov	r0, r2
  4033ec:	46da      	mov	sl, fp
  4033ee:	9b08      	ldr	r3, [sp, #32]
  4033f0:	2b80      	cmp	r3, #128	; 0x80
  4033f2:	f43f ad50 	beq.w	402e96 <_vfiprintf_r+0x332>
  4033f6:	9b01      	ldr	r3, [sp, #4]
  4033f8:	9903      	ldr	r1, [sp, #12]
  4033fa:	1a5c      	subs	r4, r3, r1
  4033fc:	2c00      	cmp	r4, #0
  4033fe:	f77f ad93 	ble.w	402f28 <_vfiprintf_r+0x3c4>
  403402:	2c10      	cmp	r4, #16
  403404:	f8df 912c 	ldr.w	r9, [pc, #300]	; 403534 <_vfiprintf_r+0x9d0>
  403408:	dd25      	ble.n	403456 <_vfiprintf_r+0x8f2>
  40340a:	46d4      	mov	ip, sl
  40340c:	2310      	movs	r3, #16
  40340e:	46c2      	mov	sl, r8
  403410:	46a8      	mov	r8, r5
  403412:	464d      	mov	r5, r9
  403414:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403418:	e007      	b.n	40342a <_vfiprintf_r+0x8c6>
  40341a:	f100 0e02 	add.w	lr, r0, #2
  40341e:	f10c 0c08 	add.w	ip, ip, #8
  403422:	4608      	mov	r0, r1
  403424:	3c10      	subs	r4, #16
  403426:	2c10      	cmp	r4, #16
  403428:	dd11      	ble.n	40344e <_vfiprintf_r+0x8ea>
  40342a:	1c41      	adds	r1, r0, #1
  40342c:	3210      	adds	r2, #16
  40342e:	2907      	cmp	r1, #7
  403430:	920f      	str	r2, [sp, #60]	; 0x3c
  403432:	f8cc 5000 	str.w	r5, [ip]
  403436:	f8cc 3004 	str.w	r3, [ip, #4]
  40343a:	910e      	str	r1, [sp, #56]	; 0x38
  40343c:	dded      	ble.n	40341a <_vfiprintf_r+0x8b6>
  40343e:	b9d2      	cbnz	r2, 403476 <_vfiprintf_r+0x912>
  403440:	3c10      	subs	r4, #16
  403442:	2c10      	cmp	r4, #16
  403444:	f04f 0e01 	mov.w	lr, #1
  403448:	4610      	mov	r0, r2
  40344a:	46dc      	mov	ip, fp
  40344c:	dced      	bgt.n	40342a <_vfiprintf_r+0x8c6>
  40344e:	46a9      	mov	r9, r5
  403450:	4645      	mov	r5, r8
  403452:	46d0      	mov	r8, sl
  403454:	46e2      	mov	sl, ip
  403456:	4422      	add	r2, r4
  403458:	f1be 0f07 	cmp.w	lr, #7
  40345c:	920f      	str	r2, [sp, #60]	; 0x3c
  40345e:	f8ca 9000 	str.w	r9, [sl]
  403462:	f8ca 4004 	str.w	r4, [sl, #4]
  403466:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40346a:	dc2e      	bgt.n	4034ca <_vfiprintf_r+0x966>
  40346c:	f10a 0a08 	add.w	sl, sl, #8
  403470:	f10e 0e01 	add.w	lr, lr, #1
  403474:	e558      	b.n	402f28 <_vfiprintf_r+0x3c4>
  403476:	aa0d      	add	r2, sp, #52	; 0x34
  403478:	9900      	ldr	r1, [sp, #0]
  40347a:	9301      	str	r3, [sp, #4]
  40347c:	4648      	mov	r0, r9
  40347e:	f7ff fb35 	bl	402aec <__sprint_r.part.0>
  403482:	b968      	cbnz	r0, 4034a0 <_vfiprintf_r+0x93c>
  403484:	980e      	ldr	r0, [sp, #56]	; 0x38
  403486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403488:	9b01      	ldr	r3, [sp, #4]
  40348a:	f100 0e01 	add.w	lr, r0, #1
  40348e:	46dc      	mov	ip, fp
  403490:	e7c8      	b.n	403424 <_vfiprintf_r+0x8c0>
  403492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403494:	b123      	cbz	r3, 4034a0 <_vfiprintf_r+0x93c>
  403496:	9805      	ldr	r0, [sp, #20]
  403498:	9900      	ldr	r1, [sp, #0]
  40349a:	aa0d      	add	r2, sp, #52	; 0x34
  40349c:	f7ff fb26 	bl	402aec <__sprint_r.part.0>
  4034a0:	9b00      	ldr	r3, [sp, #0]
  4034a2:	899b      	ldrh	r3, [r3, #12]
  4034a4:	065a      	lsls	r2, r3, #25
  4034a6:	f100 818b 	bmi.w	4037c0 <_vfiprintf_r+0xc5c>
  4034aa:	9802      	ldr	r0, [sp, #8]
  4034ac:	b02b      	add	sp, #172	; 0xac
  4034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034b2:	aa0d      	add	r2, sp, #52	; 0x34
  4034b4:	9900      	ldr	r1, [sp, #0]
  4034b6:	4648      	mov	r0, r9
  4034b8:	f7ff fb18 	bl	402aec <__sprint_r.part.0>
  4034bc:	2800      	cmp	r0, #0
  4034be:	d1ef      	bne.n	4034a0 <_vfiprintf_r+0x93c>
  4034c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4034c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4034c4:	1c48      	adds	r0, r1, #1
  4034c6:	46da      	mov	sl, fp
  4034c8:	e555      	b.n	402f76 <_vfiprintf_r+0x412>
  4034ca:	2a00      	cmp	r2, #0
  4034cc:	f040 80fb 	bne.w	4036c6 <_vfiprintf_r+0xb62>
  4034d0:	9a03      	ldr	r2, [sp, #12]
  4034d2:	921b      	str	r2, [sp, #108]	; 0x6c
  4034d4:	2301      	movs	r3, #1
  4034d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4034d8:	971a      	str	r7, [sp, #104]	; 0x68
  4034da:	930e      	str	r3, [sp, #56]	; 0x38
  4034dc:	46da      	mov	sl, fp
  4034de:	f10a 0a08 	add.w	sl, sl, #8
  4034e2:	0771      	lsls	r1, r6, #29
  4034e4:	d504      	bpl.n	4034f0 <_vfiprintf_r+0x98c>
  4034e6:	9b06      	ldr	r3, [sp, #24]
  4034e8:	1b5c      	subs	r4, r3, r5
  4034ea:	2c00      	cmp	r4, #0
  4034ec:	f73f ad34 	bgt.w	402f58 <_vfiprintf_r+0x3f4>
  4034f0:	9b02      	ldr	r3, [sp, #8]
  4034f2:	9906      	ldr	r1, [sp, #24]
  4034f4:	42a9      	cmp	r1, r5
  4034f6:	bfac      	ite	ge
  4034f8:	185b      	addge	r3, r3, r1
  4034fa:	195b      	addlt	r3, r3, r5
  4034fc:	9302      	str	r3, [sp, #8]
  4034fe:	2a00      	cmp	r2, #0
  403500:	f040 80b3 	bne.w	40366a <_vfiprintf_r+0xb06>
  403504:	2300      	movs	r3, #0
  403506:	930e      	str	r3, [sp, #56]	; 0x38
  403508:	46da      	mov	sl, fp
  40350a:	f7ff bb5c 	b.w	402bc6 <_vfiprintf_r+0x62>
  40350e:	aa0d      	add	r2, sp, #52	; 0x34
  403510:	9900      	ldr	r1, [sp, #0]
  403512:	9307      	str	r3, [sp, #28]
  403514:	4648      	mov	r0, r9
  403516:	f7ff fae9 	bl	402aec <__sprint_r.part.0>
  40351a:	2800      	cmp	r0, #0
  40351c:	d1c0      	bne.n	4034a0 <_vfiprintf_r+0x93c>
  40351e:	980e      	ldr	r0, [sp, #56]	; 0x38
  403520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403522:	9b07      	ldr	r3, [sp, #28]
  403524:	f100 0c01 	add.w	ip, r0, #1
  403528:	46de      	mov	lr, fp
  40352a:	e4cb      	b.n	402ec4 <_vfiprintf_r+0x360>
  40352c:	0040595c 	.word	0x0040595c
  403530:	00405970 	.word	0x00405970
  403534:	0040594c 	.word	0x0040594c
  403538:	2a00      	cmp	r2, #0
  40353a:	f040 8133 	bne.w	4037a4 <_vfiprintf_r+0xc40>
  40353e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403542:	2b00      	cmp	r3, #0
  403544:	f000 80f5 	beq.w	403732 <_vfiprintf_r+0xbce>
  403548:	2301      	movs	r3, #1
  40354a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40354e:	461a      	mov	r2, r3
  403550:	931b      	str	r3, [sp, #108]	; 0x6c
  403552:	469e      	mov	lr, r3
  403554:	911a      	str	r1, [sp, #104]	; 0x68
  403556:	46da      	mov	sl, fp
  403558:	4670      	mov	r0, lr
  40355a:	f10a 0a08 	add.w	sl, sl, #8
  40355e:	f10e 0e01 	add.w	lr, lr, #1
  403562:	e47d      	b.n	402e60 <_vfiprintf_r+0x2fc>
  403564:	a90c      	add	r1, sp, #48	; 0x30
  403566:	2202      	movs	r2, #2
  403568:	469e      	mov	lr, r3
  40356a:	911a      	str	r1, [sp, #104]	; 0x68
  40356c:	921b      	str	r2, [sp, #108]	; 0x6c
  40356e:	46da      	mov	sl, fp
  403570:	4670      	mov	r0, lr
  403572:	f10a 0a08 	add.w	sl, sl, #8
  403576:	f10e 0e01 	add.w	lr, lr, #1
  40357a:	e738      	b.n	4033ee <_vfiprintf_r+0x88a>
  40357c:	9b01      	ldr	r3, [sp, #4]
  40357e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  403582:	2b00      	cmp	r3, #0
  403584:	f2c0 812a 	blt.w	4037dc <_vfiprintf_r+0xc78>
  403588:	ea54 0305 	orrs.w	r3, r4, r5
  40358c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403590:	f43f abff 	beq.w	402d92 <_vfiprintf_r+0x22e>
  403594:	465f      	mov	r7, fp
  403596:	0923      	lsrs	r3, r4, #4
  403598:	f004 010f 	and.w	r1, r4, #15
  40359c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4035a0:	092a      	lsrs	r2, r5, #4
  4035a2:	461c      	mov	r4, r3
  4035a4:	4615      	mov	r5, r2
  4035a6:	5c43      	ldrb	r3, [r0, r1]
  4035a8:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4035ac:	ea54 0305 	orrs.w	r3, r4, r5
  4035b0:	d1f1      	bne.n	403596 <_vfiprintf_r+0xa32>
  4035b2:	ebc7 030b 	rsb	r3, r7, fp
  4035b6:	9303      	str	r3, [sp, #12]
  4035b8:	f7ff bbf4 	b.w	402da4 <_vfiprintf_r+0x240>
  4035bc:	aa0d      	add	r2, sp, #52	; 0x34
  4035be:	9900      	ldr	r1, [sp, #0]
  4035c0:	9805      	ldr	r0, [sp, #20]
  4035c2:	f7ff fa93 	bl	402aec <__sprint_r.part.0>
  4035c6:	2800      	cmp	r0, #0
  4035c8:	f47f af6a 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  4035cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4035ce:	46da      	mov	sl, fp
  4035d0:	e787      	b.n	4034e2 <_vfiprintf_r+0x97e>
  4035d2:	f04f 0900 	mov.w	r9, #0
  4035d6:	2400      	movs	r4, #0
  4035d8:	2500      	movs	r5, #0
  4035da:	e7db      	b.n	403594 <_vfiprintf_r+0xa30>
  4035dc:	f016 0210 	ands.w	r2, r6, #16
  4035e0:	f000 80b2 	beq.w	403748 <_vfiprintf_r+0xbe4>
  4035e4:	9904      	ldr	r1, [sp, #16]
  4035e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4035ea:	460a      	mov	r2, r1
  4035ec:	680c      	ldr	r4, [r1, #0]
  4035ee:	9901      	ldr	r1, [sp, #4]
  4035f0:	2900      	cmp	r1, #0
  4035f2:	f102 0204 	add.w	r2, r2, #4
  4035f6:	f04f 0500 	mov.w	r5, #0
  4035fa:	f2c0 8159 	blt.w	4038b0 <_vfiprintf_r+0xd4c>
  4035fe:	ea54 0105 	orrs.w	r1, r4, r5
  403602:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403606:	9204      	str	r2, [sp, #16]
  403608:	f43f ad51 	beq.w	4030ae <_vfiprintf_r+0x54a>
  40360c:	4699      	mov	r9, r3
  40360e:	e556      	b.n	4030be <_vfiprintf_r+0x55a>
  403610:	06f7      	lsls	r7, r6, #27
  403612:	d40a      	bmi.n	40362a <_vfiprintf_r+0xac6>
  403614:	0675      	lsls	r5, r6, #25
  403616:	d508      	bpl.n	40362a <_vfiprintf_r+0xac6>
  403618:	9904      	ldr	r1, [sp, #16]
  40361a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40361e:	3104      	adds	r1, #4
  403620:	17e5      	asrs	r5, r4, #31
  403622:	4622      	mov	r2, r4
  403624:	462b      	mov	r3, r5
  403626:	9104      	str	r1, [sp, #16]
  403628:	e4ea      	b.n	403000 <_vfiprintf_r+0x49c>
  40362a:	9a04      	ldr	r2, [sp, #16]
  40362c:	6814      	ldr	r4, [r2, #0]
  40362e:	4613      	mov	r3, r2
  403630:	3304      	adds	r3, #4
  403632:	17e5      	asrs	r5, r4, #31
  403634:	9304      	str	r3, [sp, #16]
  403636:	4622      	mov	r2, r4
  403638:	462b      	mov	r3, r5
  40363a:	e4e1      	b.n	403000 <_vfiprintf_r+0x49c>
  40363c:	6814      	ldr	r4, [r2, #0]
  40363e:	3204      	adds	r2, #4
  403640:	9204      	str	r2, [sp, #16]
  403642:	2500      	movs	r5, #0
  403644:	e61f      	b.n	403286 <_vfiprintf_r+0x722>
  403646:	f04f 0900 	mov.w	r9, #0
  40364a:	ea54 0305 	orrs.w	r3, r4, r5
  40364e:	f47f ace8 	bne.w	403022 <_vfiprintf_r+0x4be>
  403652:	e5d8      	b.n	403206 <_vfiprintf_r+0x6a2>
  403654:	aa0d      	add	r2, sp, #52	; 0x34
  403656:	9900      	ldr	r1, [sp, #0]
  403658:	9805      	ldr	r0, [sp, #20]
  40365a:	f7ff fa47 	bl	402aec <__sprint_r.part.0>
  40365e:	2800      	cmp	r0, #0
  403660:	f47f af1e 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  403664:	46da      	mov	sl, fp
  403666:	f7ff bb48 	b.w	402cfa <_vfiprintf_r+0x196>
  40366a:	aa0d      	add	r2, sp, #52	; 0x34
  40366c:	9900      	ldr	r1, [sp, #0]
  40366e:	9805      	ldr	r0, [sp, #20]
  403670:	f7ff fa3c 	bl	402aec <__sprint_r.part.0>
  403674:	2800      	cmp	r0, #0
  403676:	f43f af45 	beq.w	403504 <_vfiprintf_r+0x9a0>
  40367a:	e711      	b.n	4034a0 <_vfiprintf_r+0x93c>
  40367c:	aa0d      	add	r2, sp, #52	; 0x34
  40367e:	9900      	ldr	r1, [sp, #0]
  403680:	9805      	ldr	r0, [sp, #20]
  403682:	f7ff fa33 	bl	402aec <__sprint_r.part.0>
  403686:	2800      	cmp	r0, #0
  403688:	f47f af0a 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  40368c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40368e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403690:	f100 0e01 	add.w	lr, r0, #1
  403694:	46da      	mov	sl, fp
  403696:	f7ff bbe3 	b.w	402e60 <_vfiprintf_r+0x2fc>
  40369a:	aa0d      	add	r2, sp, #52	; 0x34
  40369c:	9900      	ldr	r1, [sp, #0]
  40369e:	9805      	ldr	r0, [sp, #20]
  4036a0:	f7ff fa24 	bl	402aec <__sprint_r.part.0>
  4036a4:	2800      	cmp	r0, #0
  4036a6:	f47f aefb 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  4036aa:	980e      	ldr	r0, [sp, #56]	; 0x38
  4036ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036ae:	f100 0e01 	add.w	lr, r0, #1
  4036b2:	46da      	mov	sl, fp
  4036b4:	e69b      	b.n	4033ee <_vfiprintf_r+0x88a>
  4036b6:	2a00      	cmp	r2, #0
  4036b8:	f040 80d8 	bne.w	40386c <_vfiprintf_r+0xd08>
  4036bc:	f04f 0e01 	mov.w	lr, #1
  4036c0:	4610      	mov	r0, r2
  4036c2:	46da      	mov	sl, fp
  4036c4:	e697      	b.n	4033f6 <_vfiprintf_r+0x892>
  4036c6:	aa0d      	add	r2, sp, #52	; 0x34
  4036c8:	9900      	ldr	r1, [sp, #0]
  4036ca:	9805      	ldr	r0, [sp, #20]
  4036cc:	f7ff fa0e 	bl	402aec <__sprint_r.part.0>
  4036d0:	2800      	cmp	r0, #0
  4036d2:	f47f aee5 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  4036d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036da:	f103 0e01 	add.w	lr, r3, #1
  4036de:	46da      	mov	sl, fp
  4036e0:	e422      	b.n	402f28 <_vfiprintf_r+0x3c4>
  4036e2:	2230      	movs	r2, #48	; 0x30
  4036e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4036e8:	9a01      	ldr	r2, [sp, #4]
  4036ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4036ee:	2a00      	cmp	r2, #0
  4036f0:	f04f 0300 	mov.w	r3, #0
  4036f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4036f8:	f046 0302 	orr.w	r3, r6, #2
  4036fc:	f2c0 80cb 	blt.w	403896 <_vfiprintf_r+0xd32>
  403700:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403704:	f046 0602 	orr.w	r6, r6, #2
  403708:	f04f 0900 	mov.w	r9, #0
  40370c:	e742      	b.n	403594 <_vfiprintf_r+0xa30>
  40370e:	f04f 0900 	mov.w	r9, #0
  403712:	4890      	ldr	r0, [pc, #576]	; (403954 <_vfiprintf_r+0xdf0>)
  403714:	e73e      	b.n	403594 <_vfiprintf_r+0xa30>
  403716:	9b01      	ldr	r3, [sp, #4]
  403718:	4264      	negs	r4, r4
  40371a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40371e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403722:	2b00      	cmp	r3, #0
  403724:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  403728:	f6ff ac7b 	blt.w	403022 <_vfiprintf_r+0x4be>
  40372c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403730:	e477      	b.n	403022 <_vfiprintf_r+0x4be>
  403732:	9b07      	ldr	r3, [sp, #28]
  403734:	2b00      	cmp	r3, #0
  403736:	d072      	beq.n	40381e <_vfiprintf_r+0xcba>
  403738:	ab0c      	add	r3, sp, #48	; 0x30
  40373a:	2202      	movs	r2, #2
  40373c:	931a      	str	r3, [sp, #104]	; 0x68
  40373e:	921b      	str	r2, [sp, #108]	; 0x6c
  403740:	f04f 0e01 	mov.w	lr, #1
  403744:	46da      	mov	sl, fp
  403746:	e713      	b.n	403570 <_vfiprintf_r+0xa0c>
  403748:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40374c:	d048      	beq.n	4037e0 <_vfiprintf_r+0xc7c>
  40374e:	9904      	ldr	r1, [sp, #16]
  403750:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  403754:	460b      	mov	r3, r1
  403756:	880c      	ldrh	r4, [r1, #0]
  403758:	9901      	ldr	r1, [sp, #4]
  40375a:	2900      	cmp	r1, #0
  40375c:	f103 0304 	add.w	r3, r3, #4
  403760:	f04f 0500 	mov.w	r5, #0
  403764:	f6ff ae10 	blt.w	403388 <_vfiprintf_r+0x824>
  403768:	ea54 0105 	orrs.w	r1, r4, r5
  40376c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403770:	9304      	str	r3, [sp, #16]
  403772:	f43f ac9c 	beq.w	4030ae <_vfiprintf_r+0x54a>
  403776:	4691      	mov	r9, r2
  403778:	e4a1      	b.n	4030be <_vfiprintf_r+0x55a>
  40377a:	06f0      	lsls	r0, r6, #27
  40377c:	d40a      	bmi.n	403794 <_vfiprintf_r+0xc30>
  40377e:	0671      	lsls	r1, r6, #25
  403780:	d508      	bpl.n	403794 <_vfiprintf_r+0xc30>
  403782:	9a04      	ldr	r2, [sp, #16]
  403784:	6813      	ldr	r3, [r2, #0]
  403786:	3204      	adds	r2, #4
  403788:	9204      	str	r2, [sp, #16]
  40378a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40378e:	801a      	strh	r2, [r3, #0]
  403790:	f7ff ba19 	b.w	402bc6 <_vfiprintf_r+0x62>
  403794:	9a04      	ldr	r2, [sp, #16]
  403796:	6813      	ldr	r3, [r2, #0]
  403798:	3204      	adds	r2, #4
  40379a:	9204      	str	r2, [sp, #16]
  40379c:	9a02      	ldr	r2, [sp, #8]
  40379e:	601a      	str	r2, [r3, #0]
  4037a0:	f7ff ba11 	b.w	402bc6 <_vfiprintf_r+0x62>
  4037a4:	aa0d      	add	r2, sp, #52	; 0x34
  4037a6:	9900      	ldr	r1, [sp, #0]
  4037a8:	9805      	ldr	r0, [sp, #20]
  4037aa:	f7ff f99f 	bl	402aec <__sprint_r.part.0>
  4037ae:	2800      	cmp	r0, #0
  4037b0:	f47f ae76 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  4037b4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4037b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037b8:	f100 0e01 	add.w	lr, r0, #1
  4037bc:	46da      	mov	sl, fp
  4037be:	e5fa      	b.n	4033b6 <_vfiprintf_r+0x852>
  4037c0:	f04f 30ff 	mov.w	r0, #4294967295
  4037c4:	f7ff bab6 	b.w	402d34 <_vfiprintf_r+0x1d0>
  4037c8:	4862      	ldr	r0, [pc, #392]	; (403954 <_vfiprintf_r+0xdf0>)
  4037ca:	4616      	mov	r6, r2
  4037cc:	ea54 0205 	orrs.w	r2, r4, r5
  4037d0:	9304      	str	r3, [sp, #16]
  4037d2:	f04f 0900 	mov.w	r9, #0
  4037d6:	f47f aedd 	bne.w	403594 <_vfiprintf_r+0xa30>
  4037da:	e6fc      	b.n	4035d6 <_vfiprintf_r+0xa72>
  4037dc:	9b04      	ldr	r3, [sp, #16]
  4037de:	e7f5      	b.n	4037cc <_vfiprintf_r+0xc68>
  4037e0:	9a04      	ldr	r2, [sp, #16]
  4037e2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4037e6:	4613      	mov	r3, r2
  4037e8:	6814      	ldr	r4, [r2, #0]
  4037ea:	9a01      	ldr	r2, [sp, #4]
  4037ec:	2a00      	cmp	r2, #0
  4037ee:	f103 0304 	add.w	r3, r3, #4
  4037f2:	f04f 0500 	mov.w	r5, #0
  4037f6:	f6ff adc7 	blt.w	403388 <_vfiprintf_r+0x824>
  4037fa:	ea54 0205 	orrs.w	r2, r4, r5
  4037fe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403802:	9304      	str	r3, [sp, #16]
  403804:	f47f ac5b 	bne.w	4030be <_vfiprintf_r+0x55a>
  403808:	e451      	b.n	4030ae <_vfiprintf_r+0x54a>
  40380a:	aa0d      	add	r2, sp, #52	; 0x34
  40380c:	9900      	ldr	r1, [sp, #0]
  40380e:	9805      	ldr	r0, [sp, #20]
  403810:	f7ff f96c 	bl	402aec <__sprint_r.part.0>
  403814:	2800      	cmp	r0, #0
  403816:	f47f ae43 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  40381a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40381c:	e668      	b.n	4034f0 <_vfiprintf_r+0x98c>
  40381e:	4610      	mov	r0, r2
  403820:	f04f 0e01 	mov.w	lr, #1
  403824:	46da      	mov	sl, fp
  403826:	e5e6      	b.n	4033f6 <_vfiprintf_r+0x892>
  403828:	9904      	ldr	r1, [sp, #16]
  40382a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40382e:	460a      	mov	r2, r1
  403830:	880c      	ldrh	r4, [r1, #0]
  403832:	9901      	ldr	r1, [sp, #4]
  403834:	2900      	cmp	r1, #0
  403836:	f102 0204 	add.w	r2, r2, #4
  40383a:	f04f 0500 	mov.w	r5, #0
  40383e:	db4e      	blt.n	4038de <_vfiprintf_r+0xd7a>
  403840:	ea54 0105 	orrs.w	r1, r4, r5
  403844:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403848:	9204      	str	r2, [sp, #16]
  40384a:	4699      	mov	r9, r3
  40384c:	f47f abe9 	bne.w	403022 <_vfiprintf_r+0x4be>
  403850:	e4d4      	b.n	4031fc <_vfiprintf_r+0x698>
  403852:	9304      	str	r3, [sp, #16]
  403854:	e6f9      	b.n	40364a <_vfiprintf_r+0xae6>
  403856:	4638      	mov	r0, r7
  403858:	9404      	str	r4, [sp, #16]
  40385a:	f001 fcb1 	bl	4051c0 <strlen>
  40385e:	2300      	movs	r3, #0
  403860:	9003      	str	r0, [sp, #12]
  403862:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403866:	9301      	str	r3, [sp, #4]
  403868:	f7ff ba9c 	b.w	402da4 <_vfiprintf_r+0x240>
  40386c:	aa0d      	add	r2, sp, #52	; 0x34
  40386e:	9900      	ldr	r1, [sp, #0]
  403870:	9805      	ldr	r0, [sp, #20]
  403872:	f7ff f93b 	bl	402aec <__sprint_r.part.0>
  403876:	2800      	cmp	r0, #0
  403878:	f47f ae12 	bne.w	4034a0 <_vfiprintf_r+0x93c>
  40387c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40387e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403880:	f100 0e01 	add.w	lr, r0, #1
  403884:	46da      	mov	sl, fp
  403886:	e5b6      	b.n	4033f6 <_vfiprintf_r+0x892>
  403888:	980e      	ldr	r0, [sp, #56]	; 0x38
  40388a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40388c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40395c <_vfiprintf_r+0xdf8>
  403890:	3001      	adds	r0, #1
  403892:	f7ff bad2 	b.w	402e3a <_vfiprintf_r+0x2d6>
  403896:	461e      	mov	r6, r3
  403898:	f04f 0900 	mov.w	r9, #0
  40389c:	e67a      	b.n	403594 <_vfiprintf_r+0xa30>
  40389e:	2b06      	cmp	r3, #6
  4038a0:	bf28      	it	cs
  4038a2:	2306      	movcs	r3, #6
  4038a4:	9303      	str	r3, [sp, #12]
  4038a6:	9404      	str	r4, [sp, #16]
  4038a8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  4038ac:	4f2a      	ldr	r7, [pc, #168]	; (403958 <_vfiprintf_r+0xdf4>)
  4038ae:	e50c      	b.n	4032ca <_vfiprintf_r+0x766>
  4038b0:	9204      	str	r2, [sp, #16]
  4038b2:	e56a      	b.n	40338a <_vfiprintf_r+0x826>
  4038b4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4038b6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40395c <_vfiprintf_r+0xdf8>
  4038ba:	3001      	adds	r0, #1
  4038bc:	f7ff bb73 	b.w	402fa6 <_vfiprintf_r+0x442>
  4038c0:	46f4      	mov	ip, lr
  4038c2:	f7ff bb1a 	b.w	402efa <_vfiprintf_r+0x396>
  4038c6:	9b01      	ldr	r3, [sp, #4]
  4038c8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4038cc:	9303      	str	r3, [sp, #12]
  4038ce:	9404      	str	r4, [sp, #16]
  4038d0:	9001      	str	r0, [sp, #4]
  4038d2:	f7ff ba67 	b.w	402da4 <_vfiprintf_r+0x240>
  4038d6:	2200      	movs	r2, #0
  4038d8:	9201      	str	r2, [sp, #4]
  4038da:	f7ff b9ac 	b.w	402c36 <_vfiprintf_r+0xd2>
  4038de:	9204      	str	r2, [sp, #16]
  4038e0:	4699      	mov	r9, r3
  4038e2:	e6b2      	b.n	40364a <_vfiprintf_r+0xae6>
  4038e4:	9a04      	ldr	r2, [sp, #16]
  4038e6:	6813      	ldr	r3, [r2, #0]
  4038e8:	9301      	str	r3, [sp, #4]
  4038ea:	3204      	adds	r2, #4
  4038ec:	2b00      	cmp	r3, #0
  4038ee:	9204      	str	r2, [sp, #16]
  4038f0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4038f4:	46a8      	mov	r8, r5
  4038f6:	f6bf a99c 	bge.w	402c32 <_vfiprintf_r+0xce>
  4038fa:	f04f 32ff 	mov.w	r2, #4294967295
  4038fe:	9201      	str	r2, [sp, #4]
  403900:	f7ff b997 	b.w	402c32 <_vfiprintf_r+0xce>
  403904:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403908:	e48e      	b.n	403228 <_vfiprintf_r+0x6c4>
  40390a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40390e:	e4f0      	b.n	4032f2 <_vfiprintf_r+0x78e>
  403910:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403914:	e4ab      	b.n	40326e <_vfiprintf_r+0x70a>
  403916:	4699      	mov	r9, r3
  403918:	07f3      	lsls	r3, r6, #31
  40391a:	d505      	bpl.n	403928 <_vfiprintf_r+0xdc4>
  40391c:	af2a      	add	r7, sp, #168	; 0xa8
  40391e:	2330      	movs	r3, #48	; 0x30
  403920:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403924:	f7ff bb97 	b.w	403056 <_vfiprintf_r+0x4f2>
  403928:	9b01      	ldr	r3, [sp, #4]
  40392a:	9303      	str	r3, [sp, #12]
  40392c:	465f      	mov	r7, fp
  40392e:	f7ff ba39 	b.w	402da4 <_vfiprintf_r+0x240>
  403932:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403936:	e443      	b.n	4031c0 <_vfiprintf_r+0x65c>
  403938:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40393c:	f7ff bb9a 	b.w	403074 <_vfiprintf_r+0x510>
  403940:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403944:	f7ff bb4d 	b.w	402fe2 <_vfiprintf_r+0x47e>
  403948:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40394c:	e50f      	b.n	40336e <_vfiprintf_r+0x80a>
  40394e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  403952:	e4f3      	b.n	40333c <_vfiprintf_r+0x7d8>
  403954:	00405970 	.word	0x00405970
  403958:	00405984 	.word	0x00405984
  40395c:	0040598c 	.word	0x0040598c

00403960 <__sbprintf>:
  403960:	b5f0      	push	{r4, r5, r6, r7, lr}
  403962:	460c      	mov	r4, r1
  403964:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  403968:	8989      	ldrh	r1, [r1, #12]
  40396a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40396c:	89e5      	ldrh	r5, [r4, #14]
  40396e:	9619      	str	r6, [sp, #100]	; 0x64
  403970:	f021 0102 	bic.w	r1, r1, #2
  403974:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403976:	f8ad 500e 	strh.w	r5, [sp, #14]
  40397a:	2500      	movs	r5, #0
  40397c:	69e7      	ldr	r7, [r4, #28]
  40397e:	f8ad 100c 	strh.w	r1, [sp, #12]
  403982:	9609      	str	r6, [sp, #36]	; 0x24
  403984:	9506      	str	r5, [sp, #24]
  403986:	ae1a      	add	r6, sp, #104	; 0x68
  403988:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40398c:	4669      	mov	r1, sp
  40398e:	9600      	str	r6, [sp, #0]
  403990:	9604      	str	r6, [sp, #16]
  403992:	9502      	str	r5, [sp, #8]
  403994:	9505      	str	r5, [sp, #20]
  403996:	9707      	str	r7, [sp, #28]
  403998:	4606      	mov	r6, r0
  40399a:	f7ff f8e3 	bl	402b64 <_vfiprintf_r>
  40399e:	1e05      	subs	r5, r0, #0
  4039a0:	db07      	blt.n	4039b2 <__sbprintf+0x52>
  4039a2:	4630      	mov	r0, r6
  4039a4:	4669      	mov	r1, sp
  4039a6:	f000 f929 	bl	403bfc <_fflush_r>
  4039aa:	2800      	cmp	r0, #0
  4039ac:	bf18      	it	ne
  4039ae:	f04f 35ff 	movne.w	r5, #4294967295
  4039b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4039b6:	065b      	lsls	r3, r3, #25
  4039b8:	d503      	bpl.n	4039c2 <__sbprintf+0x62>
  4039ba:	89a3      	ldrh	r3, [r4, #12]
  4039bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039c0:	81a3      	strh	r3, [r4, #12]
  4039c2:	4628      	mov	r0, r5
  4039c4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4039c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4039ca:	bf00      	nop

004039cc <__swsetup_r>:
  4039cc:	b538      	push	{r3, r4, r5, lr}
  4039ce:	4b30      	ldr	r3, [pc, #192]	; (403a90 <__swsetup_r+0xc4>)
  4039d0:	681b      	ldr	r3, [r3, #0]
  4039d2:	4605      	mov	r5, r0
  4039d4:	460c      	mov	r4, r1
  4039d6:	b113      	cbz	r3, 4039de <__swsetup_r+0x12>
  4039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4039da:	2a00      	cmp	r2, #0
  4039dc:	d038      	beq.n	403a50 <__swsetup_r+0x84>
  4039de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4039e2:	b293      	uxth	r3, r2
  4039e4:	0718      	lsls	r0, r3, #28
  4039e6:	d50c      	bpl.n	403a02 <__swsetup_r+0x36>
  4039e8:	6920      	ldr	r0, [r4, #16]
  4039ea:	b1a8      	cbz	r0, 403a18 <__swsetup_r+0x4c>
  4039ec:	f013 0201 	ands.w	r2, r3, #1
  4039f0:	d01e      	beq.n	403a30 <__swsetup_r+0x64>
  4039f2:	6963      	ldr	r3, [r4, #20]
  4039f4:	2200      	movs	r2, #0
  4039f6:	425b      	negs	r3, r3
  4039f8:	61a3      	str	r3, [r4, #24]
  4039fa:	60a2      	str	r2, [r4, #8]
  4039fc:	b1f0      	cbz	r0, 403a3c <__swsetup_r+0x70>
  4039fe:	2000      	movs	r0, #0
  403a00:	bd38      	pop	{r3, r4, r5, pc}
  403a02:	06d9      	lsls	r1, r3, #27
  403a04:	d53c      	bpl.n	403a80 <__swsetup_r+0xb4>
  403a06:	0758      	lsls	r0, r3, #29
  403a08:	d426      	bmi.n	403a58 <__swsetup_r+0x8c>
  403a0a:	6920      	ldr	r0, [r4, #16]
  403a0c:	f042 0308 	orr.w	r3, r2, #8
  403a10:	81a3      	strh	r3, [r4, #12]
  403a12:	b29b      	uxth	r3, r3
  403a14:	2800      	cmp	r0, #0
  403a16:	d1e9      	bne.n	4039ec <__swsetup_r+0x20>
  403a18:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403a1c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403a20:	d0e4      	beq.n	4039ec <__swsetup_r+0x20>
  403a22:	4628      	mov	r0, r5
  403a24:	4621      	mov	r1, r4
  403a26:	f000 fd15 	bl	404454 <__smakebuf_r>
  403a2a:	89a3      	ldrh	r3, [r4, #12]
  403a2c:	6920      	ldr	r0, [r4, #16]
  403a2e:	e7dd      	b.n	4039ec <__swsetup_r+0x20>
  403a30:	0799      	lsls	r1, r3, #30
  403a32:	bf58      	it	pl
  403a34:	6962      	ldrpl	r2, [r4, #20]
  403a36:	60a2      	str	r2, [r4, #8]
  403a38:	2800      	cmp	r0, #0
  403a3a:	d1e0      	bne.n	4039fe <__swsetup_r+0x32>
  403a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a40:	061a      	lsls	r2, r3, #24
  403a42:	d5dd      	bpl.n	403a00 <__swsetup_r+0x34>
  403a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a48:	81a3      	strh	r3, [r4, #12]
  403a4a:	f04f 30ff 	mov.w	r0, #4294967295
  403a4e:	bd38      	pop	{r3, r4, r5, pc}
  403a50:	4618      	mov	r0, r3
  403a52:	f000 f967 	bl	403d24 <__sinit>
  403a56:	e7c2      	b.n	4039de <__swsetup_r+0x12>
  403a58:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a5a:	b151      	cbz	r1, 403a72 <__swsetup_r+0xa6>
  403a5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a60:	4299      	cmp	r1, r3
  403a62:	d004      	beq.n	403a6e <__swsetup_r+0xa2>
  403a64:	4628      	mov	r0, r5
  403a66:	f000 fa27 	bl	403eb8 <_free_r>
  403a6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a6e:	2300      	movs	r3, #0
  403a70:	6323      	str	r3, [r4, #48]	; 0x30
  403a72:	2300      	movs	r3, #0
  403a74:	6920      	ldr	r0, [r4, #16]
  403a76:	6063      	str	r3, [r4, #4]
  403a78:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403a7c:	6020      	str	r0, [r4, #0]
  403a7e:	e7c5      	b.n	403a0c <__swsetup_r+0x40>
  403a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403a84:	2309      	movs	r3, #9
  403a86:	602b      	str	r3, [r5, #0]
  403a88:	f04f 30ff 	mov.w	r0, #4294967295
  403a8c:	81a2      	strh	r2, [r4, #12]
  403a8e:	bd38      	pop	{r3, r4, r5, pc}
  403a90:	20400430 	.word	0x20400430

00403a94 <register_fini>:
  403a94:	4b02      	ldr	r3, [pc, #8]	; (403aa0 <register_fini+0xc>)
  403a96:	b113      	cbz	r3, 403a9e <register_fini+0xa>
  403a98:	4802      	ldr	r0, [pc, #8]	; (403aa4 <register_fini+0x10>)
  403a9a:	f000 b805 	b.w	403aa8 <atexit>
  403a9e:	4770      	bx	lr
  403aa0:	00000000 	.word	0x00000000
  403aa4:	00403d39 	.word	0x00403d39

00403aa8 <atexit>:
  403aa8:	2300      	movs	r3, #0
  403aaa:	4601      	mov	r1, r0
  403aac:	461a      	mov	r2, r3
  403aae:	4618      	mov	r0, r3
  403ab0:	f001 bc98 	b.w	4053e4 <__register_exitproc>

00403ab4 <__sflush_r>:
  403ab4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403ab8:	b29a      	uxth	r2, r3
  403aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403abe:	460d      	mov	r5, r1
  403ac0:	0711      	lsls	r1, r2, #28
  403ac2:	4680      	mov	r8, r0
  403ac4:	d43c      	bmi.n	403b40 <__sflush_r+0x8c>
  403ac6:	686a      	ldr	r2, [r5, #4]
  403ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403acc:	2a00      	cmp	r2, #0
  403ace:	81ab      	strh	r3, [r5, #12]
  403ad0:	dd73      	ble.n	403bba <__sflush_r+0x106>
  403ad2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403ad4:	2c00      	cmp	r4, #0
  403ad6:	d04b      	beq.n	403b70 <__sflush_r+0xbc>
  403ad8:	b29b      	uxth	r3, r3
  403ada:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  403ade:	2100      	movs	r1, #0
  403ae0:	b292      	uxth	r2, r2
  403ae2:	f8d8 6000 	ldr.w	r6, [r8]
  403ae6:	f8c8 1000 	str.w	r1, [r8]
  403aea:	2a00      	cmp	r2, #0
  403aec:	d069      	beq.n	403bc2 <__sflush_r+0x10e>
  403aee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403af0:	075f      	lsls	r7, r3, #29
  403af2:	d505      	bpl.n	403b00 <__sflush_r+0x4c>
  403af4:	6869      	ldr	r1, [r5, #4]
  403af6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403af8:	1a52      	subs	r2, r2, r1
  403afa:	b10b      	cbz	r3, 403b00 <__sflush_r+0x4c>
  403afc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403afe:	1ad2      	subs	r2, r2, r3
  403b00:	2300      	movs	r3, #0
  403b02:	69e9      	ldr	r1, [r5, #28]
  403b04:	4640      	mov	r0, r8
  403b06:	47a0      	blx	r4
  403b08:	1c44      	adds	r4, r0, #1
  403b0a:	d03c      	beq.n	403b86 <__sflush_r+0xd2>
  403b0c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403b10:	692a      	ldr	r2, [r5, #16]
  403b12:	602a      	str	r2, [r5, #0]
  403b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403b18:	2200      	movs	r2, #0
  403b1a:	81ab      	strh	r3, [r5, #12]
  403b1c:	04db      	lsls	r3, r3, #19
  403b1e:	606a      	str	r2, [r5, #4]
  403b20:	d449      	bmi.n	403bb6 <__sflush_r+0x102>
  403b22:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403b24:	f8c8 6000 	str.w	r6, [r8]
  403b28:	b311      	cbz	r1, 403b70 <__sflush_r+0xbc>
  403b2a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403b2e:	4299      	cmp	r1, r3
  403b30:	d002      	beq.n	403b38 <__sflush_r+0x84>
  403b32:	4640      	mov	r0, r8
  403b34:	f000 f9c0 	bl	403eb8 <_free_r>
  403b38:	2000      	movs	r0, #0
  403b3a:	6328      	str	r0, [r5, #48]	; 0x30
  403b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b40:	692e      	ldr	r6, [r5, #16]
  403b42:	b1ae      	cbz	r6, 403b70 <__sflush_r+0xbc>
  403b44:	682c      	ldr	r4, [r5, #0]
  403b46:	602e      	str	r6, [r5, #0]
  403b48:	0790      	lsls	r0, r2, #30
  403b4a:	bf0c      	ite	eq
  403b4c:	696b      	ldreq	r3, [r5, #20]
  403b4e:	2300      	movne	r3, #0
  403b50:	1ba4      	subs	r4, r4, r6
  403b52:	60ab      	str	r3, [r5, #8]
  403b54:	e00a      	b.n	403b6c <__sflush_r+0xb8>
  403b56:	4623      	mov	r3, r4
  403b58:	4632      	mov	r2, r6
  403b5a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403b5c:	69e9      	ldr	r1, [r5, #28]
  403b5e:	4640      	mov	r0, r8
  403b60:	47b8      	blx	r7
  403b62:	2800      	cmp	r0, #0
  403b64:	eba4 0400 	sub.w	r4, r4, r0
  403b68:	4406      	add	r6, r0
  403b6a:	dd04      	ble.n	403b76 <__sflush_r+0xc2>
  403b6c:	2c00      	cmp	r4, #0
  403b6e:	dcf2      	bgt.n	403b56 <__sflush_r+0xa2>
  403b70:	2000      	movs	r0, #0
  403b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b76:	89ab      	ldrh	r3, [r5, #12]
  403b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b7c:	81ab      	strh	r3, [r5, #12]
  403b7e:	f04f 30ff 	mov.w	r0, #4294967295
  403b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b86:	f8d8 2000 	ldr.w	r2, [r8]
  403b8a:	2a1d      	cmp	r2, #29
  403b8c:	d8f3      	bhi.n	403b76 <__sflush_r+0xc2>
  403b8e:	4b1a      	ldr	r3, [pc, #104]	; (403bf8 <__sflush_r+0x144>)
  403b90:	40d3      	lsrs	r3, r2
  403b92:	f003 0301 	and.w	r3, r3, #1
  403b96:	f083 0401 	eor.w	r4, r3, #1
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	d0eb      	beq.n	403b76 <__sflush_r+0xc2>
  403b9e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403ba2:	6929      	ldr	r1, [r5, #16]
  403ba4:	6029      	str	r1, [r5, #0]
  403ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403baa:	04d9      	lsls	r1, r3, #19
  403bac:	606c      	str	r4, [r5, #4]
  403bae:	81ab      	strh	r3, [r5, #12]
  403bb0:	d5b7      	bpl.n	403b22 <__sflush_r+0x6e>
  403bb2:	2a00      	cmp	r2, #0
  403bb4:	d1b5      	bne.n	403b22 <__sflush_r+0x6e>
  403bb6:	6528      	str	r0, [r5, #80]	; 0x50
  403bb8:	e7b3      	b.n	403b22 <__sflush_r+0x6e>
  403bba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403bbc:	2a00      	cmp	r2, #0
  403bbe:	dc88      	bgt.n	403ad2 <__sflush_r+0x1e>
  403bc0:	e7d6      	b.n	403b70 <__sflush_r+0xbc>
  403bc2:	2301      	movs	r3, #1
  403bc4:	69e9      	ldr	r1, [r5, #28]
  403bc6:	4640      	mov	r0, r8
  403bc8:	47a0      	blx	r4
  403bca:	1c43      	adds	r3, r0, #1
  403bcc:	4602      	mov	r2, r0
  403bce:	d002      	beq.n	403bd6 <__sflush_r+0x122>
  403bd0:	89ab      	ldrh	r3, [r5, #12]
  403bd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403bd4:	e78c      	b.n	403af0 <__sflush_r+0x3c>
  403bd6:	f8d8 3000 	ldr.w	r3, [r8]
  403bda:	2b00      	cmp	r3, #0
  403bdc:	d0f8      	beq.n	403bd0 <__sflush_r+0x11c>
  403bde:	2b1d      	cmp	r3, #29
  403be0:	d001      	beq.n	403be6 <__sflush_r+0x132>
  403be2:	2b16      	cmp	r3, #22
  403be4:	d102      	bne.n	403bec <__sflush_r+0x138>
  403be6:	f8c8 6000 	str.w	r6, [r8]
  403bea:	e7c1      	b.n	403b70 <__sflush_r+0xbc>
  403bec:	89ab      	ldrh	r3, [r5, #12]
  403bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bf2:	81ab      	strh	r3, [r5, #12]
  403bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bf8:	20400001 	.word	0x20400001

00403bfc <_fflush_r>:
  403bfc:	b510      	push	{r4, lr}
  403bfe:	4604      	mov	r4, r0
  403c00:	b082      	sub	sp, #8
  403c02:	b108      	cbz	r0, 403c08 <_fflush_r+0xc>
  403c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c06:	b153      	cbz	r3, 403c1e <_fflush_r+0x22>
  403c08:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  403c0c:	b908      	cbnz	r0, 403c12 <_fflush_r+0x16>
  403c0e:	b002      	add	sp, #8
  403c10:	bd10      	pop	{r4, pc}
  403c12:	4620      	mov	r0, r4
  403c14:	b002      	add	sp, #8
  403c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403c1a:	f7ff bf4b 	b.w	403ab4 <__sflush_r>
  403c1e:	9101      	str	r1, [sp, #4]
  403c20:	f000 f880 	bl	403d24 <__sinit>
  403c24:	9901      	ldr	r1, [sp, #4]
  403c26:	e7ef      	b.n	403c08 <_fflush_r+0xc>

00403c28 <_cleanup_r>:
  403c28:	4901      	ldr	r1, [pc, #4]	; (403c30 <_cleanup_r+0x8>)
  403c2a:	f000 bbaf 	b.w	40438c <_fwalk_reent>
  403c2e:	bf00      	nop
  403c30:	004054ad 	.word	0x004054ad

00403c34 <__sinit.part.1>:
  403c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c38:	4b35      	ldr	r3, [pc, #212]	; (403d10 <__sinit.part.1+0xdc>)
  403c3a:	6845      	ldr	r5, [r0, #4]
  403c3c:	63c3      	str	r3, [r0, #60]	; 0x3c
  403c3e:	2400      	movs	r4, #0
  403c40:	4607      	mov	r7, r0
  403c42:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  403c46:	2304      	movs	r3, #4
  403c48:	2103      	movs	r1, #3
  403c4a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  403c4e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  403c52:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  403c56:	b083      	sub	sp, #12
  403c58:	602c      	str	r4, [r5, #0]
  403c5a:	606c      	str	r4, [r5, #4]
  403c5c:	60ac      	str	r4, [r5, #8]
  403c5e:	666c      	str	r4, [r5, #100]	; 0x64
  403c60:	81ec      	strh	r4, [r5, #14]
  403c62:	612c      	str	r4, [r5, #16]
  403c64:	616c      	str	r4, [r5, #20]
  403c66:	61ac      	str	r4, [r5, #24]
  403c68:	81ab      	strh	r3, [r5, #12]
  403c6a:	4621      	mov	r1, r4
  403c6c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403c70:	2208      	movs	r2, #8
  403c72:	f7fe fe3d 	bl	4028f0 <memset>
  403c76:	68be      	ldr	r6, [r7, #8]
  403c78:	f8df b098 	ldr.w	fp, [pc, #152]	; 403d14 <__sinit.part.1+0xe0>
  403c7c:	f8df a098 	ldr.w	sl, [pc, #152]	; 403d18 <__sinit.part.1+0xe4>
  403c80:	f8df 9098 	ldr.w	r9, [pc, #152]	; 403d1c <__sinit.part.1+0xe8>
  403c84:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403d20 <__sinit.part.1+0xec>
  403c88:	f8c5 b020 	str.w	fp, [r5, #32]
  403c8c:	2301      	movs	r3, #1
  403c8e:	2209      	movs	r2, #9
  403c90:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403c94:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403c98:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403c9c:	61ed      	str	r5, [r5, #28]
  403c9e:	4621      	mov	r1, r4
  403ca0:	81f3      	strh	r3, [r6, #14]
  403ca2:	81b2      	strh	r2, [r6, #12]
  403ca4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  403ca8:	6034      	str	r4, [r6, #0]
  403caa:	6074      	str	r4, [r6, #4]
  403cac:	60b4      	str	r4, [r6, #8]
  403cae:	6674      	str	r4, [r6, #100]	; 0x64
  403cb0:	6134      	str	r4, [r6, #16]
  403cb2:	6174      	str	r4, [r6, #20]
  403cb4:	61b4      	str	r4, [r6, #24]
  403cb6:	2208      	movs	r2, #8
  403cb8:	9301      	str	r3, [sp, #4]
  403cba:	f7fe fe19 	bl	4028f0 <memset>
  403cbe:	68fd      	ldr	r5, [r7, #12]
  403cc0:	61f6      	str	r6, [r6, #28]
  403cc2:	2012      	movs	r0, #18
  403cc4:	2202      	movs	r2, #2
  403cc6:	f8c6 b020 	str.w	fp, [r6, #32]
  403cca:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  403cce:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  403cd2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  403cd6:	4621      	mov	r1, r4
  403cd8:	81a8      	strh	r0, [r5, #12]
  403cda:	81ea      	strh	r2, [r5, #14]
  403cdc:	602c      	str	r4, [r5, #0]
  403cde:	606c      	str	r4, [r5, #4]
  403ce0:	60ac      	str	r4, [r5, #8]
  403ce2:	666c      	str	r4, [r5, #100]	; 0x64
  403ce4:	612c      	str	r4, [r5, #16]
  403ce6:	616c      	str	r4, [r5, #20]
  403ce8:	61ac      	str	r4, [r5, #24]
  403cea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  403cee:	2208      	movs	r2, #8
  403cf0:	f7fe fdfe 	bl	4028f0 <memset>
  403cf4:	9b01      	ldr	r3, [sp, #4]
  403cf6:	61ed      	str	r5, [r5, #28]
  403cf8:	f8c5 b020 	str.w	fp, [r5, #32]
  403cfc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  403d00:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  403d04:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  403d08:	63bb      	str	r3, [r7, #56]	; 0x38
  403d0a:	b003      	add	sp, #12
  403d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d10:	00403c29 	.word	0x00403c29
  403d14:	00405109 	.word	0x00405109
  403d18:	0040512d 	.word	0x0040512d
  403d1c:	00405169 	.word	0x00405169
  403d20:	00405189 	.word	0x00405189

00403d24 <__sinit>:
  403d24:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403d26:	b103      	cbz	r3, 403d2a <__sinit+0x6>
  403d28:	4770      	bx	lr
  403d2a:	f7ff bf83 	b.w	403c34 <__sinit.part.1>
  403d2e:	bf00      	nop

00403d30 <__sfp_lock_acquire>:
  403d30:	4770      	bx	lr
  403d32:	bf00      	nop

00403d34 <__sfp_lock_release>:
  403d34:	4770      	bx	lr
  403d36:	bf00      	nop

00403d38 <__libc_fini_array>:
  403d38:	b538      	push	{r3, r4, r5, lr}
  403d3a:	4d07      	ldr	r5, [pc, #28]	; (403d58 <__libc_fini_array+0x20>)
  403d3c:	4c07      	ldr	r4, [pc, #28]	; (403d5c <__libc_fini_array+0x24>)
  403d3e:	1b2c      	subs	r4, r5, r4
  403d40:	10a4      	asrs	r4, r4, #2
  403d42:	d005      	beq.n	403d50 <__libc_fini_array+0x18>
  403d44:	3c01      	subs	r4, #1
  403d46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403d4a:	4798      	blx	r3
  403d4c:	2c00      	cmp	r4, #0
  403d4e:	d1f9      	bne.n	403d44 <__libc_fini_array+0xc>
  403d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403d54:	f001 be2c 	b.w	4059b0 <_fini>
  403d58:	004059c0 	.word	0x004059c0
  403d5c:	004059bc 	.word	0x004059bc

00403d60 <__fputwc>:
  403d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d64:	b082      	sub	sp, #8
  403d66:	4680      	mov	r8, r0
  403d68:	4689      	mov	r9, r1
  403d6a:	4614      	mov	r4, r2
  403d6c:	f000 fb3c 	bl	4043e8 <__locale_mb_cur_max>
  403d70:	2801      	cmp	r0, #1
  403d72:	d033      	beq.n	403ddc <__fputwc+0x7c>
  403d74:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403d78:	464a      	mov	r2, r9
  403d7a:	a901      	add	r1, sp, #4
  403d7c:	4640      	mov	r0, r8
  403d7e:	f001 fae3 	bl	405348 <_wcrtomb_r>
  403d82:	f1b0 3fff 	cmp.w	r0, #4294967295
  403d86:	4682      	mov	sl, r0
  403d88:	d021      	beq.n	403dce <__fputwc+0x6e>
  403d8a:	b388      	cbz	r0, 403df0 <__fputwc+0x90>
  403d8c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  403d90:	2500      	movs	r5, #0
  403d92:	e008      	b.n	403da6 <__fputwc+0x46>
  403d94:	6823      	ldr	r3, [r4, #0]
  403d96:	1c5a      	adds	r2, r3, #1
  403d98:	6022      	str	r2, [r4, #0]
  403d9a:	701e      	strb	r6, [r3, #0]
  403d9c:	3501      	adds	r5, #1
  403d9e:	4555      	cmp	r5, sl
  403da0:	d226      	bcs.n	403df0 <__fputwc+0x90>
  403da2:	ab01      	add	r3, sp, #4
  403da4:	5d5e      	ldrb	r6, [r3, r5]
  403da6:	68a3      	ldr	r3, [r4, #8]
  403da8:	3b01      	subs	r3, #1
  403daa:	2b00      	cmp	r3, #0
  403dac:	60a3      	str	r3, [r4, #8]
  403dae:	daf1      	bge.n	403d94 <__fputwc+0x34>
  403db0:	69a7      	ldr	r7, [r4, #24]
  403db2:	42bb      	cmp	r3, r7
  403db4:	4631      	mov	r1, r6
  403db6:	4622      	mov	r2, r4
  403db8:	4640      	mov	r0, r8
  403dba:	db01      	blt.n	403dc0 <__fputwc+0x60>
  403dbc:	2e0a      	cmp	r6, #10
  403dbe:	d1e9      	bne.n	403d94 <__fputwc+0x34>
  403dc0:	f001 fa6c 	bl	40529c <__swbuf_r>
  403dc4:	1c43      	adds	r3, r0, #1
  403dc6:	d1e9      	bne.n	403d9c <__fputwc+0x3c>
  403dc8:	b002      	add	sp, #8
  403dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dce:	89a3      	ldrh	r3, [r4, #12]
  403dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403dd4:	81a3      	strh	r3, [r4, #12]
  403dd6:	b002      	add	sp, #8
  403dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ddc:	f109 33ff 	add.w	r3, r9, #4294967295
  403de0:	2bfe      	cmp	r3, #254	; 0xfe
  403de2:	d8c7      	bhi.n	403d74 <__fputwc+0x14>
  403de4:	fa5f f689 	uxtb.w	r6, r9
  403de8:	4682      	mov	sl, r0
  403dea:	f88d 6004 	strb.w	r6, [sp, #4]
  403dee:	e7cf      	b.n	403d90 <__fputwc+0x30>
  403df0:	4648      	mov	r0, r9
  403df2:	b002      	add	sp, #8
  403df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403df8 <_fputwc_r>:
  403df8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403dfc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403e00:	d10a      	bne.n	403e18 <_fputwc_r+0x20>
  403e02:	b410      	push	{r4}
  403e04:	6e54      	ldr	r4, [r2, #100]	; 0x64
  403e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403e0a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  403e0e:	6654      	str	r4, [r2, #100]	; 0x64
  403e10:	8193      	strh	r3, [r2, #12]
  403e12:	bc10      	pop	{r4}
  403e14:	f7ff bfa4 	b.w	403d60 <__fputwc>
  403e18:	f7ff bfa2 	b.w	403d60 <__fputwc>

00403e1c <_malloc_trim_r>:
  403e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e1e:	4f23      	ldr	r7, [pc, #140]	; (403eac <_malloc_trim_r+0x90>)
  403e20:	460c      	mov	r4, r1
  403e22:	4606      	mov	r6, r0
  403e24:	f000 ff6a 	bl	404cfc <__malloc_lock>
  403e28:	68bb      	ldr	r3, [r7, #8]
  403e2a:	685d      	ldr	r5, [r3, #4]
  403e2c:	f025 0503 	bic.w	r5, r5, #3
  403e30:	1b29      	subs	r1, r5, r4
  403e32:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  403e36:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403e3a:	f021 010f 	bic.w	r1, r1, #15
  403e3e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403e42:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403e46:	db07      	blt.n	403e58 <_malloc_trim_r+0x3c>
  403e48:	2100      	movs	r1, #0
  403e4a:	4630      	mov	r0, r6
  403e4c:	f001 f94a 	bl	4050e4 <_sbrk_r>
  403e50:	68bb      	ldr	r3, [r7, #8]
  403e52:	442b      	add	r3, r5
  403e54:	4298      	cmp	r0, r3
  403e56:	d004      	beq.n	403e62 <_malloc_trim_r+0x46>
  403e58:	4630      	mov	r0, r6
  403e5a:	f000 ff51 	bl	404d00 <__malloc_unlock>
  403e5e:	2000      	movs	r0, #0
  403e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e62:	4261      	negs	r1, r4
  403e64:	4630      	mov	r0, r6
  403e66:	f001 f93d 	bl	4050e4 <_sbrk_r>
  403e6a:	3001      	adds	r0, #1
  403e6c:	d00d      	beq.n	403e8a <_malloc_trim_r+0x6e>
  403e6e:	4b10      	ldr	r3, [pc, #64]	; (403eb0 <_malloc_trim_r+0x94>)
  403e70:	68ba      	ldr	r2, [r7, #8]
  403e72:	6819      	ldr	r1, [r3, #0]
  403e74:	1b2d      	subs	r5, r5, r4
  403e76:	f045 0501 	orr.w	r5, r5, #1
  403e7a:	4630      	mov	r0, r6
  403e7c:	1b09      	subs	r1, r1, r4
  403e7e:	6055      	str	r5, [r2, #4]
  403e80:	6019      	str	r1, [r3, #0]
  403e82:	f000 ff3d 	bl	404d00 <__malloc_unlock>
  403e86:	2001      	movs	r0, #1
  403e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e8a:	2100      	movs	r1, #0
  403e8c:	4630      	mov	r0, r6
  403e8e:	f001 f929 	bl	4050e4 <_sbrk_r>
  403e92:	68ba      	ldr	r2, [r7, #8]
  403e94:	1a83      	subs	r3, r0, r2
  403e96:	2b0f      	cmp	r3, #15
  403e98:	ddde      	ble.n	403e58 <_malloc_trim_r+0x3c>
  403e9a:	4c06      	ldr	r4, [pc, #24]	; (403eb4 <_malloc_trim_r+0x98>)
  403e9c:	4904      	ldr	r1, [pc, #16]	; (403eb0 <_malloc_trim_r+0x94>)
  403e9e:	6824      	ldr	r4, [r4, #0]
  403ea0:	f043 0301 	orr.w	r3, r3, #1
  403ea4:	1b00      	subs	r0, r0, r4
  403ea6:	6053      	str	r3, [r2, #4]
  403ea8:	6008      	str	r0, [r1, #0]
  403eaa:	e7d5      	b.n	403e58 <_malloc_trim_r+0x3c>
  403eac:	20400458 	.word	0x20400458
  403eb0:	2040090c 	.word	0x2040090c
  403eb4:	20400864 	.word	0x20400864

00403eb8 <_free_r>:
  403eb8:	2900      	cmp	r1, #0
  403eba:	d045      	beq.n	403f48 <_free_r+0x90>
  403ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ec0:	460d      	mov	r5, r1
  403ec2:	4680      	mov	r8, r0
  403ec4:	f000 ff1a 	bl	404cfc <__malloc_lock>
  403ec8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403ecc:	496a      	ldr	r1, [pc, #424]	; (404078 <_free_r+0x1c0>)
  403ece:	f027 0301 	bic.w	r3, r7, #1
  403ed2:	f1a5 0408 	sub.w	r4, r5, #8
  403ed6:	18e2      	adds	r2, r4, r3
  403ed8:	688e      	ldr	r6, [r1, #8]
  403eda:	6850      	ldr	r0, [r2, #4]
  403edc:	42b2      	cmp	r2, r6
  403ede:	f020 0003 	bic.w	r0, r0, #3
  403ee2:	d062      	beq.n	403faa <_free_r+0xf2>
  403ee4:	07fe      	lsls	r6, r7, #31
  403ee6:	6050      	str	r0, [r2, #4]
  403ee8:	d40b      	bmi.n	403f02 <_free_r+0x4a>
  403eea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403eee:	1be4      	subs	r4, r4, r7
  403ef0:	f101 0e08 	add.w	lr, r1, #8
  403ef4:	68a5      	ldr	r5, [r4, #8]
  403ef6:	4575      	cmp	r5, lr
  403ef8:	443b      	add	r3, r7
  403efa:	d06f      	beq.n	403fdc <_free_r+0x124>
  403efc:	68e7      	ldr	r7, [r4, #12]
  403efe:	60ef      	str	r7, [r5, #12]
  403f00:	60bd      	str	r5, [r7, #8]
  403f02:	1815      	adds	r5, r2, r0
  403f04:	686d      	ldr	r5, [r5, #4]
  403f06:	07ed      	lsls	r5, r5, #31
  403f08:	d542      	bpl.n	403f90 <_free_r+0xd8>
  403f0a:	f043 0201 	orr.w	r2, r3, #1
  403f0e:	6062      	str	r2, [r4, #4]
  403f10:	50e3      	str	r3, [r4, r3]
  403f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403f16:	d218      	bcs.n	403f4a <_free_r+0x92>
  403f18:	08db      	lsrs	r3, r3, #3
  403f1a:	1c5a      	adds	r2, r3, #1
  403f1c:	684d      	ldr	r5, [r1, #4]
  403f1e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  403f22:	60a7      	str	r7, [r4, #8]
  403f24:	2001      	movs	r0, #1
  403f26:	109b      	asrs	r3, r3, #2
  403f28:	fa00 f303 	lsl.w	r3, r0, r3
  403f2c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  403f30:	431d      	orrs	r5, r3
  403f32:	3808      	subs	r0, #8
  403f34:	60e0      	str	r0, [r4, #12]
  403f36:	604d      	str	r5, [r1, #4]
  403f38:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  403f3c:	60fc      	str	r4, [r7, #12]
  403f3e:	4640      	mov	r0, r8
  403f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f44:	f000 bedc 	b.w	404d00 <__malloc_unlock>
  403f48:	4770      	bx	lr
  403f4a:	0a5a      	lsrs	r2, r3, #9
  403f4c:	2a04      	cmp	r2, #4
  403f4e:	d853      	bhi.n	403ff8 <_free_r+0x140>
  403f50:	099a      	lsrs	r2, r3, #6
  403f52:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403f56:	007f      	lsls	r7, r7, #1
  403f58:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403f5c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  403f60:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  403f64:	4944      	ldr	r1, [pc, #272]	; (404078 <_free_r+0x1c0>)
  403f66:	3808      	subs	r0, #8
  403f68:	4290      	cmp	r0, r2
  403f6a:	d04d      	beq.n	404008 <_free_r+0x150>
  403f6c:	6851      	ldr	r1, [r2, #4]
  403f6e:	f021 0103 	bic.w	r1, r1, #3
  403f72:	428b      	cmp	r3, r1
  403f74:	d202      	bcs.n	403f7c <_free_r+0xc4>
  403f76:	6892      	ldr	r2, [r2, #8]
  403f78:	4290      	cmp	r0, r2
  403f7a:	d1f7      	bne.n	403f6c <_free_r+0xb4>
  403f7c:	68d0      	ldr	r0, [r2, #12]
  403f7e:	60e0      	str	r0, [r4, #12]
  403f80:	60a2      	str	r2, [r4, #8]
  403f82:	6084      	str	r4, [r0, #8]
  403f84:	60d4      	str	r4, [r2, #12]
  403f86:	4640      	mov	r0, r8
  403f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f8c:	f000 beb8 	b.w	404d00 <__malloc_unlock>
  403f90:	6895      	ldr	r5, [r2, #8]
  403f92:	4f3a      	ldr	r7, [pc, #232]	; (40407c <_free_r+0x1c4>)
  403f94:	42bd      	cmp	r5, r7
  403f96:	4403      	add	r3, r0
  403f98:	d03f      	beq.n	40401a <_free_r+0x162>
  403f9a:	68d0      	ldr	r0, [r2, #12]
  403f9c:	60e8      	str	r0, [r5, #12]
  403f9e:	f043 0201 	orr.w	r2, r3, #1
  403fa2:	6085      	str	r5, [r0, #8]
  403fa4:	6062      	str	r2, [r4, #4]
  403fa6:	50e3      	str	r3, [r4, r3]
  403fa8:	e7b3      	b.n	403f12 <_free_r+0x5a>
  403faa:	07ff      	lsls	r7, r7, #31
  403fac:	4403      	add	r3, r0
  403fae:	d407      	bmi.n	403fc0 <_free_r+0x108>
  403fb0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403fb4:	1aa4      	subs	r4, r4, r2
  403fb6:	4413      	add	r3, r2
  403fb8:	68a0      	ldr	r0, [r4, #8]
  403fba:	68e2      	ldr	r2, [r4, #12]
  403fbc:	60c2      	str	r2, [r0, #12]
  403fbe:	6090      	str	r0, [r2, #8]
  403fc0:	4a2f      	ldr	r2, [pc, #188]	; (404080 <_free_r+0x1c8>)
  403fc2:	6812      	ldr	r2, [r2, #0]
  403fc4:	f043 0001 	orr.w	r0, r3, #1
  403fc8:	4293      	cmp	r3, r2
  403fca:	6060      	str	r0, [r4, #4]
  403fcc:	608c      	str	r4, [r1, #8]
  403fce:	d3b6      	bcc.n	403f3e <_free_r+0x86>
  403fd0:	4b2c      	ldr	r3, [pc, #176]	; (404084 <_free_r+0x1cc>)
  403fd2:	4640      	mov	r0, r8
  403fd4:	6819      	ldr	r1, [r3, #0]
  403fd6:	f7ff ff21 	bl	403e1c <_malloc_trim_r>
  403fda:	e7b0      	b.n	403f3e <_free_r+0x86>
  403fdc:	1811      	adds	r1, r2, r0
  403fde:	6849      	ldr	r1, [r1, #4]
  403fe0:	07c9      	lsls	r1, r1, #31
  403fe2:	d444      	bmi.n	40406e <_free_r+0x1b6>
  403fe4:	6891      	ldr	r1, [r2, #8]
  403fe6:	68d2      	ldr	r2, [r2, #12]
  403fe8:	60ca      	str	r2, [r1, #12]
  403fea:	4403      	add	r3, r0
  403fec:	f043 0001 	orr.w	r0, r3, #1
  403ff0:	6091      	str	r1, [r2, #8]
  403ff2:	6060      	str	r0, [r4, #4]
  403ff4:	50e3      	str	r3, [r4, r3]
  403ff6:	e7a2      	b.n	403f3e <_free_r+0x86>
  403ff8:	2a14      	cmp	r2, #20
  403ffa:	d817      	bhi.n	40402c <_free_r+0x174>
  403ffc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404000:	007f      	lsls	r7, r7, #1
  404002:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404006:	e7a9      	b.n	403f5c <_free_r+0xa4>
  404008:	10aa      	asrs	r2, r5, #2
  40400a:	684b      	ldr	r3, [r1, #4]
  40400c:	2501      	movs	r5, #1
  40400e:	fa05 f202 	lsl.w	r2, r5, r2
  404012:	4313      	orrs	r3, r2
  404014:	604b      	str	r3, [r1, #4]
  404016:	4602      	mov	r2, r0
  404018:	e7b1      	b.n	403f7e <_free_r+0xc6>
  40401a:	f043 0201 	orr.w	r2, r3, #1
  40401e:	614c      	str	r4, [r1, #20]
  404020:	610c      	str	r4, [r1, #16]
  404022:	60e5      	str	r5, [r4, #12]
  404024:	60a5      	str	r5, [r4, #8]
  404026:	6062      	str	r2, [r4, #4]
  404028:	50e3      	str	r3, [r4, r3]
  40402a:	e788      	b.n	403f3e <_free_r+0x86>
  40402c:	2a54      	cmp	r2, #84	; 0x54
  40402e:	d806      	bhi.n	40403e <_free_r+0x186>
  404030:	0b1a      	lsrs	r2, r3, #12
  404032:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404036:	007f      	lsls	r7, r7, #1
  404038:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40403c:	e78e      	b.n	403f5c <_free_r+0xa4>
  40403e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404042:	d806      	bhi.n	404052 <_free_r+0x19a>
  404044:	0bda      	lsrs	r2, r3, #15
  404046:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40404a:	007f      	lsls	r7, r7, #1
  40404c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404050:	e784      	b.n	403f5c <_free_r+0xa4>
  404052:	f240 5054 	movw	r0, #1364	; 0x554
  404056:	4282      	cmp	r2, r0
  404058:	d806      	bhi.n	404068 <_free_r+0x1b0>
  40405a:	0c9a      	lsrs	r2, r3, #18
  40405c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404060:	007f      	lsls	r7, r7, #1
  404062:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404066:	e779      	b.n	403f5c <_free_r+0xa4>
  404068:	27fe      	movs	r7, #254	; 0xfe
  40406a:	257e      	movs	r5, #126	; 0x7e
  40406c:	e776      	b.n	403f5c <_free_r+0xa4>
  40406e:	f043 0201 	orr.w	r2, r3, #1
  404072:	6062      	str	r2, [r4, #4]
  404074:	50e3      	str	r3, [r4, r3]
  404076:	e762      	b.n	403f3e <_free_r+0x86>
  404078:	20400458 	.word	0x20400458
  40407c:	20400460 	.word	0x20400460
  404080:	20400860 	.word	0x20400860
  404084:	20400908 	.word	0x20400908

00404088 <__sfvwrite_r>:
  404088:	6893      	ldr	r3, [r2, #8]
  40408a:	2b00      	cmp	r3, #0
  40408c:	d076      	beq.n	40417c <__sfvwrite_r+0xf4>
  40408e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404092:	898b      	ldrh	r3, [r1, #12]
  404094:	b085      	sub	sp, #20
  404096:	460c      	mov	r4, r1
  404098:	0719      	lsls	r1, r3, #28
  40409a:	9001      	str	r0, [sp, #4]
  40409c:	4616      	mov	r6, r2
  40409e:	d529      	bpl.n	4040f4 <__sfvwrite_r+0x6c>
  4040a0:	6922      	ldr	r2, [r4, #16]
  4040a2:	b33a      	cbz	r2, 4040f4 <__sfvwrite_r+0x6c>
  4040a4:	f003 0802 	and.w	r8, r3, #2
  4040a8:	fa1f f088 	uxth.w	r0, r8
  4040ac:	6835      	ldr	r5, [r6, #0]
  4040ae:	2800      	cmp	r0, #0
  4040b0:	d02f      	beq.n	404112 <__sfvwrite_r+0x8a>
  4040b2:	f04f 0900 	mov.w	r9, #0
  4040b6:	4fb4      	ldr	r7, [pc, #720]	; (404388 <__sfvwrite_r+0x300>)
  4040b8:	46c8      	mov	r8, r9
  4040ba:	46b2      	mov	sl, r6
  4040bc:	45b8      	cmp	r8, r7
  4040be:	4643      	mov	r3, r8
  4040c0:	464a      	mov	r2, r9
  4040c2:	bf28      	it	cs
  4040c4:	463b      	movcs	r3, r7
  4040c6:	9801      	ldr	r0, [sp, #4]
  4040c8:	f1b8 0f00 	cmp.w	r8, #0
  4040cc:	d050      	beq.n	404170 <__sfvwrite_r+0xe8>
  4040ce:	69e1      	ldr	r1, [r4, #28]
  4040d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4040d2:	47b0      	blx	r6
  4040d4:	2800      	cmp	r0, #0
  4040d6:	dd71      	ble.n	4041bc <__sfvwrite_r+0x134>
  4040d8:	f8da 3008 	ldr.w	r3, [sl, #8]
  4040dc:	1a1b      	subs	r3, r3, r0
  4040de:	4481      	add	r9, r0
  4040e0:	ebc0 0808 	rsb	r8, r0, r8
  4040e4:	f8ca 3008 	str.w	r3, [sl, #8]
  4040e8:	2b00      	cmp	r3, #0
  4040ea:	d1e7      	bne.n	4040bc <__sfvwrite_r+0x34>
  4040ec:	2000      	movs	r0, #0
  4040ee:	b005      	add	sp, #20
  4040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040f4:	4621      	mov	r1, r4
  4040f6:	9801      	ldr	r0, [sp, #4]
  4040f8:	f7ff fc68 	bl	4039cc <__swsetup_r>
  4040fc:	2800      	cmp	r0, #0
  4040fe:	f040 813a 	bne.w	404376 <__sfvwrite_r+0x2ee>
  404102:	89a3      	ldrh	r3, [r4, #12]
  404104:	6835      	ldr	r5, [r6, #0]
  404106:	f003 0802 	and.w	r8, r3, #2
  40410a:	fa1f f088 	uxth.w	r0, r8
  40410e:	2800      	cmp	r0, #0
  404110:	d1cf      	bne.n	4040b2 <__sfvwrite_r+0x2a>
  404112:	f013 0901 	ands.w	r9, r3, #1
  404116:	d15b      	bne.n	4041d0 <__sfvwrite_r+0x148>
  404118:	464f      	mov	r7, r9
  40411a:	9602      	str	r6, [sp, #8]
  40411c:	b31f      	cbz	r7, 404166 <__sfvwrite_r+0xde>
  40411e:	059a      	lsls	r2, r3, #22
  404120:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404124:	d52c      	bpl.n	404180 <__sfvwrite_r+0xf8>
  404126:	4547      	cmp	r7, r8
  404128:	46c2      	mov	sl, r8
  40412a:	f0c0 80a4 	bcc.w	404276 <__sfvwrite_r+0x1ee>
  40412e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404132:	f040 80b1 	bne.w	404298 <__sfvwrite_r+0x210>
  404136:	6820      	ldr	r0, [r4, #0]
  404138:	4652      	mov	r2, sl
  40413a:	4649      	mov	r1, r9
  40413c:	f000 fd7a 	bl	404c34 <memmove>
  404140:	68a0      	ldr	r0, [r4, #8]
  404142:	6823      	ldr	r3, [r4, #0]
  404144:	ebc8 0000 	rsb	r0, r8, r0
  404148:	4453      	add	r3, sl
  40414a:	60a0      	str	r0, [r4, #8]
  40414c:	6023      	str	r3, [r4, #0]
  40414e:	4638      	mov	r0, r7
  404150:	9a02      	ldr	r2, [sp, #8]
  404152:	6893      	ldr	r3, [r2, #8]
  404154:	1a1b      	subs	r3, r3, r0
  404156:	4481      	add	r9, r0
  404158:	1a3f      	subs	r7, r7, r0
  40415a:	6093      	str	r3, [r2, #8]
  40415c:	2b00      	cmp	r3, #0
  40415e:	d0c5      	beq.n	4040ec <__sfvwrite_r+0x64>
  404160:	89a3      	ldrh	r3, [r4, #12]
  404162:	2f00      	cmp	r7, #0
  404164:	d1db      	bne.n	40411e <__sfvwrite_r+0x96>
  404166:	f8d5 9000 	ldr.w	r9, [r5]
  40416a:	686f      	ldr	r7, [r5, #4]
  40416c:	3508      	adds	r5, #8
  40416e:	e7d5      	b.n	40411c <__sfvwrite_r+0x94>
  404170:	f8d5 9000 	ldr.w	r9, [r5]
  404174:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404178:	3508      	adds	r5, #8
  40417a:	e79f      	b.n	4040bc <__sfvwrite_r+0x34>
  40417c:	2000      	movs	r0, #0
  40417e:	4770      	bx	lr
  404180:	6820      	ldr	r0, [r4, #0]
  404182:	6923      	ldr	r3, [r4, #16]
  404184:	4298      	cmp	r0, r3
  404186:	d803      	bhi.n	404190 <__sfvwrite_r+0x108>
  404188:	6961      	ldr	r1, [r4, #20]
  40418a:	428f      	cmp	r7, r1
  40418c:	f080 80b7 	bcs.w	4042fe <__sfvwrite_r+0x276>
  404190:	45b8      	cmp	r8, r7
  404192:	bf28      	it	cs
  404194:	46b8      	movcs	r8, r7
  404196:	4642      	mov	r2, r8
  404198:	4649      	mov	r1, r9
  40419a:	f000 fd4b 	bl	404c34 <memmove>
  40419e:	68a3      	ldr	r3, [r4, #8]
  4041a0:	6822      	ldr	r2, [r4, #0]
  4041a2:	ebc8 0303 	rsb	r3, r8, r3
  4041a6:	4442      	add	r2, r8
  4041a8:	60a3      	str	r3, [r4, #8]
  4041aa:	6022      	str	r2, [r4, #0]
  4041ac:	2b00      	cmp	r3, #0
  4041ae:	d149      	bne.n	404244 <__sfvwrite_r+0x1bc>
  4041b0:	4621      	mov	r1, r4
  4041b2:	9801      	ldr	r0, [sp, #4]
  4041b4:	f7ff fd22 	bl	403bfc <_fflush_r>
  4041b8:	2800      	cmp	r0, #0
  4041ba:	d043      	beq.n	404244 <__sfvwrite_r+0x1bc>
  4041bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041c4:	f04f 30ff 	mov.w	r0, #4294967295
  4041c8:	81a3      	strh	r3, [r4, #12]
  4041ca:	b005      	add	sp, #20
  4041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041d0:	4680      	mov	r8, r0
  4041d2:	9002      	str	r0, [sp, #8]
  4041d4:	4682      	mov	sl, r0
  4041d6:	4681      	mov	r9, r0
  4041d8:	f1b9 0f00 	cmp.w	r9, #0
  4041dc:	d02a      	beq.n	404234 <__sfvwrite_r+0x1ac>
  4041de:	9b02      	ldr	r3, [sp, #8]
  4041e0:	2b00      	cmp	r3, #0
  4041e2:	d04c      	beq.n	40427e <__sfvwrite_r+0x1f6>
  4041e4:	6820      	ldr	r0, [r4, #0]
  4041e6:	6923      	ldr	r3, [r4, #16]
  4041e8:	6962      	ldr	r2, [r4, #20]
  4041ea:	45c8      	cmp	r8, r9
  4041ec:	46c3      	mov	fp, r8
  4041ee:	bf28      	it	cs
  4041f0:	46cb      	movcs	fp, r9
  4041f2:	4298      	cmp	r0, r3
  4041f4:	465f      	mov	r7, fp
  4041f6:	d904      	bls.n	404202 <__sfvwrite_r+0x17a>
  4041f8:	68a3      	ldr	r3, [r4, #8]
  4041fa:	4413      	add	r3, r2
  4041fc:	459b      	cmp	fp, r3
  4041fe:	f300 8090 	bgt.w	404322 <__sfvwrite_r+0x29a>
  404202:	4593      	cmp	fp, r2
  404204:	db20      	blt.n	404248 <__sfvwrite_r+0x1c0>
  404206:	4613      	mov	r3, r2
  404208:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40420a:	69e1      	ldr	r1, [r4, #28]
  40420c:	9801      	ldr	r0, [sp, #4]
  40420e:	4652      	mov	r2, sl
  404210:	47b8      	blx	r7
  404212:	1e07      	subs	r7, r0, #0
  404214:	ddd2      	ble.n	4041bc <__sfvwrite_r+0x134>
  404216:	ebb8 0807 	subs.w	r8, r8, r7
  40421a:	d023      	beq.n	404264 <__sfvwrite_r+0x1dc>
  40421c:	68b3      	ldr	r3, [r6, #8]
  40421e:	1bdb      	subs	r3, r3, r7
  404220:	44ba      	add	sl, r7
  404222:	ebc7 0909 	rsb	r9, r7, r9
  404226:	60b3      	str	r3, [r6, #8]
  404228:	2b00      	cmp	r3, #0
  40422a:	f43f af5f 	beq.w	4040ec <__sfvwrite_r+0x64>
  40422e:	f1b9 0f00 	cmp.w	r9, #0
  404232:	d1d4      	bne.n	4041de <__sfvwrite_r+0x156>
  404234:	2300      	movs	r3, #0
  404236:	f8d5 a000 	ldr.w	sl, [r5]
  40423a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40423e:	9302      	str	r3, [sp, #8]
  404240:	3508      	adds	r5, #8
  404242:	e7c9      	b.n	4041d8 <__sfvwrite_r+0x150>
  404244:	4640      	mov	r0, r8
  404246:	e783      	b.n	404150 <__sfvwrite_r+0xc8>
  404248:	465a      	mov	r2, fp
  40424a:	4651      	mov	r1, sl
  40424c:	f000 fcf2 	bl	404c34 <memmove>
  404250:	68a2      	ldr	r2, [r4, #8]
  404252:	6823      	ldr	r3, [r4, #0]
  404254:	ebcb 0202 	rsb	r2, fp, r2
  404258:	445b      	add	r3, fp
  40425a:	ebb8 0807 	subs.w	r8, r8, r7
  40425e:	60a2      	str	r2, [r4, #8]
  404260:	6023      	str	r3, [r4, #0]
  404262:	d1db      	bne.n	40421c <__sfvwrite_r+0x194>
  404264:	4621      	mov	r1, r4
  404266:	9801      	ldr	r0, [sp, #4]
  404268:	f7ff fcc8 	bl	403bfc <_fflush_r>
  40426c:	2800      	cmp	r0, #0
  40426e:	d1a5      	bne.n	4041bc <__sfvwrite_r+0x134>
  404270:	f8cd 8008 	str.w	r8, [sp, #8]
  404274:	e7d2      	b.n	40421c <__sfvwrite_r+0x194>
  404276:	6820      	ldr	r0, [r4, #0]
  404278:	46b8      	mov	r8, r7
  40427a:	46ba      	mov	sl, r7
  40427c:	e75c      	b.n	404138 <__sfvwrite_r+0xb0>
  40427e:	464a      	mov	r2, r9
  404280:	210a      	movs	r1, #10
  404282:	4650      	mov	r0, sl
  404284:	f000 fbec 	bl	404a60 <memchr>
  404288:	2800      	cmp	r0, #0
  40428a:	d06f      	beq.n	40436c <__sfvwrite_r+0x2e4>
  40428c:	3001      	adds	r0, #1
  40428e:	2301      	movs	r3, #1
  404290:	ebca 0800 	rsb	r8, sl, r0
  404294:	9302      	str	r3, [sp, #8]
  404296:	e7a5      	b.n	4041e4 <__sfvwrite_r+0x15c>
  404298:	6962      	ldr	r2, [r4, #20]
  40429a:	6820      	ldr	r0, [r4, #0]
  40429c:	6921      	ldr	r1, [r4, #16]
  40429e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4042a2:	ebc1 0a00 	rsb	sl, r1, r0
  4042a6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4042aa:	f10a 0001 	add.w	r0, sl, #1
  4042ae:	ea4f 0868 	mov.w	r8, r8, asr #1
  4042b2:	4438      	add	r0, r7
  4042b4:	4540      	cmp	r0, r8
  4042b6:	4642      	mov	r2, r8
  4042b8:	bf84      	itt	hi
  4042ba:	4680      	movhi	r8, r0
  4042bc:	4642      	movhi	r2, r8
  4042be:	055b      	lsls	r3, r3, #21
  4042c0:	d542      	bpl.n	404348 <__sfvwrite_r+0x2c0>
  4042c2:	4611      	mov	r1, r2
  4042c4:	9801      	ldr	r0, [sp, #4]
  4042c6:	f000 f911 	bl	4044ec <_malloc_r>
  4042ca:	4683      	mov	fp, r0
  4042cc:	2800      	cmp	r0, #0
  4042ce:	d055      	beq.n	40437c <__sfvwrite_r+0x2f4>
  4042d0:	4652      	mov	r2, sl
  4042d2:	6921      	ldr	r1, [r4, #16]
  4042d4:	f000 fc14 	bl	404b00 <memcpy>
  4042d8:	89a3      	ldrh	r3, [r4, #12]
  4042da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042e2:	81a3      	strh	r3, [r4, #12]
  4042e4:	ebca 0308 	rsb	r3, sl, r8
  4042e8:	eb0b 000a 	add.w	r0, fp, sl
  4042ec:	f8c4 8014 	str.w	r8, [r4, #20]
  4042f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4042f4:	6020      	str	r0, [r4, #0]
  4042f6:	60a3      	str	r3, [r4, #8]
  4042f8:	46b8      	mov	r8, r7
  4042fa:	46ba      	mov	sl, r7
  4042fc:	e71c      	b.n	404138 <__sfvwrite_r+0xb0>
  4042fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  404302:	42bb      	cmp	r3, r7
  404304:	bf28      	it	cs
  404306:	463b      	movcs	r3, r7
  404308:	464a      	mov	r2, r9
  40430a:	fb93 f3f1 	sdiv	r3, r3, r1
  40430e:	9801      	ldr	r0, [sp, #4]
  404310:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404312:	fb01 f303 	mul.w	r3, r1, r3
  404316:	69e1      	ldr	r1, [r4, #28]
  404318:	47b0      	blx	r6
  40431a:	2800      	cmp	r0, #0
  40431c:	f73f af18 	bgt.w	404150 <__sfvwrite_r+0xc8>
  404320:	e74c      	b.n	4041bc <__sfvwrite_r+0x134>
  404322:	461a      	mov	r2, r3
  404324:	4651      	mov	r1, sl
  404326:	9303      	str	r3, [sp, #12]
  404328:	f000 fc84 	bl	404c34 <memmove>
  40432c:	6822      	ldr	r2, [r4, #0]
  40432e:	9b03      	ldr	r3, [sp, #12]
  404330:	9801      	ldr	r0, [sp, #4]
  404332:	441a      	add	r2, r3
  404334:	6022      	str	r2, [r4, #0]
  404336:	4621      	mov	r1, r4
  404338:	f7ff fc60 	bl	403bfc <_fflush_r>
  40433c:	9b03      	ldr	r3, [sp, #12]
  40433e:	2800      	cmp	r0, #0
  404340:	f47f af3c 	bne.w	4041bc <__sfvwrite_r+0x134>
  404344:	461f      	mov	r7, r3
  404346:	e766      	b.n	404216 <__sfvwrite_r+0x18e>
  404348:	9801      	ldr	r0, [sp, #4]
  40434a:	f000 fcdb 	bl	404d04 <_realloc_r>
  40434e:	4683      	mov	fp, r0
  404350:	2800      	cmp	r0, #0
  404352:	d1c7      	bne.n	4042e4 <__sfvwrite_r+0x25c>
  404354:	9d01      	ldr	r5, [sp, #4]
  404356:	6921      	ldr	r1, [r4, #16]
  404358:	4628      	mov	r0, r5
  40435a:	f7ff fdad 	bl	403eb8 <_free_r>
  40435e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404362:	220c      	movs	r2, #12
  404364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404368:	602a      	str	r2, [r5, #0]
  40436a:	e729      	b.n	4041c0 <__sfvwrite_r+0x138>
  40436c:	2301      	movs	r3, #1
  40436e:	f109 0801 	add.w	r8, r9, #1
  404372:	9302      	str	r3, [sp, #8]
  404374:	e736      	b.n	4041e4 <__sfvwrite_r+0x15c>
  404376:	f04f 30ff 	mov.w	r0, #4294967295
  40437a:	e6b8      	b.n	4040ee <__sfvwrite_r+0x66>
  40437c:	9a01      	ldr	r2, [sp, #4]
  40437e:	230c      	movs	r3, #12
  404380:	6013      	str	r3, [r2, #0]
  404382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404386:	e71b      	b.n	4041c0 <__sfvwrite_r+0x138>
  404388:	7ffffc00 	.word	0x7ffffc00

0040438c <_fwalk_reent>:
  40438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404390:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404394:	d01f      	beq.n	4043d6 <_fwalk_reent+0x4a>
  404396:	4688      	mov	r8, r1
  404398:	4606      	mov	r6, r0
  40439a:	f04f 0900 	mov.w	r9, #0
  40439e:	687d      	ldr	r5, [r7, #4]
  4043a0:	68bc      	ldr	r4, [r7, #8]
  4043a2:	3d01      	subs	r5, #1
  4043a4:	d411      	bmi.n	4043ca <_fwalk_reent+0x3e>
  4043a6:	89a3      	ldrh	r3, [r4, #12]
  4043a8:	2b01      	cmp	r3, #1
  4043aa:	f105 35ff 	add.w	r5, r5, #4294967295
  4043ae:	d908      	bls.n	4043c2 <_fwalk_reent+0x36>
  4043b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4043b4:	3301      	adds	r3, #1
  4043b6:	4621      	mov	r1, r4
  4043b8:	4630      	mov	r0, r6
  4043ba:	d002      	beq.n	4043c2 <_fwalk_reent+0x36>
  4043bc:	47c0      	blx	r8
  4043be:	ea49 0900 	orr.w	r9, r9, r0
  4043c2:	1c6b      	adds	r3, r5, #1
  4043c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4043c8:	d1ed      	bne.n	4043a6 <_fwalk_reent+0x1a>
  4043ca:	683f      	ldr	r7, [r7, #0]
  4043cc:	2f00      	cmp	r7, #0
  4043ce:	d1e6      	bne.n	40439e <_fwalk_reent+0x12>
  4043d0:	4648      	mov	r0, r9
  4043d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043d6:	46b9      	mov	r9, r7
  4043d8:	4648      	mov	r0, r9
  4043da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043de:	bf00      	nop

004043e0 <__locale_charset>:
  4043e0:	4800      	ldr	r0, [pc, #0]	; (4043e4 <__locale_charset+0x4>)
  4043e2:	4770      	bx	lr
  4043e4:	20400434 	.word	0x20400434

004043e8 <__locale_mb_cur_max>:
  4043e8:	4b01      	ldr	r3, [pc, #4]	; (4043f0 <__locale_mb_cur_max+0x8>)
  4043ea:	6818      	ldr	r0, [r3, #0]
  4043ec:	4770      	bx	lr
  4043ee:	bf00      	nop
  4043f0:	20400454 	.word	0x20400454

004043f4 <__swhatbuf_r>:
  4043f4:	b570      	push	{r4, r5, r6, lr}
  4043f6:	460d      	mov	r5, r1
  4043f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043fc:	2900      	cmp	r1, #0
  4043fe:	b090      	sub	sp, #64	; 0x40
  404400:	4614      	mov	r4, r2
  404402:	461e      	mov	r6, r3
  404404:	db14      	blt.n	404430 <__swhatbuf_r+0x3c>
  404406:	aa01      	add	r2, sp, #4
  404408:	f001 f892 	bl	405530 <_fstat_r>
  40440c:	2800      	cmp	r0, #0
  40440e:	db0f      	blt.n	404430 <__swhatbuf_r+0x3c>
  404410:	9a02      	ldr	r2, [sp, #8]
  404412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404416:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40441a:	fab2 f282 	clz	r2, r2
  40441e:	0952      	lsrs	r2, r2, #5
  404420:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404424:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404428:	6032      	str	r2, [r6, #0]
  40442a:	6023      	str	r3, [r4, #0]
  40442c:	b010      	add	sp, #64	; 0x40
  40442e:	bd70      	pop	{r4, r5, r6, pc}
  404430:	89a8      	ldrh	r0, [r5, #12]
  404432:	f000 0080 	and.w	r0, r0, #128	; 0x80
  404436:	b282      	uxth	r2, r0
  404438:	2000      	movs	r0, #0
  40443a:	6030      	str	r0, [r6, #0]
  40443c:	b11a      	cbz	r2, 404446 <__swhatbuf_r+0x52>
  40443e:	2340      	movs	r3, #64	; 0x40
  404440:	6023      	str	r3, [r4, #0]
  404442:	b010      	add	sp, #64	; 0x40
  404444:	bd70      	pop	{r4, r5, r6, pc}
  404446:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40444a:	4610      	mov	r0, r2
  40444c:	6023      	str	r3, [r4, #0]
  40444e:	b010      	add	sp, #64	; 0x40
  404450:	bd70      	pop	{r4, r5, r6, pc}
  404452:	bf00      	nop

00404454 <__smakebuf_r>:
  404454:	898a      	ldrh	r2, [r1, #12]
  404456:	0792      	lsls	r2, r2, #30
  404458:	460b      	mov	r3, r1
  40445a:	d506      	bpl.n	40446a <__smakebuf_r+0x16>
  40445c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404460:	2101      	movs	r1, #1
  404462:	601a      	str	r2, [r3, #0]
  404464:	611a      	str	r2, [r3, #16]
  404466:	6159      	str	r1, [r3, #20]
  404468:	4770      	bx	lr
  40446a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40446c:	b083      	sub	sp, #12
  40446e:	ab01      	add	r3, sp, #4
  404470:	466a      	mov	r2, sp
  404472:	460c      	mov	r4, r1
  404474:	4605      	mov	r5, r0
  404476:	f7ff ffbd 	bl	4043f4 <__swhatbuf_r>
  40447a:	9900      	ldr	r1, [sp, #0]
  40447c:	4606      	mov	r6, r0
  40447e:	4628      	mov	r0, r5
  404480:	f000 f834 	bl	4044ec <_malloc_r>
  404484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404488:	b1d0      	cbz	r0, 4044c0 <__smakebuf_r+0x6c>
  40448a:	9a01      	ldr	r2, [sp, #4]
  40448c:	4f12      	ldr	r7, [pc, #72]	; (4044d8 <__smakebuf_r+0x84>)
  40448e:	9900      	ldr	r1, [sp, #0]
  404490:	63ef      	str	r7, [r5, #60]	; 0x3c
  404492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404496:	81a3      	strh	r3, [r4, #12]
  404498:	6020      	str	r0, [r4, #0]
  40449a:	6120      	str	r0, [r4, #16]
  40449c:	6161      	str	r1, [r4, #20]
  40449e:	b91a      	cbnz	r2, 4044a8 <__smakebuf_r+0x54>
  4044a0:	4333      	orrs	r3, r6
  4044a2:	81a3      	strh	r3, [r4, #12]
  4044a4:	b003      	add	sp, #12
  4044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044a8:	4628      	mov	r0, r5
  4044aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4044ae:	f001 f853 	bl	405558 <_isatty_r>
  4044b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044b6:	2800      	cmp	r0, #0
  4044b8:	d0f2      	beq.n	4044a0 <__smakebuf_r+0x4c>
  4044ba:	f043 0301 	orr.w	r3, r3, #1
  4044be:	e7ef      	b.n	4044a0 <__smakebuf_r+0x4c>
  4044c0:	059a      	lsls	r2, r3, #22
  4044c2:	d4ef      	bmi.n	4044a4 <__smakebuf_r+0x50>
  4044c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4044c8:	f043 0302 	orr.w	r3, r3, #2
  4044cc:	2101      	movs	r1, #1
  4044ce:	81a3      	strh	r3, [r4, #12]
  4044d0:	6022      	str	r2, [r4, #0]
  4044d2:	6122      	str	r2, [r4, #16]
  4044d4:	6161      	str	r1, [r4, #20]
  4044d6:	e7e5      	b.n	4044a4 <__smakebuf_r+0x50>
  4044d8:	00403c29 	.word	0x00403c29

004044dc <malloc>:
  4044dc:	4b02      	ldr	r3, [pc, #8]	; (4044e8 <malloc+0xc>)
  4044de:	4601      	mov	r1, r0
  4044e0:	6818      	ldr	r0, [r3, #0]
  4044e2:	f000 b803 	b.w	4044ec <_malloc_r>
  4044e6:	bf00      	nop
  4044e8:	20400430 	.word	0x20400430

004044ec <_malloc_r>:
  4044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044f0:	f101 050b 	add.w	r5, r1, #11
  4044f4:	2d16      	cmp	r5, #22
  4044f6:	b083      	sub	sp, #12
  4044f8:	4606      	mov	r6, r0
  4044fa:	f240 809f 	bls.w	40463c <_malloc_r+0x150>
  4044fe:	f035 0507 	bics.w	r5, r5, #7
  404502:	f100 80bf 	bmi.w	404684 <_malloc_r+0x198>
  404506:	42a9      	cmp	r1, r5
  404508:	f200 80bc 	bhi.w	404684 <_malloc_r+0x198>
  40450c:	f000 fbf6 	bl	404cfc <__malloc_lock>
  404510:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  404514:	f0c0 829c 	bcc.w	404a50 <_malloc_r+0x564>
  404518:	0a6b      	lsrs	r3, r5, #9
  40451a:	f000 80ba 	beq.w	404692 <_malloc_r+0x1a6>
  40451e:	2b04      	cmp	r3, #4
  404520:	f200 8183 	bhi.w	40482a <_malloc_r+0x33e>
  404524:	09a8      	lsrs	r0, r5, #6
  404526:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40452a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40452e:	3038      	adds	r0, #56	; 0x38
  404530:	4fc4      	ldr	r7, [pc, #784]	; (404844 <_malloc_r+0x358>)
  404532:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404536:	f1a3 0108 	sub.w	r1, r3, #8
  40453a:	685c      	ldr	r4, [r3, #4]
  40453c:	42a1      	cmp	r1, r4
  40453e:	d107      	bne.n	404550 <_malloc_r+0x64>
  404540:	e0ac      	b.n	40469c <_malloc_r+0x1b0>
  404542:	2a00      	cmp	r2, #0
  404544:	f280 80ac 	bge.w	4046a0 <_malloc_r+0x1b4>
  404548:	68e4      	ldr	r4, [r4, #12]
  40454a:	42a1      	cmp	r1, r4
  40454c:	f000 80a6 	beq.w	40469c <_malloc_r+0x1b0>
  404550:	6863      	ldr	r3, [r4, #4]
  404552:	f023 0303 	bic.w	r3, r3, #3
  404556:	1b5a      	subs	r2, r3, r5
  404558:	2a0f      	cmp	r2, #15
  40455a:	ddf2      	ble.n	404542 <_malloc_r+0x56>
  40455c:	49b9      	ldr	r1, [pc, #740]	; (404844 <_malloc_r+0x358>)
  40455e:	693c      	ldr	r4, [r7, #16]
  404560:	f101 0e08 	add.w	lr, r1, #8
  404564:	4574      	cmp	r4, lr
  404566:	f000 81b3 	beq.w	4048d0 <_malloc_r+0x3e4>
  40456a:	6863      	ldr	r3, [r4, #4]
  40456c:	f023 0303 	bic.w	r3, r3, #3
  404570:	1b5a      	subs	r2, r3, r5
  404572:	2a0f      	cmp	r2, #15
  404574:	f300 8199 	bgt.w	4048aa <_malloc_r+0x3be>
  404578:	2a00      	cmp	r2, #0
  40457a:	f8c1 e014 	str.w	lr, [r1, #20]
  40457e:	f8c1 e010 	str.w	lr, [r1, #16]
  404582:	f280 809e 	bge.w	4046c2 <_malloc_r+0x1d6>
  404586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40458a:	f080 8167 	bcs.w	40485c <_malloc_r+0x370>
  40458e:	08db      	lsrs	r3, r3, #3
  404590:	f103 0c01 	add.w	ip, r3, #1
  404594:	2201      	movs	r2, #1
  404596:	109b      	asrs	r3, r3, #2
  404598:	fa02 f303 	lsl.w	r3, r2, r3
  40459c:	684a      	ldr	r2, [r1, #4]
  40459e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4045a2:	f8c4 8008 	str.w	r8, [r4, #8]
  4045a6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4045aa:	431a      	orrs	r2, r3
  4045ac:	f1a9 0308 	sub.w	r3, r9, #8
  4045b0:	60e3      	str	r3, [r4, #12]
  4045b2:	604a      	str	r2, [r1, #4]
  4045b4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4045b8:	f8c8 400c 	str.w	r4, [r8, #12]
  4045bc:	1083      	asrs	r3, r0, #2
  4045be:	2401      	movs	r4, #1
  4045c0:	409c      	lsls	r4, r3
  4045c2:	4294      	cmp	r4, r2
  4045c4:	f200 808a 	bhi.w	4046dc <_malloc_r+0x1f0>
  4045c8:	4214      	tst	r4, r2
  4045ca:	d106      	bne.n	4045da <_malloc_r+0xee>
  4045cc:	f020 0003 	bic.w	r0, r0, #3
  4045d0:	0064      	lsls	r4, r4, #1
  4045d2:	4214      	tst	r4, r2
  4045d4:	f100 0004 	add.w	r0, r0, #4
  4045d8:	d0fa      	beq.n	4045d0 <_malloc_r+0xe4>
  4045da:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4045de:	46cc      	mov	ip, r9
  4045e0:	4680      	mov	r8, r0
  4045e2:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4045e6:	458c      	cmp	ip, r1
  4045e8:	d107      	bne.n	4045fa <_malloc_r+0x10e>
  4045ea:	e173      	b.n	4048d4 <_malloc_r+0x3e8>
  4045ec:	2a00      	cmp	r2, #0
  4045ee:	f280 8181 	bge.w	4048f4 <_malloc_r+0x408>
  4045f2:	68c9      	ldr	r1, [r1, #12]
  4045f4:	458c      	cmp	ip, r1
  4045f6:	f000 816d 	beq.w	4048d4 <_malloc_r+0x3e8>
  4045fa:	684b      	ldr	r3, [r1, #4]
  4045fc:	f023 0303 	bic.w	r3, r3, #3
  404600:	1b5a      	subs	r2, r3, r5
  404602:	2a0f      	cmp	r2, #15
  404604:	ddf2      	ble.n	4045ec <_malloc_r+0x100>
  404606:	460c      	mov	r4, r1
  404608:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40460c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  404610:	194b      	adds	r3, r1, r5
  404612:	f045 0501 	orr.w	r5, r5, #1
  404616:	604d      	str	r5, [r1, #4]
  404618:	f042 0101 	orr.w	r1, r2, #1
  40461c:	f8c8 c00c 	str.w	ip, [r8, #12]
  404620:	4630      	mov	r0, r6
  404622:	f8cc 8008 	str.w	r8, [ip, #8]
  404626:	617b      	str	r3, [r7, #20]
  404628:	613b      	str	r3, [r7, #16]
  40462a:	f8c3 e00c 	str.w	lr, [r3, #12]
  40462e:	f8c3 e008 	str.w	lr, [r3, #8]
  404632:	6059      	str	r1, [r3, #4]
  404634:	509a      	str	r2, [r3, r2]
  404636:	f000 fb63 	bl	404d00 <__malloc_unlock>
  40463a:	e01f      	b.n	40467c <_malloc_r+0x190>
  40463c:	2910      	cmp	r1, #16
  40463e:	d821      	bhi.n	404684 <_malloc_r+0x198>
  404640:	f000 fb5c 	bl	404cfc <__malloc_lock>
  404644:	2510      	movs	r5, #16
  404646:	2306      	movs	r3, #6
  404648:	2002      	movs	r0, #2
  40464a:	4f7e      	ldr	r7, [pc, #504]	; (404844 <_malloc_r+0x358>)
  40464c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  404650:	f1a3 0208 	sub.w	r2, r3, #8
  404654:	685c      	ldr	r4, [r3, #4]
  404656:	4294      	cmp	r4, r2
  404658:	f000 8145 	beq.w	4048e6 <_malloc_r+0x3fa>
  40465c:	6863      	ldr	r3, [r4, #4]
  40465e:	68e1      	ldr	r1, [r4, #12]
  404660:	68a5      	ldr	r5, [r4, #8]
  404662:	f023 0303 	bic.w	r3, r3, #3
  404666:	4423      	add	r3, r4
  404668:	4630      	mov	r0, r6
  40466a:	685a      	ldr	r2, [r3, #4]
  40466c:	60e9      	str	r1, [r5, #12]
  40466e:	f042 0201 	orr.w	r2, r2, #1
  404672:	608d      	str	r5, [r1, #8]
  404674:	605a      	str	r2, [r3, #4]
  404676:	f000 fb43 	bl	404d00 <__malloc_unlock>
  40467a:	3408      	adds	r4, #8
  40467c:	4620      	mov	r0, r4
  40467e:	b003      	add	sp, #12
  404680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404684:	2400      	movs	r4, #0
  404686:	230c      	movs	r3, #12
  404688:	4620      	mov	r0, r4
  40468a:	6033      	str	r3, [r6, #0]
  40468c:	b003      	add	sp, #12
  40468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404692:	2380      	movs	r3, #128	; 0x80
  404694:	f04f 0e40 	mov.w	lr, #64	; 0x40
  404698:	203f      	movs	r0, #63	; 0x3f
  40469a:	e749      	b.n	404530 <_malloc_r+0x44>
  40469c:	4670      	mov	r0, lr
  40469e:	e75d      	b.n	40455c <_malloc_r+0x70>
  4046a0:	4423      	add	r3, r4
  4046a2:	68e1      	ldr	r1, [r4, #12]
  4046a4:	685a      	ldr	r2, [r3, #4]
  4046a6:	68a5      	ldr	r5, [r4, #8]
  4046a8:	f042 0201 	orr.w	r2, r2, #1
  4046ac:	60e9      	str	r1, [r5, #12]
  4046ae:	4630      	mov	r0, r6
  4046b0:	608d      	str	r5, [r1, #8]
  4046b2:	605a      	str	r2, [r3, #4]
  4046b4:	f000 fb24 	bl	404d00 <__malloc_unlock>
  4046b8:	3408      	adds	r4, #8
  4046ba:	4620      	mov	r0, r4
  4046bc:	b003      	add	sp, #12
  4046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c2:	4423      	add	r3, r4
  4046c4:	4630      	mov	r0, r6
  4046c6:	685a      	ldr	r2, [r3, #4]
  4046c8:	f042 0201 	orr.w	r2, r2, #1
  4046cc:	605a      	str	r2, [r3, #4]
  4046ce:	f000 fb17 	bl	404d00 <__malloc_unlock>
  4046d2:	3408      	adds	r4, #8
  4046d4:	4620      	mov	r0, r4
  4046d6:	b003      	add	sp, #12
  4046d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046dc:	68bc      	ldr	r4, [r7, #8]
  4046de:	6863      	ldr	r3, [r4, #4]
  4046e0:	f023 0803 	bic.w	r8, r3, #3
  4046e4:	45a8      	cmp	r8, r5
  4046e6:	d304      	bcc.n	4046f2 <_malloc_r+0x206>
  4046e8:	ebc5 0308 	rsb	r3, r5, r8
  4046ec:	2b0f      	cmp	r3, #15
  4046ee:	f300 808c 	bgt.w	40480a <_malloc_r+0x31e>
  4046f2:	4b55      	ldr	r3, [pc, #340]	; (404848 <_malloc_r+0x35c>)
  4046f4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 404858 <_malloc_r+0x36c>
  4046f8:	681a      	ldr	r2, [r3, #0]
  4046fa:	f8d9 3000 	ldr.w	r3, [r9]
  4046fe:	3301      	adds	r3, #1
  404700:	442a      	add	r2, r5
  404702:	eb04 0a08 	add.w	sl, r4, r8
  404706:	f000 8160 	beq.w	4049ca <_malloc_r+0x4de>
  40470a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40470e:	320f      	adds	r2, #15
  404710:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  404714:	f022 020f 	bic.w	r2, r2, #15
  404718:	4611      	mov	r1, r2
  40471a:	4630      	mov	r0, r6
  40471c:	9201      	str	r2, [sp, #4]
  40471e:	f000 fce1 	bl	4050e4 <_sbrk_r>
  404722:	f1b0 3fff 	cmp.w	r0, #4294967295
  404726:	4683      	mov	fp, r0
  404728:	9a01      	ldr	r2, [sp, #4]
  40472a:	f000 8158 	beq.w	4049de <_malloc_r+0x4f2>
  40472e:	4582      	cmp	sl, r0
  404730:	f200 80fc 	bhi.w	40492c <_malloc_r+0x440>
  404734:	4b45      	ldr	r3, [pc, #276]	; (40484c <_malloc_r+0x360>)
  404736:	6819      	ldr	r1, [r3, #0]
  404738:	45da      	cmp	sl, fp
  40473a:	4411      	add	r1, r2
  40473c:	6019      	str	r1, [r3, #0]
  40473e:	f000 8153 	beq.w	4049e8 <_malloc_r+0x4fc>
  404742:	f8d9 0000 	ldr.w	r0, [r9]
  404746:	f8df e110 	ldr.w	lr, [pc, #272]	; 404858 <_malloc_r+0x36c>
  40474a:	3001      	adds	r0, #1
  40474c:	bf1b      	ittet	ne
  40474e:	ebca 0a0b 	rsbne	sl, sl, fp
  404752:	4451      	addne	r1, sl
  404754:	f8ce b000 	streq.w	fp, [lr]
  404758:	6019      	strne	r1, [r3, #0]
  40475a:	f01b 0107 	ands.w	r1, fp, #7
  40475e:	f000 8117 	beq.w	404990 <_malloc_r+0x4a4>
  404762:	f1c1 0008 	rsb	r0, r1, #8
  404766:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40476a:	4483      	add	fp, r0
  40476c:	3108      	adds	r1, #8
  40476e:	445a      	add	r2, fp
  404770:	f3c2 020b 	ubfx	r2, r2, #0, #12
  404774:	ebc2 0901 	rsb	r9, r2, r1
  404778:	4649      	mov	r1, r9
  40477a:	4630      	mov	r0, r6
  40477c:	9301      	str	r3, [sp, #4]
  40477e:	f000 fcb1 	bl	4050e4 <_sbrk_r>
  404782:	1c43      	adds	r3, r0, #1
  404784:	9b01      	ldr	r3, [sp, #4]
  404786:	f000 813f 	beq.w	404a08 <_malloc_r+0x51c>
  40478a:	ebcb 0200 	rsb	r2, fp, r0
  40478e:	444a      	add	r2, r9
  404790:	f042 0201 	orr.w	r2, r2, #1
  404794:	6819      	ldr	r1, [r3, #0]
  404796:	f8c7 b008 	str.w	fp, [r7, #8]
  40479a:	4449      	add	r1, r9
  40479c:	42bc      	cmp	r4, r7
  40479e:	f8cb 2004 	str.w	r2, [fp, #4]
  4047a2:	6019      	str	r1, [r3, #0]
  4047a4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40484c <_malloc_r+0x360>
  4047a8:	d016      	beq.n	4047d8 <_malloc_r+0x2ec>
  4047aa:	f1b8 0f0f 	cmp.w	r8, #15
  4047ae:	f240 80fd 	bls.w	4049ac <_malloc_r+0x4c0>
  4047b2:	6862      	ldr	r2, [r4, #4]
  4047b4:	f1a8 030c 	sub.w	r3, r8, #12
  4047b8:	f023 0307 	bic.w	r3, r3, #7
  4047bc:	18e0      	adds	r0, r4, r3
  4047be:	f002 0201 	and.w	r2, r2, #1
  4047c2:	f04f 0e05 	mov.w	lr, #5
  4047c6:	431a      	orrs	r2, r3
  4047c8:	2b0f      	cmp	r3, #15
  4047ca:	6062      	str	r2, [r4, #4]
  4047cc:	f8c0 e004 	str.w	lr, [r0, #4]
  4047d0:	f8c0 e008 	str.w	lr, [r0, #8]
  4047d4:	f200 811c 	bhi.w	404a10 <_malloc_r+0x524>
  4047d8:	4b1d      	ldr	r3, [pc, #116]	; (404850 <_malloc_r+0x364>)
  4047da:	68bc      	ldr	r4, [r7, #8]
  4047dc:	681a      	ldr	r2, [r3, #0]
  4047de:	4291      	cmp	r1, r2
  4047e0:	bf88      	it	hi
  4047e2:	6019      	strhi	r1, [r3, #0]
  4047e4:	4b1b      	ldr	r3, [pc, #108]	; (404854 <_malloc_r+0x368>)
  4047e6:	681a      	ldr	r2, [r3, #0]
  4047e8:	4291      	cmp	r1, r2
  4047ea:	6862      	ldr	r2, [r4, #4]
  4047ec:	bf88      	it	hi
  4047ee:	6019      	strhi	r1, [r3, #0]
  4047f0:	f022 0203 	bic.w	r2, r2, #3
  4047f4:	4295      	cmp	r5, r2
  4047f6:	eba2 0305 	sub.w	r3, r2, r5
  4047fa:	d801      	bhi.n	404800 <_malloc_r+0x314>
  4047fc:	2b0f      	cmp	r3, #15
  4047fe:	dc04      	bgt.n	40480a <_malloc_r+0x31e>
  404800:	4630      	mov	r0, r6
  404802:	f000 fa7d 	bl	404d00 <__malloc_unlock>
  404806:	2400      	movs	r4, #0
  404808:	e738      	b.n	40467c <_malloc_r+0x190>
  40480a:	1962      	adds	r2, r4, r5
  40480c:	f043 0301 	orr.w	r3, r3, #1
  404810:	f045 0501 	orr.w	r5, r5, #1
  404814:	6065      	str	r5, [r4, #4]
  404816:	4630      	mov	r0, r6
  404818:	60ba      	str	r2, [r7, #8]
  40481a:	6053      	str	r3, [r2, #4]
  40481c:	f000 fa70 	bl	404d00 <__malloc_unlock>
  404820:	3408      	adds	r4, #8
  404822:	4620      	mov	r0, r4
  404824:	b003      	add	sp, #12
  404826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40482a:	2b14      	cmp	r3, #20
  40482c:	d971      	bls.n	404912 <_malloc_r+0x426>
  40482e:	2b54      	cmp	r3, #84	; 0x54
  404830:	f200 80a4 	bhi.w	40497c <_malloc_r+0x490>
  404834:	0b28      	lsrs	r0, r5, #12
  404836:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40483a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40483e:	306e      	adds	r0, #110	; 0x6e
  404840:	e676      	b.n	404530 <_malloc_r+0x44>
  404842:	bf00      	nop
  404844:	20400458 	.word	0x20400458
  404848:	20400908 	.word	0x20400908
  40484c:	2040090c 	.word	0x2040090c
  404850:	20400904 	.word	0x20400904
  404854:	20400900 	.word	0x20400900
  404858:	20400864 	.word	0x20400864
  40485c:	0a5a      	lsrs	r2, r3, #9
  40485e:	2a04      	cmp	r2, #4
  404860:	d95e      	bls.n	404920 <_malloc_r+0x434>
  404862:	2a14      	cmp	r2, #20
  404864:	f200 80b3 	bhi.w	4049ce <_malloc_r+0x4e2>
  404868:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40486c:	0049      	lsls	r1, r1, #1
  40486e:	325b      	adds	r2, #91	; 0x5b
  404870:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  404874:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  404878:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 404a58 <_malloc_r+0x56c>
  40487c:	f1ac 0c08 	sub.w	ip, ip, #8
  404880:	458c      	cmp	ip, r1
  404882:	f000 8088 	beq.w	404996 <_malloc_r+0x4aa>
  404886:	684a      	ldr	r2, [r1, #4]
  404888:	f022 0203 	bic.w	r2, r2, #3
  40488c:	4293      	cmp	r3, r2
  40488e:	d202      	bcs.n	404896 <_malloc_r+0x3aa>
  404890:	6889      	ldr	r1, [r1, #8]
  404892:	458c      	cmp	ip, r1
  404894:	d1f7      	bne.n	404886 <_malloc_r+0x39a>
  404896:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40489a:	687a      	ldr	r2, [r7, #4]
  40489c:	f8c4 c00c 	str.w	ip, [r4, #12]
  4048a0:	60a1      	str	r1, [r4, #8]
  4048a2:	f8cc 4008 	str.w	r4, [ip, #8]
  4048a6:	60cc      	str	r4, [r1, #12]
  4048a8:	e688      	b.n	4045bc <_malloc_r+0xd0>
  4048aa:	1963      	adds	r3, r4, r5
  4048ac:	f042 0701 	orr.w	r7, r2, #1
  4048b0:	f045 0501 	orr.w	r5, r5, #1
  4048b4:	6065      	str	r5, [r4, #4]
  4048b6:	4630      	mov	r0, r6
  4048b8:	614b      	str	r3, [r1, #20]
  4048ba:	610b      	str	r3, [r1, #16]
  4048bc:	f8c3 e00c 	str.w	lr, [r3, #12]
  4048c0:	f8c3 e008 	str.w	lr, [r3, #8]
  4048c4:	605f      	str	r7, [r3, #4]
  4048c6:	509a      	str	r2, [r3, r2]
  4048c8:	3408      	adds	r4, #8
  4048ca:	f000 fa19 	bl	404d00 <__malloc_unlock>
  4048ce:	e6d5      	b.n	40467c <_malloc_r+0x190>
  4048d0:	684a      	ldr	r2, [r1, #4]
  4048d2:	e673      	b.n	4045bc <_malloc_r+0xd0>
  4048d4:	f108 0801 	add.w	r8, r8, #1
  4048d8:	f018 0f03 	tst.w	r8, #3
  4048dc:	f10c 0c08 	add.w	ip, ip, #8
  4048e0:	f47f ae7f 	bne.w	4045e2 <_malloc_r+0xf6>
  4048e4:	e030      	b.n	404948 <_malloc_r+0x45c>
  4048e6:	68dc      	ldr	r4, [r3, #12]
  4048e8:	42a3      	cmp	r3, r4
  4048ea:	bf08      	it	eq
  4048ec:	3002      	addeq	r0, #2
  4048ee:	f43f ae35 	beq.w	40455c <_malloc_r+0x70>
  4048f2:	e6b3      	b.n	40465c <_malloc_r+0x170>
  4048f4:	440b      	add	r3, r1
  4048f6:	460c      	mov	r4, r1
  4048f8:	685a      	ldr	r2, [r3, #4]
  4048fa:	68c9      	ldr	r1, [r1, #12]
  4048fc:	f854 5f08 	ldr.w	r5, [r4, #8]!
  404900:	f042 0201 	orr.w	r2, r2, #1
  404904:	605a      	str	r2, [r3, #4]
  404906:	4630      	mov	r0, r6
  404908:	60e9      	str	r1, [r5, #12]
  40490a:	608d      	str	r5, [r1, #8]
  40490c:	f000 f9f8 	bl	404d00 <__malloc_unlock>
  404910:	e6b4      	b.n	40467c <_malloc_r+0x190>
  404912:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  404916:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40491a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40491e:	e607      	b.n	404530 <_malloc_r+0x44>
  404920:	099a      	lsrs	r2, r3, #6
  404922:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404926:	0049      	lsls	r1, r1, #1
  404928:	3238      	adds	r2, #56	; 0x38
  40492a:	e7a1      	b.n	404870 <_malloc_r+0x384>
  40492c:	42bc      	cmp	r4, r7
  40492e:	4b4a      	ldr	r3, [pc, #296]	; (404a58 <_malloc_r+0x56c>)
  404930:	f43f af00 	beq.w	404734 <_malloc_r+0x248>
  404934:	689c      	ldr	r4, [r3, #8]
  404936:	6862      	ldr	r2, [r4, #4]
  404938:	f022 0203 	bic.w	r2, r2, #3
  40493c:	e75a      	b.n	4047f4 <_malloc_r+0x308>
  40493e:	f859 3908 	ldr.w	r3, [r9], #-8
  404942:	4599      	cmp	r9, r3
  404944:	f040 8082 	bne.w	404a4c <_malloc_r+0x560>
  404948:	f010 0f03 	tst.w	r0, #3
  40494c:	f100 30ff 	add.w	r0, r0, #4294967295
  404950:	d1f5      	bne.n	40493e <_malloc_r+0x452>
  404952:	687b      	ldr	r3, [r7, #4]
  404954:	ea23 0304 	bic.w	r3, r3, r4
  404958:	607b      	str	r3, [r7, #4]
  40495a:	0064      	lsls	r4, r4, #1
  40495c:	429c      	cmp	r4, r3
  40495e:	f63f aebd 	bhi.w	4046dc <_malloc_r+0x1f0>
  404962:	2c00      	cmp	r4, #0
  404964:	f43f aeba 	beq.w	4046dc <_malloc_r+0x1f0>
  404968:	421c      	tst	r4, r3
  40496a:	4640      	mov	r0, r8
  40496c:	f47f ae35 	bne.w	4045da <_malloc_r+0xee>
  404970:	0064      	lsls	r4, r4, #1
  404972:	421c      	tst	r4, r3
  404974:	f100 0004 	add.w	r0, r0, #4
  404978:	d0fa      	beq.n	404970 <_malloc_r+0x484>
  40497a:	e62e      	b.n	4045da <_malloc_r+0xee>
  40497c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404980:	d818      	bhi.n	4049b4 <_malloc_r+0x4c8>
  404982:	0be8      	lsrs	r0, r5, #15
  404984:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  404988:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40498c:	3077      	adds	r0, #119	; 0x77
  40498e:	e5cf      	b.n	404530 <_malloc_r+0x44>
  404990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404994:	e6eb      	b.n	40476e <_malloc_r+0x282>
  404996:	2101      	movs	r1, #1
  404998:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40499c:	1092      	asrs	r2, r2, #2
  40499e:	fa01 f202 	lsl.w	r2, r1, r2
  4049a2:	431a      	orrs	r2, r3
  4049a4:	f8c8 2004 	str.w	r2, [r8, #4]
  4049a8:	4661      	mov	r1, ip
  4049aa:	e777      	b.n	40489c <_malloc_r+0x3b0>
  4049ac:	2301      	movs	r3, #1
  4049ae:	f8cb 3004 	str.w	r3, [fp, #4]
  4049b2:	e725      	b.n	404800 <_malloc_r+0x314>
  4049b4:	f240 5254 	movw	r2, #1364	; 0x554
  4049b8:	4293      	cmp	r3, r2
  4049ba:	d820      	bhi.n	4049fe <_malloc_r+0x512>
  4049bc:	0ca8      	lsrs	r0, r5, #18
  4049be:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4049c2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4049c6:	307c      	adds	r0, #124	; 0x7c
  4049c8:	e5b2      	b.n	404530 <_malloc_r+0x44>
  4049ca:	3210      	adds	r2, #16
  4049cc:	e6a4      	b.n	404718 <_malloc_r+0x22c>
  4049ce:	2a54      	cmp	r2, #84	; 0x54
  4049d0:	d826      	bhi.n	404a20 <_malloc_r+0x534>
  4049d2:	0b1a      	lsrs	r2, r3, #12
  4049d4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4049d8:	0049      	lsls	r1, r1, #1
  4049da:	326e      	adds	r2, #110	; 0x6e
  4049dc:	e748      	b.n	404870 <_malloc_r+0x384>
  4049de:	68bc      	ldr	r4, [r7, #8]
  4049e0:	6862      	ldr	r2, [r4, #4]
  4049e2:	f022 0203 	bic.w	r2, r2, #3
  4049e6:	e705      	b.n	4047f4 <_malloc_r+0x308>
  4049e8:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4049ec:	2800      	cmp	r0, #0
  4049ee:	f47f aea8 	bne.w	404742 <_malloc_r+0x256>
  4049f2:	4442      	add	r2, r8
  4049f4:	68bb      	ldr	r3, [r7, #8]
  4049f6:	f042 0201 	orr.w	r2, r2, #1
  4049fa:	605a      	str	r2, [r3, #4]
  4049fc:	e6ec      	b.n	4047d8 <_malloc_r+0x2ec>
  4049fe:	23fe      	movs	r3, #254	; 0xfe
  404a00:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  404a04:	207e      	movs	r0, #126	; 0x7e
  404a06:	e593      	b.n	404530 <_malloc_r+0x44>
  404a08:	2201      	movs	r2, #1
  404a0a:	f04f 0900 	mov.w	r9, #0
  404a0e:	e6c1      	b.n	404794 <_malloc_r+0x2a8>
  404a10:	f104 0108 	add.w	r1, r4, #8
  404a14:	4630      	mov	r0, r6
  404a16:	f7ff fa4f 	bl	403eb8 <_free_r>
  404a1a:	f8d9 1000 	ldr.w	r1, [r9]
  404a1e:	e6db      	b.n	4047d8 <_malloc_r+0x2ec>
  404a20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404a24:	d805      	bhi.n	404a32 <_malloc_r+0x546>
  404a26:	0bda      	lsrs	r2, r3, #15
  404a28:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404a2c:	0049      	lsls	r1, r1, #1
  404a2e:	3277      	adds	r2, #119	; 0x77
  404a30:	e71e      	b.n	404870 <_malloc_r+0x384>
  404a32:	f240 5154 	movw	r1, #1364	; 0x554
  404a36:	428a      	cmp	r2, r1
  404a38:	d805      	bhi.n	404a46 <_malloc_r+0x55a>
  404a3a:	0c9a      	lsrs	r2, r3, #18
  404a3c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404a40:	0049      	lsls	r1, r1, #1
  404a42:	327c      	adds	r2, #124	; 0x7c
  404a44:	e714      	b.n	404870 <_malloc_r+0x384>
  404a46:	21fe      	movs	r1, #254	; 0xfe
  404a48:	227e      	movs	r2, #126	; 0x7e
  404a4a:	e711      	b.n	404870 <_malloc_r+0x384>
  404a4c:	687b      	ldr	r3, [r7, #4]
  404a4e:	e784      	b.n	40495a <_malloc_r+0x46e>
  404a50:	08e8      	lsrs	r0, r5, #3
  404a52:	1c43      	adds	r3, r0, #1
  404a54:	005b      	lsls	r3, r3, #1
  404a56:	e5f8      	b.n	40464a <_malloc_r+0x15e>
  404a58:	20400458 	.word	0x20400458
  404a5c:	00000000 	.word	0x00000000

00404a60 <memchr>:
  404a60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404a64:	2a10      	cmp	r2, #16
  404a66:	db2b      	blt.n	404ac0 <memchr+0x60>
  404a68:	f010 0f07 	tst.w	r0, #7
  404a6c:	d008      	beq.n	404a80 <memchr+0x20>
  404a6e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a72:	3a01      	subs	r2, #1
  404a74:	428b      	cmp	r3, r1
  404a76:	d02d      	beq.n	404ad4 <memchr+0x74>
  404a78:	f010 0f07 	tst.w	r0, #7
  404a7c:	b342      	cbz	r2, 404ad0 <memchr+0x70>
  404a7e:	d1f6      	bne.n	404a6e <memchr+0xe>
  404a80:	b4f0      	push	{r4, r5, r6, r7}
  404a82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404a86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404a8a:	f022 0407 	bic.w	r4, r2, #7
  404a8e:	f07f 0700 	mvns.w	r7, #0
  404a92:	2300      	movs	r3, #0
  404a94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404a98:	3c08      	subs	r4, #8
  404a9a:	ea85 0501 	eor.w	r5, r5, r1
  404a9e:	ea86 0601 	eor.w	r6, r6, r1
  404aa2:	fa85 f547 	uadd8	r5, r5, r7
  404aa6:	faa3 f587 	sel	r5, r3, r7
  404aaa:	fa86 f647 	uadd8	r6, r6, r7
  404aae:	faa5 f687 	sel	r6, r5, r7
  404ab2:	b98e      	cbnz	r6, 404ad8 <memchr+0x78>
  404ab4:	d1ee      	bne.n	404a94 <memchr+0x34>
  404ab6:	bcf0      	pop	{r4, r5, r6, r7}
  404ab8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404abc:	f002 0207 	and.w	r2, r2, #7
  404ac0:	b132      	cbz	r2, 404ad0 <memchr+0x70>
  404ac2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ac6:	3a01      	subs	r2, #1
  404ac8:	ea83 0301 	eor.w	r3, r3, r1
  404acc:	b113      	cbz	r3, 404ad4 <memchr+0x74>
  404ace:	d1f8      	bne.n	404ac2 <memchr+0x62>
  404ad0:	2000      	movs	r0, #0
  404ad2:	4770      	bx	lr
  404ad4:	3801      	subs	r0, #1
  404ad6:	4770      	bx	lr
  404ad8:	2d00      	cmp	r5, #0
  404ada:	bf06      	itte	eq
  404adc:	4635      	moveq	r5, r6
  404ade:	3803      	subeq	r0, #3
  404ae0:	3807      	subne	r0, #7
  404ae2:	f015 0f01 	tst.w	r5, #1
  404ae6:	d107      	bne.n	404af8 <memchr+0x98>
  404ae8:	3001      	adds	r0, #1
  404aea:	f415 7f80 	tst.w	r5, #256	; 0x100
  404aee:	bf02      	ittt	eq
  404af0:	3001      	addeq	r0, #1
  404af2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404af6:	3001      	addeq	r0, #1
  404af8:	bcf0      	pop	{r4, r5, r6, r7}
  404afa:	3801      	subs	r0, #1
  404afc:	4770      	bx	lr
  404afe:	bf00      	nop

00404b00 <memcpy>:
  404b00:	4684      	mov	ip, r0
  404b02:	ea41 0300 	orr.w	r3, r1, r0
  404b06:	f013 0303 	ands.w	r3, r3, #3
  404b0a:	d16d      	bne.n	404be8 <memcpy+0xe8>
  404b0c:	3a40      	subs	r2, #64	; 0x40
  404b0e:	d341      	bcc.n	404b94 <memcpy+0x94>
  404b10:	f851 3b04 	ldr.w	r3, [r1], #4
  404b14:	f840 3b04 	str.w	r3, [r0], #4
  404b18:	f851 3b04 	ldr.w	r3, [r1], #4
  404b1c:	f840 3b04 	str.w	r3, [r0], #4
  404b20:	f851 3b04 	ldr.w	r3, [r1], #4
  404b24:	f840 3b04 	str.w	r3, [r0], #4
  404b28:	f851 3b04 	ldr.w	r3, [r1], #4
  404b2c:	f840 3b04 	str.w	r3, [r0], #4
  404b30:	f851 3b04 	ldr.w	r3, [r1], #4
  404b34:	f840 3b04 	str.w	r3, [r0], #4
  404b38:	f851 3b04 	ldr.w	r3, [r1], #4
  404b3c:	f840 3b04 	str.w	r3, [r0], #4
  404b40:	f851 3b04 	ldr.w	r3, [r1], #4
  404b44:	f840 3b04 	str.w	r3, [r0], #4
  404b48:	f851 3b04 	ldr.w	r3, [r1], #4
  404b4c:	f840 3b04 	str.w	r3, [r0], #4
  404b50:	f851 3b04 	ldr.w	r3, [r1], #4
  404b54:	f840 3b04 	str.w	r3, [r0], #4
  404b58:	f851 3b04 	ldr.w	r3, [r1], #4
  404b5c:	f840 3b04 	str.w	r3, [r0], #4
  404b60:	f851 3b04 	ldr.w	r3, [r1], #4
  404b64:	f840 3b04 	str.w	r3, [r0], #4
  404b68:	f851 3b04 	ldr.w	r3, [r1], #4
  404b6c:	f840 3b04 	str.w	r3, [r0], #4
  404b70:	f851 3b04 	ldr.w	r3, [r1], #4
  404b74:	f840 3b04 	str.w	r3, [r0], #4
  404b78:	f851 3b04 	ldr.w	r3, [r1], #4
  404b7c:	f840 3b04 	str.w	r3, [r0], #4
  404b80:	f851 3b04 	ldr.w	r3, [r1], #4
  404b84:	f840 3b04 	str.w	r3, [r0], #4
  404b88:	f851 3b04 	ldr.w	r3, [r1], #4
  404b8c:	f840 3b04 	str.w	r3, [r0], #4
  404b90:	3a40      	subs	r2, #64	; 0x40
  404b92:	d2bd      	bcs.n	404b10 <memcpy+0x10>
  404b94:	3230      	adds	r2, #48	; 0x30
  404b96:	d311      	bcc.n	404bbc <memcpy+0xbc>
  404b98:	f851 3b04 	ldr.w	r3, [r1], #4
  404b9c:	f840 3b04 	str.w	r3, [r0], #4
  404ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ba4:	f840 3b04 	str.w	r3, [r0], #4
  404ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  404bac:	f840 3b04 	str.w	r3, [r0], #4
  404bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404bb4:	f840 3b04 	str.w	r3, [r0], #4
  404bb8:	3a10      	subs	r2, #16
  404bba:	d2ed      	bcs.n	404b98 <memcpy+0x98>
  404bbc:	320c      	adds	r2, #12
  404bbe:	d305      	bcc.n	404bcc <memcpy+0xcc>
  404bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404bc4:	f840 3b04 	str.w	r3, [r0], #4
  404bc8:	3a04      	subs	r2, #4
  404bca:	d2f9      	bcs.n	404bc0 <memcpy+0xc0>
  404bcc:	3204      	adds	r2, #4
  404bce:	d008      	beq.n	404be2 <memcpy+0xe2>
  404bd0:	07d2      	lsls	r2, r2, #31
  404bd2:	bf1c      	itt	ne
  404bd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404bd8:	f800 3b01 	strbne.w	r3, [r0], #1
  404bdc:	d301      	bcc.n	404be2 <memcpy+0xe2>
  404bde:	880b      	ldrh	r3, [r1, #0]
  404be0:	8003      	strh	r3, [r0, #0]
  404be2:	4660      	mov	r0, ip
  404be4:	4770      	bx	lr
  404be6:	bf00      	nop
  404be8:	2a08      	cmp	r2, #8
  404bea:	d313      	bcc.n	404c14 <memcpy+0x114>
  404bec:	078b      	lsls	r3, r1, #30
  404bee:	d08d      	beq.n	404b0c <memcpy+0xc>
  404bf0:	f010 0303 	ands.w	r3, r0, #3
  404bf4:	d08a      	beq.n	404b0c <memcpy+0xc>
  404bf6:	f1c3 0304 	rsb	r3, r3, #4
  404bfa:	1ad2      	subs	r2, r2, r3
  404bfc:	07db      	lsls	r3, r3, #31
  404bfe:	bf1c      	itt	ne
  404c00:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404c04:	f800 3b01 	strbne.w	r3, [r0], #1
  404c08:	d380      	bcc.n	404b0c <memcpy+0xc>
  404c0a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404c0e:	f820 3b02 	strh.w	r3, [r0], #2
  404c12:	e77b      	b.n	404b0c <memcpy+0xc>
  404c14:	3a04      	subs	r2, #4
  404c16:	d3d9      	bcc.n	404bcc <memcpy+0xcc>
  404c18:	3a01      	subs	r2, #1
  404c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404c1e:	f800 3b01 	strb.w	r3, [r0], #1
  404c22:	d2f9      	bcs.n	404c18 <memcpy+0x118>
  404c24:	780b      	ldrb	r3, [r1, #0]
  404c26:	7003      	strb	r3, [r0, #0]
  404c28:	784b      	ldrb	r3, [r1, #1]
  404c2a:	7043      	strb	r3, [r0, #1]
  404c2c:	788b      	ldrb	r3, [r1, #2]
  404c2e:	7083      	strb	r3, [r0, #2]
  404c30:	4660      	mov	r0, ip
  404c32:	4770      	bx	lr

00404c34 <memmove>:
  404c34:	4288      	cmp	r0, r1
  404c36:	b5f0      	push	{r4, r5, r6, r7, lr}
  404c38:	d90d      	bls.n	404c56 <memmove+0x22>
  404c3a:	188b      	adds	r3, r1, r2
  404c3c:	4298      	cmp	r0, r3
  404c3e:	d20a      	bcs.n	404c56 <memmove+0x22>
  404c40:	1881      	adds	r1, r0, r2
  404c42:	2a00      	cmp	r2, #0
  404c44:	d051      	beq.n	404cea <memmove+0xb6>
  404c46:	1a9a      	subs	r2, r3, r2
  404c48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404c4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  404c50:	4293      	cmp	r3, r2
  404c52:	d1f9      	bne.n	404c48 <memmove+0x14>
  404c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c56:	2a0f      	cmp	r2, #15
  404c58:	d948      	bls.n	404cec <memmove+0xb8>
  404c5a:	ea41 0300 	orr.w	r3, r1, r0
  404c5e:	079b      	lsls	r3, r3, #30
  404c60:	d146      	bne.n	404cf0 <memmove+0xbc>
  404c62:	f100 0410 	add.w	r4, r0, #16
  404c66:	f101 0310 	add.w	r3, r1, #16
  404c6a:	4615      	mov	r5, r2
  404c6c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404c70:	f844 6c10 	str.w	r6, [r4, #-16]
  404c74:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404c78:	f844 6c0c 	str.w	r6, [r4, #-12]
  404c7c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404c80:	f844 6c08 	str.w	r6, [r4, #-8]
  404c84:	3d10      	subs	r5, #16
  404c86:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404c8a:	f844 6c04 	str.w	r6, [r4, #-4]
  404c8e:	2d0f      	cmp	r5, #15
  404c90:	f103 0310 	add.w	r3, r3, #16
  404c94:	f104 0410 	add.w	r4, r4, #16
  404c98:	d8e8      	bhi.n	404c6c <memmove+0x38>
  404c9a:	f1a2 0310 	sub.w	r3, r2, #16
  404c9e:	f023 030f 	bic.w	r3, r3, #15
  404ca2:	f002 0e0f 	and.w	lr, r2, #15
  404ca6:	3310      	adds	r3, #16
  404ca8:	f1be 0f03 	cmp.w	lr, #3
  404cac:	4419      	add	r1, r3
  404cae:	4403      	add	r3, r0
  404cb0:	d921      	bls.n	404cf6 <memmove+0xc2>
  404cb2:	1f1e      	subs	r6, r3, #4
  404cb4:	460d      	mov	r5, r1
  404cb6:	4674      	mov	r4, lr
  404cb8:	3c04      	subs	r4, #4
  404cba:	f855 7b04 	ldr.w	r7, [r5], #4
  404cbe:	f846 7f04 	str.w	r7, [r6, #4]!
  404cc2:	2c03      	cmp	r4, #3
  404cc4:	d8f8      	bhi.n	404cb8 <memmove+0x84>
  404cc6:	f1ae 0404 	sub.w	r4, lr, #4
  404cca:	f024 0403 	bic.w	r4, r4, #3
  404cce:	3404      	adds	r4, #4
  404cd0:	4423      	add	r3, r4
  404cd2:	4421      	add	r1, r4
  404cd4:	f002 0203 	and.w	r2, r2, #3
  404cd8:	b162      	cbz	r2, 404cf4 <memmove+0xc0>
  404cda:	3b01      	subs	r3, #1
  404cdc:	440a      	add	r2, r1
  404cde:	f811 4b01 	ldrb.w	r4, [r1], #1
  404ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
  404ce6:	428a      	cmp	r2, r1
  404ce8:	d1f9      	bne.n	404cde <memmove+0xaa>
  404cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404cec:	4603      	mov	r3, r0
  404cee:	e7f3      	b.n	404cd8 <memmove+0xa4>
  404cf0:	4603      	mov	r3, r0
  404cf2:	e7f2      	b.n	404cda <memmove+0xa6>
  404cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404cf6:	4672      	mov	r2, lr
  404cf8:	e7ee      	b.n	404cd8 <memmove+0xa4>
  404cfa:	bf00      	nop

00404cfc <__malloc_lock>:
  404cfc:	4770      	bx	lr
  404cfe:	bf00      	nop

00404d00 <__malloc_unlock>:
  404d00:	4770      	bx	lr
  404d02:	bf00      	nop

00404d04 <_realloc_r>:
  404d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d08:	4617      	mov	r7, r2
  404d0a:	b083      	sub	sp, #12
  404d0c:	2900      	cmp	r1, #0
  404d0e:	f000 80c1 	beq.w	404e94 <_realloc_r+0x190>
  404d12:	460e      	mov	r6, r1
  404d14:	4681      	mov	r9, r0
  404d16:	f107 050b 	add.w	r5, r7, #11
  404d1a:	f7ff ffef 	bl	404cfc <__malloc_lock>
  404d1e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  404d22:	2d16      	cmp	r5, #22
  404d24:	f02e 0403 	bic.w	r4, lr, #3
  404d28:	f1a6 0808 	sub.w	r8, r6, #8
  404d2c:	d840      	bhi.n	404db0 <_realloc_r+0xac>
  404d2e:	2210      	movs	r2, #16
  404d30:	4615      	mov	r5, r2
  404d32:	42af      	cmp	r7, r5
  404d34:	d841      	bhi.n	404dba <_realloc_r+0xb6>
  404d36:	4294      	cmp	r4, r2
  404d38:	da75      	bge.n	404e26 <_realloc_r+0x122>
  404d3a:	4bc9      	ldr	r3, [pc, #804]	; (405060 <_realloc_r+0x35c>)
  404d3c:	6899      	ldr	r1, [r3, #8]
  404d3e:	eb08 0004 	add.w	r0, r8, r4
  404d42:	4288      	cmp	r0, r1
  404d44:	6841      	ldr	r1, [r0, #4]
  404d46:	f000 80d9 	beq.w	404efc <_realloc_r+0x1f8>
  404d4a:	f021 0301 	bic.w	r3, r1, #1
  404d4e:	4403      	add	r3, r0
  404d50:	685b      	ldr	r3, [r3, #4]
  404d52:	07db      	lsls	r3, r3, #31
  404d54:	d57d      	bpl.n	404e52 <_realloc_r+0x14e>
  404d56:	f01e 0f01 	tst.w	lr, #1
  404d5a:	d035      	beq.n	404dc8 <_realloc_r+0xc4>
  404d5c:	4639      	mov	r1, r7
  404d5e:	4648      	mov	r0, r9
  404d60:	f7ff fbc4 	bl	4044ec <_malloc_r>
  404d64:	4607      	mov	r7, r0
  404d66:	b1e0      	cbz	r0, 404da2 <_realloc_r+0x9e>
  404d68:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404d6c:	f023 0301 	bic.w	r3, r3, #1
  404d70:	4443      	add	r3, r8
  404d72:	f1a0 0208 	sub.w	r2, r0, #8
  404d76:	429a      	cmp	r2, r3
  404d78:	f000 8144 	beq.w	405004 <_realloc_r+0x300>
  404d7c:	1f22      	subs	r2, r4, #4
  404d7e:	2a24      	cmp	r2, #36	; 0x24
  404d80:	f200 8131 	bhi.w	404fe6 <_realloc_r+0x2e2>
  404d84:	2a13      	cmp	r2, #19
  404d86:	f200 8104 	bhi.w	404f92 <_realloc_r+0x28e>
  404d8a:	4603      	mov	r3, r0
  404d8c:	4632      	mov	r2, r6
  404d8e:	6811      	ldr	r1, [r2, #0]
  404d90:	6019      	str	r1, [r3, #0]
  404d92:	6851      	ldr	r1, [r2, #4]
  404d94:	6059      	str	r1, [r3, #4]
  404d96:	6892      	ldr	r2, [r2, #8]
  404d98:	609a      	str	r2, [r3, #8]
  404d9a:	4631      	mov	r1, r6
  404d9c:	4648      	mov	r0, r9
  404d9e:	f7ff f88b 	bl	403eb8 <_free_r>
  404da2:	4648      	mov	r0, r9
  404da4:	f7ff ffac 	bl	404d00 <__malloc_unlock>
  404da8:	4638      	mov	r0, r7
  404daa:	b003      	add	sp, #12
  404dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404db0:	f025 0507 	bic.w	r5, r5, #7
  404db4:	2d00      	cmp	r5, #0
  404db6:	462a      	mov	r2, r5
  404db8:	dabb      	bge.n	404d32 <_realloc_r+0x2e>
  404dba:	230c      	movs	r3, #12
  404dbc:	2000      	movs	r0, #0
  404dbe:	f8c9 3000 	str.w	r3, [r9]
  404dc2:	b003      	add	sp, #12
  404dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dc8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  404dcc:	ebc3 0a08 	rsb	sl, r3, r8
  404dd0:	f8da 3004 	ldr.w	r3, [sl, #4]
  404dd4:	f023 0c03 	bic.w	ip, r3, #3
  404dd8:	eb04 030c 	add.w	r3, r4, ip
  404ddc:	4293      	cmp	r3, r2
  404dde:	dbbd      	blt.n	404d5c <_realloc_r+0x58>
  404de0:	4657      	mov	r7, sl
  404de2:	f8da 100c 	ldr.w	r1, [sl, #12]
  404de6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  404dea:	1f22      	subs	r2, r4, #4
  404dec:	2a24      	cmp	r2, #36	; 0x24
  404dee:	60c1      	str	r1, [r0, #12]
  404df0:	6088      	str	r0, [r1, #8]
  404df2:	f200 8117 	bhi.w	405024 <_realloc_r+0x320>
  404df6:	2a13      	cmp	r2, #19
  404df8:	f240 8112 	bls.w	405020 <_realloc_r+0x31c>
  404dfc:	6831      	ldr	r1, [r6, #0]
  404dfe:	f8ca 1008 	str.w	r1, [sl, #8]
  404e02:	6871      	ldr	r1, [r6, #4]
  404e04:	f8ca 100c 	str.w	r1, [sl, #12]
  404e08:	2a1b      	cmp	r2, #27
  404e0a:	f200 812b 	bhi.w	405064 <_realloc_r+0x360>
  404e0e:	3608      	adds	r6, #8
  404e10:	f10a 0210 	add.w	r2, sl, #16
  404e14:	6831      	ldr	r1, [r6, #0]
  404e16:	6011      	str	r1, [r2, #0]
  404e18:	6871      	ldr	r1, [r6, #4]
  404e1a:	6051      	str	r1, [r2, #4]
  404e1c:	68b1      	ldr	r1, [r6, #8]
  404e1e:	6091      	str	r1, [r2, #8]
  404e20:	463e      	mov	r6, r7
  404e22:	461c      	mov	r4, r3
  404e24:	46d0      	mov	r8, sl
  404e26:	1b63      	subs	r3, r4, r5
  404e28:	2b0f      	cmp	r3, #15
  404e2a:	d81d      	bhi.n	404e68 <_realloc_r+0x164>
  404e2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404e30:	f003 0301 	and.w	r3, r3, #1
  404e34:	4323      	orrs	r3, r4
  404e36:	4444      	add	r4, r8
  404e38:	f8c8 3004 	str.w	r3, [r8, #4]
  404e3c:	6863      	ldr	r3, [r4, #4]
  404e3e:	f043 0301 	orr.w	r3, r3, #1
  404e42:	6063      	str	r3, [r4, #4]
  404e44:	4648      	mov	r0, r9
  404e46:	f7ff ff5b 	bl	404d00 <__malloc_unlock>
  404e4a:	4630      	mov	r0, r6
  404e4c:	b003      	add	sp, #12
  404e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e52:	f021 0103 	bic.w	r1, r1, #3
  404e56:	4421      	add	r1, r4
  404e58:	4291      	cmp	r1, r2
  404e5a:	db21      	blt.n	404ea0 <_realloc_r+0x19c>
  404e5c:	68c3      	ldr	r3, [r0, #12]
  404e5e:	6882      	ldr	r2, [r0, #8]
  404e60:	460c      	mov	r4, r1
  404e62:	60d3      	str	r3, [r2, #12]
  404e64:	609a      	str	r2, [r3, #8]
  404e66:	e7de      	b.n	404e26 <_realloc_r+0x122>
  404e68:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404e6c:	eb08 0105 	add.w	r1, r8, r5
  404e70:	f002 0201 	and.w	r2, r2, #1
  404e74:	4315      	orrs	r5, r2
  404e76:	f043 0201 	orr.w	r2, r3, #1
  404e7a:	440b      	add	r3, r1
  404e7c:	f8c8 5004 	str.w	r5, [r8, #4]
  404e80:	604a      	str	r2, [r1, #4]
  404e82:	685a      	ldr	r2, [r3, #4]
  404e84:	f042 0201 	orr.w	r2, r2, #1
  404e88:	3108      	adds	r1, #8
  404e8a:	605a      	str	r2, [r3, #4]
  404e8c:	4648      	mov	r0, r9
  404e8e:	f7ff f813 	bl	403eb8 <_free_r>
  404e92:	e7d7      	b.n	404e44 <_realloc_r+0x140>
  404e94:	4611      	mov	r1, r2
  404e96:	b003      	add	sp, #12
  404e98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e9c:	f7ff bb26 	b.w	4044ec <_malloc_r>
  404ea0:	f01e 0f01 	tst.w	lr, #1
  404ea4:	f47f af5a 	bne.w	404d5c <_realloc_r+0x58>
  404ea8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  404eac:	ebc3 0a08 	rsb	sl, r3, r8
  404eb0:	f8da 3004 	ldr.w	r3, [sl, #4]
  404eb4:	f023 0c03 	bic.w	ip, r3, #3
  404eb8:	eb01 0e0c 	add.w	lr, r1, ip
  404ebc:	4596      	cmp	lr, r2
  404ebe:	db8b      	blt.n	404dd8 <_realloc_r+0xd4>
  404ec0:	68c3      	ldr	r3, [r0, #12]
  404ec2:	6882      	ldr	r2, [r0, #8]
  404ec4:	4657      	mov	r7, sl
  404ec6:	60d3      	str	r3, [r2, #12]
  404ec8:	609a      	str	r2, [r3, #8]
  404eca:	f857 1f08 	ldr.w	r1, [r7, #8]!
  404ece:	f8da 300c 	ldr.w	r3, [sl, #12]
  404ed2:	60cb      	str	r3, [r1, #12]
  404ed4:	1f22      	subs	r2, r4, #4
  404ed6:	2a24      	cmp	r2, #36	; 0x24
  404ed8:	6099      	str	r1, [r3, #8]
  404eda:	f200 8099 	bhi.w	405010 <_realloc_r+0x30c>
  404ede:	2a13      	cmp	r2, #19
  404ee0:	d962      	bls.n	404fa8 <_realloc_r+0x2a4>
  404ee2:	6833      	ldr	r3, [r6, #0]
  404ee4:	f8ca 3008 	str.w	r3, [sl, #8]
  404ee8:	6873      	ldr	r3, [r6, #4]
  404eea:	f8ca 300c 	str.w	r3, [sl, #12]
  404eee:	2a1b      	cmp	r2, #27
  404ef0:	f200 80a0 	bhi.w	405034 <_realloc_r+0x330>
  404ef4:	3608      	adds	r6, #8
  404ef6:	f10a 0310 	add.w	r3, sl, #16
  404efa:	e056      	b.n	404faa <_realloc_r+0x2a6>
  404efc:	f021 0b03 	bic.w	fp, r1, #3
  404f00:	44a3      	add	fp, r4
  404f02:	f105 0010 	add.w	r0, r5, #16
  404f06:	4583      	cmp	fp, r0
  404f08:	da59      	bge.n	404fbe <_realloc_r+0x2ba>
  404f0a:	f01e 0f01 	tst.w	lr, #1
  404f0e:	f47f af25 	bne.w	404d5c <_realloc_r+0x58>
  404f12:	f856 1c08 	ldr.w	r1, [r6, #-8]
  404f16:	ebc1 0a08 	rsb	sl, r1, r8
  404f1a:	f8da 1004 	ldr.w	r1, [sl, #4]
  404f1e:	f021 0c03 	bic.w	ip, r1, #3
  404f22:	44e3      	add	fp, ip
  404f24:	4558      	cmp	r0, fp
  404f26:	f73f af57 	bgt.w	404dd8 <_realloc_r+0xd4>
  404f2a:	4657      	mov	r7, sl
  404f2c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404f30:	f857 0f08 	ldr.w	r0, [r7, #8]!
  404f34:	1f22      	subs	r2, r4, #4
  404f36:	2a24      	cmp	r2, #36	; 0x24
  404f38:	60c1      	str	r1, [r0, #12]
  404f3a:	6088      	str	r0, [r1, #8]
  404f3c:	f200 80b4 	bhi.w	4050a8 <_realloc_r+0x3a4>
  404f40:	2a13      	cmp	r2, #19
  404f42:	f240 80a5 	bls.w	405090 <_realloc_r+0x38c>
  404f46:	6831      	ldr	r1, [r6, #0]
  404f48:	f8ca 1008 	str.w	r1, [sl, #8]
  404f4c:	6871      	ldr	r1, [r6, #4]
  404f4e:	f8ca 100c 	str.w	r1, [sl, #12]
  404f52:	2a1b      	cmp	r2, #27
  404f54:	f200 80af 	bhi.w	4050b6 <_realloc_r+0x3b2>
  404f58:	3608      	adds	r6, #8
  404f5a:	f10a 0210 	add.w	r2, sl, #16
  404f5e:	6831      	ldr	r1, [r6, #0]
  404f60:	6011      	str	r1, [r2, #0]
  404f62:	6871      	ldr	r1, [r6, #4]
  404f64:	6051      	str	r1, [r2, #4]
  404f66:	68b1      	ldr	r1, [r6, #8]
  404f68:	6091      	str	r1, [r2, #8]
  404f6a:	eb0a 0105 	add.w	r1, sl, r5
  404f6e:	ebc5 020b 	rsb	r2, r5, fp
  404f72:	f042 0201 	orr.w	r2, r2, #1
  404f76:	6099      	str	r1, [r3, #8]
  404f78:	604a      	str	r2, [r1, #4]
  404f7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  404f7e:	f003 0301 	and.w	r3, r3, #1
  404f82:	431d      	orrs	r5, r3
  404f84:	4648      	mov	r0, r9
  404f86:	f8ca 5004 	str.w	r5, [sl, #4]
  404f8a:	f7ff feb9 	bl	404d00 <__malloc_unlock>
  404f8e:	4638      	mov	r0, r7
  404f90:	e75c      	b.n	404e4c <_realloc_r+0x148>
  404f92:	6833      	ldr	r3, [r6, #0]
  404f94:	6003      	str	r3, [r0, #0]
  404f96:	6873      	ldr	r3, [r6, #4]
  404f98:	6043      	str	r3, [r0, #4]
  404f9a:	2a1b      	cmp	r2, #27
  404f9c:	d827      	bhi.n	404fee <_realloc_r+0x2ea>
  404f9e:	f100 0308 	add.w	r3, r0, #8
  404fa2:	f106 0208 	add.w	r2, r6, #8
  404fa6:	e6f2      	b.n	404d8e <_realloc_r+0x8a>
  404fa8:	463b      	mov	r3, r7
  404faa:	6832      	ldr	r2, [r6, #0]
  404fac:	601a      	str	r2, [r3, #0]
  404fae:	6872      	ldr	r2, [r6, #4]
  404fb0:	605a      	str	r2, [r3, #4]
  404fb2:	68b2      	ldr	r2, [r6, #8]
  404fb4:	609a      	str	r2, [r3, #8]
  404fb6:	463e      	mov	r6, r7
  404fb8:	4674      	mov	r4, lr
  404fba:	46d0      	mov	r8, sl
  404fbc:	e733      	b.n	404e26 <_realloc_r+0x122>
  404fbe:	eb08 0105 	add.w	r1, r8, r5
  404fc2:	ebc5 0b0b 	rsb	fp, r5, fp
  404fc6:	f04b 0201 	orr.w	r2, fp, #1
  404fca:	6099      	str	r1, [r3, #8]
  404fcc:	604a      	str	r2, [r1, #4]
  404fce:	f856 3c04 	ldr.w	r3, [r6, #-4]
  404fd2:	f003 0301 	and.w	r3, r3, #1
  404fd6:	431d      	orrs	r5, r3
  404fd8:	4648      	mov	r0, r9
  404fda:	f846 5c04 	str.w	r5, [r6, #-4]
  404fde:	f7ff fe8f 	bl	404d00 <__malloc_unlock>
  404fe2:	4630      	mov	r0, r6
  404fe4:	e732      	b.n	404e4c <_realloc_r+0x148>
  404fe6:	4631      	mov	r1, r6
  404fe8:	f7ff fe24 	bl	404c34 <memmove>
  404fec:	e6d5      	b.n	404d9a <_realloc_r+0x96>
  404fee:	68b3      	ldr	r3, [r6, #8]
  404ff0:	6083      	str	r3, [r0, #8]
  404ff2:	68f3      	ldr	r3, [r6, #12]
  404ff4:	60c3      	str	r3, [r0, #12]
  404ff6:	2a24      	cmp	r2, #36	; 0x24
  404ff8:	d028      	beq.n	40504c <_realloc_r+0x348>
  404ffa:	f100 0310 	add.w	r3, r0, #16
  404ffe:	f106 0210 	add.w	r2, r6, #16
  405002:	e6c4      	b.n	404d8e <_realloc_r+0x8a>
  405004:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405008:	f023 0303 	bic.w	r3, r3, #3
  40500c:	441c      	add	r4, r3
  40500e:	e70a      	b.n	404e26 <_realloc_r+0x122>
  405010:	4631      	mov	r1, r6
  405012:	4638      	mov	r0, r7
  405014:	4674      	mov	r4, lr
  405016:	46d0      	mov	r8, sl
  405018:	f7ff fe0c 	bl	404c34 <memmove>
  40501c:	463e      	mov	r6, r7
  40501e:	e702      	b.n	404e26 <_realloc_r+0x122>
  405020:	463a      	mov	r2, r7
  405022:	e6f7      	b.n	404e14 <_realloc_r+0x110>
  405024:	4631      	mov	r1, r6
  405026:	4638      	mov	r0, r7
  405028:	461c      	mov	r4, r3
  40502a:	46d0      	mov	r8, sl
  40502c:	f7ff fe02 	bl	404c34 <memmove>
  405030:	463e      	mov	r6, r7
  405032:	e6f8      	b.n	404e26 <_realloc_r+0x122>
  405034:	68b3      	ldr	r3, [r6, #8]
  405036:	f8ca 3010 	str.w	r3, [sl, #16]
  40503a:	68f3      	ldr	r3, [r6, #12]
  40503c:	f8ca 3014 	str.w	r3, [sl, #20]
  405040:	2a24      	cmp	r2, #36	; 0x24
  405042:	d01b      	beq.n	40507c <_realloc_r+0x378>
  405044:	3610      	adds	r6, #16
  405046:	f10a 0318 	add.w	r3, sl, #24
  40504a:	e7ae      	b.n	404faa <_realloc_r+0x2a6>
  40504c:	6933      	ldr	r3, [r6, #16]
  40504e:	6103      	str	r3, [r0, #16]
  405050:	6973      	ldr	r3, [r6, #20]
  405052:	6143      	str	r3, [r0, #20]
  405054:	f106 0218 	add.w	r2, r6, #24
  405058:	f100 0318 	add.w	r3, r0, #24
  40505c:	e697      	b.n	404d8e <_realloc_r+0x8a>
  40505e:	bf00      	nop
  405060:	20400458 	.word	0x20400458
  405064:	68b1      	ldr	r1, [r6, #8]
  405066:	f8ca 1010 	str.w	r1, [sl, #16]
  40506a:	68f1      	ldr	r1, [r6, #12]
  40506c:	f8ca 1014 	str.w	r1, [sl, #20]
  405070:	2a24      	cmp	r2, #36	; 0x24
  405072:	d00f      	beq.n	405094 <_realloc_r+0x390>
  405074:	3610      	adds	r6, #16
  405076:	f10a 0218 	add.w	r2, sl, #24
  40507a:	e6cb      	b.n	404e14 <_realloc_r+0x110>
  40507c:	6933      	ldr	r3, [r6, #16]
  40507e:	f8ca 3018 	str.w	r3, [sl, #24]
  405082:	6973      	ldr	r3, [r6, #20]
  405084:	f8ca 301c 	str.w	r3, [sl, #28]
  405088:	3618      	adds	r6, #24
  40508a:	f10a 0320 	add.w	r3, sl, #32
  40508e:	e78c      	b.n	404faa <_realloc_r+0x2a6>
  405090:	463a      	mov	r2, r7
  405092:	e764      	b.n	404f5e <_realloc_r+0x25a>
  405094:	6932      	ldr	r2, [r6, #16]
  405096:	f8ca 2018 	str.w	r2, [sl, #24]
  40509a:	6972      	ldr	r2, [r6, #20]
  40509c:	f8ca 201c 	str.w	r2, [sl, #28]
  4050a0:	3618      	adds	r6, #24
  4050a2:	f10a 0220 	add.w	r2, sl, #32
  4050a6:	e6b5      	b.n	404e14 <_realloc_r+0x110>
  4050a8:	4631      	mov	r1, r6
  4050aa:	4638      	mov	r0, r7
  4050ac:	9301      	str	r3, [sp, #4]
  4050ae:	f7ff fdc1 	bl	404c34 <memmove>
  4050b2:	9b01      	ldr	r3, [sp, #4]
  4050b4:	e759      	b.n	404f6a <_realloc_r+0x266>
  4050b6:	68b1      	ldr	r1, [r6, #8]
  4050b8:	f8ca 1010 	str.w	r1, [sl, #16]
  4050bc:	68f1      	ldr	r1, [r6, #12]
  4050be:	f8ca 1014 	str.w	r1, [sl, #20]
  4050c2:	2a24      	cmp	r2, #36	; 0x24
  4050c4:	d003      	beq.n	4050ce <_realloc_r+0x3ca>
  4050c6:	3610      	adds	r6, #16
  4050c8:	f10a 0218 	add.w	r2, sl, #24
  4050cc:	e747      	b.n	404f5e <_realloc_r+0x25a>
  4050ce:	6932      	ldr	r2, [r6, #16]
  4050d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4050d4:	6972      	ldr	r2, [r6, #20]
  4050d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4050da:	3618      	adds	r6, #24
  4050dc:	f10a 0220 	add.w	r2, sl, #32
  4050e0:	e73d      	b.n	404f5e <_realloc_r+0x25a>
  4050e2:	bf00      	nop

004050e4 <_sbrk_r>:
  4050e4:	b538      	push	{r3, r4, r5, lr}
  4050e6:	4c07      	ldr	r4, [pc, #28]	; (405104 <_sbrk_r+0x20>)
  4050e8:	2300      	movs	r3, #0
  4050ea:	4605      	mov	r5, r0
  4050ec:	4608      	mov	r0, r1
  4050ee:	6023      	str	r3, [r4, #0]
  4050f0:	f7fc fe2c 	bl	401d4c <_sbrk>
  4050f4:	1c43      	adds	r3, r0, #1
  4050f6:	d000      	beq.n	4050fa <_sbrk_r+0x16>
  4050f8:	bd38      	pop	{r3, r4, r5, pc}
  4050fa:	6823      	ldr	r3, [r4, #0]
  4050fc:	2b00      	cmp	r3, #0
  4050fe:	d0fb      	beq.n	4050f8 <_sbrk_r+0x14>
  405100:	602b      	str	r3, [r5, #0]
  405102:	bd38      	pop	{r3, r4, r5, pc}
  405104:	20400a48 	.word	0x20400a48

00405108 <__sread>:
  405108:	b510      	push	{r4, lr}
  40510a:	460c      	mov	r4, r1
  40510c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405110:	f000 fa4a 	bl	4055a8 <_read_r>
  405114:	2800      	cmp	r0, #0
  405116:	db03      	blt.n	405120 <__sread+0x18>
  405118:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40511a:	4403      	add	r3, r0
  40511c:	6523      	str	r3, [r4, #80]	; 0x50
  40511e:	bd10      	pop	{r4, pc}
  405120:	89a3      	ldrh	r3, [r4, #12]
  405122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405126:	81a3      	strh	r3, [r4, #12]
  405128:	bd10      	pop	{r4, pc}
  40512a:	bf00      	nop

0040512c <__swrite>:
  40512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405130:	4616      	mov	r6, r2
  405132:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405136:	461f      	mov	r7, r3
  405138:	05d3      	lsls	r3, r2, #23
  40513a:	460c      	mov	r4, r1
  40513c:	4605      	mov	r5, r0
  40513e:	d507      	bpl.n	405150 <__swrite+0x24>
  405140:	2200      	movs	r2, #0
  405142:	2302      	movs	r3, #2
  405144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405148:	f000 fa18 	bl	40557c <_lseek_r>
  40514c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405158:	81a2      	strh	r2, [r4, #12]
  40515a:	463b      	mov	r3, r7
  40515c:	4632      	mov	r2, r6
  40515e:	4628      	mov	r0, r5
  405160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405164:	f000 b928 	b.w	4053b8 <_write_r>

00405168 <__sseek>:
  405168:	b510      	push	{r4, lr}
  40516a:	460c      	mov	r4, r1
  40516c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405170:	f000 fa04 	bl	40557c <_lseek_r>
  405174:	89a3      	ldrh	r3, [r4, #12]
  405176:	1c42      	adds	r2, r0, #1
  405178:	bf0e      	itee	eq
  40517a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40517e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405182:	6520      	strne	r0, [r4, #80]	; 0x50
  405184:	81a3      	strh	r3, [r4, #12]
  405186:	bd10      	pop	{r4, pc}

00405188 <__sclose>:
  405188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40518c:	f000 b97c 	b.w	405488 <_close_r>
	...

004051c0 <strlen>:
  4051c0:	f890 f000 	pld	[r0]
  4051c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4051c8:	f020 0107 	bic.w	r1, r0, #7
  4051cc:	f06f 0c00 	mvn.w	ip, #0
  4051d0:	f010 0407 	ands.w	r4, r0, #7
  4051d4:	f891 f020 	pld	[r1, #32]
  4051d8:	f040 8049 	bne.w	40526e <strlen+0xae>
  4051dc:	f04f 0400 	mov.w	r4, #0
  4051e0:	f06f 0007 	mvn.w	r0, #7
  4051e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4051e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4051ec:	f100 0008 	add.w	r0, r0, #8
  4051f0:	fa82 f24c 	uadd8	r2, r2, ip
  4051f4:	faa4 f28c 	sel	r2, r4, ip
  4051f8:	fa83 f34c 	uadd8	r3, r3, ip
  4051fc:	faa2 f38c 	sel	r3, r2, ip
  405200:	bb4b      	cbnz	r3, 405256 <strlen+0x96>
  405202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405206:	fa82 f24c 	uadd8	r2, r2, ip
  40520a:	f100 0008 	add.w	r0, r0, #8
  40520e:	faa4 f28c 	sel	r2, r4, ip
  405212:	fa83 f34c 	uadd8	r3, r3, ip
  405216:	faa2 f38c 	sel	r3, r2, ip
  40521a:	b9e3      	cbnz	r3, 405256 <strlen+0x96>
  40521c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405220:	fa82 f24c 	uadd8	r2, r2, ip
  405224:	f100 0008 	add.w	r0, r0, #8
  405228:	faa4 f28c 	sel	r2, r4, ip
  40522c:	fa83 f34c 	uadd8	r3, r3, ip
  405230:	faa2 f38c 	sel	r3, r2, ip
  405234:	b97b      	cbnz	r3, 405256 <strlen+0x96>
  405236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40523a:	f101 0120 	add.w	r1, r1, #32
  40523e:	fa82 f24c 	uadd8	r2, r2, ip
  405242:	f100 0008 	add.w	r0, r0, #8
  405246:	faa4 f28c 	sel	r2, r4, ip
  40524a:	fa83 f34c 	uadd8	r3, r3, ip
  40524e:	faa2 f38c 	sel	r3, r2, ip
  405252:	2b00      	cmp	r3, #0
  405254:	d0c6      	beq.n	4051e4 <strlen+0x24>
  405256:	2a00      	cmp	r2, #0
  405258:	bf04      	itt	eq
  40525a:	3004      	addeq	r0, #4
  40525c:	461a      	moveq	r2, r3
  40525e:	ba12      	rev	r2, r2
  405260:	fab2 f282 	clz	r2, r2
  405264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40526c:	4770      	bx	lr
  40526e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405272:	f004 0503 	and.w	r5, r4, #3
  405276:	f1c4 0000 	rsb	r0, r4, #0
  40527a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40527e:	f014 0f04 	tst.w	r4, #4
  405282:	f891 f040 	pld	[r1, #64]	; 0x40
  405286:	fa0c f505 	lsl.w	r5, ip, r5
  40528a:	ea62 0205 	orn	r2, r2, r5
  40528e:	bf1c      	itt	ne
  405290:	ea63 0305 	ornne	r3, r3, r5
  405294:	4662      	movne	r2, ip
  405296:	f04f 0400 	mov.w	r4, #0
  40529a:	e7a9      	b.n	4051f0 <strlen+0x30>

0040529c <__swbuf_r>:
  40529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40529e:	460e      	mov	r6, r1
  4052a0:	4614      	mov	r4, r2
  4052a2:	4607      	mov	r7, r0
  4052a4:	b110      	cbz	r0, 4052ac <__swbuf_r+0x10>
  4052a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4052a8:	2b00      	cmp	r3, #0
  4052aa:	d04a      	beq.n	405342 <__swbuf_r+0xa6>
  4052ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4052b0:	69a3      	ldr	r3, [r4, #24]
  4052b2:	60a3      	str	r3, [r4, #8]
  4052b4:	b291      	uxth	r1, r2
  4052b6:	0708      	lsls	r0, r1, #28
  4052b8:	d538      	bpl.n	40532c <__swbuf_r+0x90>
  4052ba:	6923      	ldr	r3, [r4, #16]
  4052bc:	2b00      	cmp	r3, #0
  4052be:	d035      	beq.n	40532c <__swbuf_r+0x90>
  4052c0:	0489      	lsls	r1, r1, #18
  4052c2:	b2f5      	uxtb	r5, r6
  4052c4:	d515      	bpl.n	4052f2 <__swbuf_r+0x56>
  4052c6:	6822      	ldr	r2, [r4, #0]
  4052c8:	6961      	ldr	r1, [r4, #20]
  4052ca:	1ad3      	subs	r3, r2, r3
  4052cc:	428b      	cmp	r3, r1
  4052ce:	da1c      	bge.n	40530a <__swbuf_r+0x6e>
  4052d0:	3301      	adds	r3, #1
  4052d2:	68a1      	ldr	r1, [r4, #8]
  4052d4:	1c50      	adds	r0, r2, #1
  4052d6:	3901      	subs	r1, #1
  4052d8:	60a1      	str	r1, [r4, #8]
  4052da:	6020      	str	r0, [r4, #0]
  4052dc:	7016      	strb	r6, [r2, #0]
  4052de:	6962      	ldr	r2, [r4, #20]
  4052e0:	429a      	cmp	r2, r3
  4052e2:	d01a      	beq.n	40531a <__swbuf_r+0x7e>
  4052e4:	89a3      	ldrh	r3, [r4, #12]
  4052e6:	07db      	lsls	r3, r3, #31
  4052e8:	d501      	bpl.n	4052ee <__swbuf_r+0x52>
  4052ea:	2d0a      	cmp	r5, #10
  4052ec:	d015      	beq.n	40531a <__swbuf_r+0x7e>
  4052ee:	4628      	mov	r0, r5
  4052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4052f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4052f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4052fc:	81a2      	strh	r2, [r4, #12]
  4052fe:	6822      	ldr	r2, [r4, #0]
  405300:	6661      	str	r1, [r4, #100]	; 0x64
  405302:	6961      	ldr	r1, [r4, #20]
  405304:	1ad3      	subs	r3, r2, r3
  405306:	428b      	cmp	r3, r1
  405308:	dbe2      	blt.n	4052d0 <__swbuf_r+0x34>
  40530a:	4621      	mov	r1, r4
  40530c:	4638      	mov	r0, r7
  40530e:	f7fe fc75 	bl	403bfc <_fflush_r>
  405312:	b940      	cbnz	r0, 405326 <__swbuf_r+0x8a>
  405314:	6822      	ldr	r2, [r4, #0]
  405316:	2301      	movs	r3, #1
  405318:	e7db      	b.n	4052d2 <__swbuf_r+0x36>
  40531a:	4621      	mov	r1, r4
  40531c:	4638      	mov	r0, r7
  40531e:	f7fe fc6d 	bl	403bfc <_fflush_r>
  405322:	2800      	cmp	r0, #0
  405324:	d0e3      	beq.n	4052ee <__swbuf_r+0x52>
  405326:	f04f 30ff 	mov.w	r0, #4294967295
  40532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40532c:	4621      	mov	r1, r4
  40532e:	4638      	mov	r0, r7
  405330:	f7fe fb4c 	bl	4039cc <__swsetup_r>
  405334:	2800      	cmp	r0, #0
  405336:	d1f6      	bne.n	405326 <__swbuf_r+0x8a>
  405338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40533c:	6923      	ldr	r3, [r4, #16]
  40533e:	b291      	uxth	r1, r2
  405340:	e7be      	b.n	4052c0 <__swbuf_r+0x24>
  405342:	f7fe fcef 	bl	403d24 <__sinit>
  405346:	e7b1      	b.n	4052ac <__swbuf_r+0x10>

00405348 <_wcrtomb_r>:
  405348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40534c:	4605      	mov	r5, r0
  40534e:	b086      	sub	sp, #24
  405350:	461e      	mov	r6, r3
  405352:	460c      	mov	r4, r1
  405354:	b1a1      	cbz	r1, 405380 <_wcrtomb_r+0x38>
  405356:	4b10      	ldr	r3, [pc, #64]	; (405398 <_wcrtomb_r+0x50>)
  405358:	4617      	mov	r7, r2
  40535a:	f8d3 8000 	ldr.w	r8, [r3]
  40535e:	f7ff f83f 	bl	4043e0 <__locale_charset>
  405362:	9600      	str	r6, [sp, #0]
  405364:	4603      	mov	r3, r0
  405366:	463a      	mov	r2, r7
  405368:	4621      	mov	r1, r4
  40536a:	4628      	mov	r0, r5
  40536c:	47c0      	blx	r8
  40536e:	1c43      	adds	r3, r0, #1
  405370:	d103      	bne.n	40537a <_wcrtomb_r+0x32>
  405372:	2200      	movs	r2, #0
  405374:	238a      	movs	r3, #138	; 0x8a
  405376:	6032      	str	r2, [r6, #0]
  405378:	602b      	str	r3, [r5, #0]
  40537a:	b006      	add	sp, #24
  40537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405380:	4b05      	ldr	r3, [pc, #20]	; (405398 <_wcrtomb_r+0x50>)
  405382:	681f      	ldr	r7, [r3, #0]
  405384:	f7ff f82c 	bl	4043e0 <__locale_charset>
  405388:	9600      	str	r6, [sp, #0]
  40538a:	4603      	mov	r3, r0
  40538c:	4622      	mov	r2, r4
  40538e:	a903      	add	r1, sp, #12
  405390:	4628      	mov	r0, r5
  405392:	47b8      	blx	r7
  405394:	e7eb      	b.n	40536e <_wcrtomb_r+0x26>
  405396:	bf00      	nop
  405398:	20400868 	.word	0x20400868

0040539c <__ascii_wctomb>:
  40539c:	b121      	cbz	r1, 4053a8 <__ascii_wctomb+0xc>
  40539e:	2aff      	cmp	r2, #255	; 0xff
  4053a0:	d804      	bhi.n	4053ac <__ascii_wctomb+0x10>
  4053a2:	700a      	strb	r2, [r1, #0]
  4053a4:	2001      	movs	r0, #1
  4053a6:	4770      	bx	lr
  4053a8:	4608      	mov	r0, r1
  4053aa:	4770      	bx	lr
  4053ac:	238a      	movs	r3, #138	; 0x8a
  4053ae:	6003      	str	r3, [r0, #0]
  4053b0:	f04f 30ff 	mov.w	r0, #4294967295
  4053b4:	4770      	bx	lr
  4053b6:	bf00      	nop

004053b8 <_write_r>:
  4053b8:	b570      	push	{r4, r5, r6, lr}
  4053ba:	460d      	mov	r5, r1
  4053bc:	4c08      	ldr	r4, [pc, #32]	; (4053e0 <_write_r+0x28>)
  4053be:	4611      	mov	r1, r2
  4053c0:	4606      	mov	r6, r0
  4053c2:	461a      	mov	r2, r3
  4053c4:	4628      	mov	r0, r5
  4053c6:	2300      	movs	r3, #0
  4053c8:	6023      	str	r3, [r4, #0]
  4053ca:	f7fb f8cf 	bl	40056c <_write>
  4053ce:	1c43      	adds	r3, r0, #1
  4053d0:	d000      	beq.n	4053d4 <_write_r+0x1c>
  4053d2:	bd70      	pop	{r4, r5, r6, pc}
  4053d4:	6823      	ldr	r3, [r4, #0]
  4053d6:	2b00      	cmp	r3, #0
  4053d8:	d0fb      	beq.n	4053d2 <_write_r+0x1a>
  4053da:	6033      	str	r3, [r6, #0]
  4053dc:	bd70      	pop	{r4, r5, r6, pc}
  4053de:	bf00      	nop
  4053e0:	20400a48 	.word	0x20400a48

004053e4 <__register_exitproc>:
  4053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053e8:	4c25      	ldr	r4, [pc, #148]	; (405480 <__register_exitproc+0x9c>)
  4053ea:	6825      	ldr	r5, [r4, #0]
  4053ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4053f0:	4606      	mov	r6, r0
  4053f2:	4688      	mov	r8, r1
  4053f4:	4692      	mov	sl, r2
  4053f6:	4699      	mov	r9, r3
  4053f8:	b3c4      	cbz	r4, 40546c <__register_exitproc+0x88>
  4053fa:	6860      	ldr	r0, [r4, #4]
  4053fc:	281f      	cmp	r0, #31
  4053fe:	dc17      	bgt.n	405430 <__register_exitproc+0x4c>
  405400:	1c43      	adds	r3, r0, #1
  405402:	b176      	cbz	r6, 405422 <__register_exitproc+0x3e>
  405404:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405408:	2201      	movs	r2, #1
  40540a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40540e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405412:	4082      	lsls	r2, r0
  405414:	4311      	orrs	r1, r2
  405416:	2e02      	cmp	r6, #2
  405418:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40541c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405420:	d01e      	beq.n	405460 <__register_exitproc+0x7c>
  405422:	3002      	adds	r0, #2
  405424:	6063      	str	r3, [r4, #4]
  405426:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40542a:	2000      	movs	r0, #0
  40542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405430:	4b14      	ldr	r3, [pc, #80]	; (405484 <__register_exitproc+0xa0>)
  405432:	b303      	cbz	r3, 405476 <__register_exitproc+0x92>
  405434:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405438:	f7ff f850 	bl	4044dc <malloc>
  40543c:	4604      	mov	r4, r0
  40543e:	b1d0      	cbz	r0, 405476 <__register_exitproc+0x92>
  405440:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405444:	2700      	movs	r7, #0
  405446:	e880 0088 	stmia.w	r0, {r3, r7}
  40544a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40544e:	4638      	mov	r0, r7
  405450:	2301      	movs	r3, #1
  405452:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  405456:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40545a:	2e00      	cmp	r6, #0
  40545c:	d0e1      	beq.n	405422 <__register_exitproc+0x3e>
  40545e:	e7d1      	b.n	405404 <__register_exitproc+0x20>
  405460:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405464:	430a      	orrs	r2, r1
  405466:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40546a:	e7da      	b.n	405422 <__register_exitproc+0x3e>
  40546c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405470:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405474:	e7c1      	b.n	4053fa <__register_exitproc+0x16>
  405476:	f04f 30ff 	mov.w	r0, #4294967295
  40547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40547e:	bf00      	nop
  405480:	00405948 	.word	0x00405948
  405484:	004044dd 	.word	0x004044dd

00405488 <_close_r>:
  405488:	b538      	push	{r3, r4, r5, lr}
  40548a:	4c07      	ldr	r4, [pc, #28]	; (4054a8 <_close_r+0x20>)
  40548c:	2300      	movs	r3, #0
  40548e:	4605      	mov	r5, r0
  405490:	4608      	mov	r0, r1
  405492:	6023      	str	r3, [r4, #0]
  405494:	f7fc fc86 	bl	401da4 <_close>
  405498:	1c43      	adds	r3, r0, #1
  40549a:	d000      	beq.n	40549e <_close_r+0x16>
  40549c:	bd38      	pop	{r3, r4, r5, pc}
  40549e:	6823      	ldr	r3, [r4, #0]
  4054a0:	2b00      	cmp	r3, #0
  4054a2:	d0fb      	beq.n	40549c <_close_r+0x14>
  4054a4:	602b      	str	r3, [r5, #0]
  4054a6:	bd38      	pop	{r3, r4, r5, pc}
  4054a8:	20400a48 	.word	0x20400a48

004054ac <_fclose_r>:
  4054ac:	2900      	cmp	r1, #0
  4054ae:	d03d      	beq.n	40552c <_fclose_r+0x80>
  4054b0:	b570      	push	{r4, r5, r6, lr}
  4054b2:	4605      	mov	r5, r0
  4054b4:	460c      	mov	r4, r1
  4054b6:	b108      	cbz	r0, 4054bc <_fclose_r+0x10>
  4054b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4054ba:	b37b      	cbz	r3, 40551c <_fclose_r+0x70>
  4054bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054c0:	b90b      	cbnz	r3, 4054c6 <_fclose_r+0x1a>
  4054c2:	2000      	movs	r0, #0
  4054c4:	bd70      	pop	{r4, r5, r6, pc}
  4054c6:	4621      	mov	r1, r4
  4054c8:	4628      	mov	r0, r5
  4054ca:	f7fe faf3 	bl	403ab4 <__sflush_r>
  4054ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4054d0:	4606      	mov	r6, r0
  4054d2:	b133      	cbz	r3, 4054e2 <_fclose_r+0x36>
  4054d4:	69e1      	ldr	r1, [r4, #28]
  4054d6:	4628      	mov	r0, r5
  4054d8:	4798      	blx	r3
  4054da:	2800      	cmp	r0, #0
  4054dc:	bfb8      	it	lt
  4054de:	f04f 36ff 	movlt.w	r6, #4294967295
  4054e2:	89a3      	ldrh	r3, [r4, #12]
  4054e4:	061b      	lsls	r3, r3, #24
  4054e6:	d41c      	bmi.n	405522 <_fclose_r+0x76>
  4054e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4054ea:	b141      	cbz	r1, 4054fe <_fclose_r+0x52>
  4054ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4054f0:	4299      	cmp	r1, r3
  4054f2:	d002      	beq.n	4054fa <_fclose_r+0x4e>
  4054f4:	4628      	mov	r0, r5
  4054f6:	f7fe fcdf 	bl	403eb8 <_free_r>
  4054fa:	2300      	movs	r3, #0
  4054fc:	6323      	str	r3, [r4, #48]	; 0x30
  4054fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405500:	b121      	cbz	r1, 40550c <_fclose_r+0x60>
  405502:	4628      	mov	r0, r5
  405504:	f7fe fcd8 	bl	403eb8 <_free_r>
  405508:	2300      	movs	r3, #0
  40550a:	6463      	str	r3, [r4, #68]	; 0x44
  40550c:	f7fe fc10 	bl	403d30 <__sfp_lock_acquire>
  405510:	2300      	movs	r3, #0
  405512:	81a3      	strh	r3, [r4, #12]
  405514:	f7fe fc0e 	bl	403d34 <__sfp_lock_release>
  405518:	4630      	mov	r0, r6
  40551a:	bd70      	pop	{r4, r5, r6, pc}
  40551c:	f7fe fc02 	bl	403d24 <__sinit>
  405520:	e7cc      	b.n	4054bc <_fclose_r+0x10>
  405522:	6921      	ldr	r1, [r4, #16]
  405524:	4628      	mov	r0, r5
  405526:	f7fe fcc7 	bl	403eb8 <_free_r>
  40552a:	e7dd      	b.n	4054e8 <_fclose_r+0x3c>
  40552c:	2000      	movs	r0, #0
  40552e:	4770      	bx	lr

00405530 <_fstat_r>:
  405530:	b538      	push	{r3, r4, r5, lr}
  405532:	460b      	mov	r3, r1
  405534:	4c07      	ldr	r4, [pc, #28]	; (405554 <_fstat_r+0x24>)
  405536:	4605      	mov	r5, r0
  405538:	4611      	mov	r1, r2
  40553a:	4618      	mov	r0, r3
  40553c:	2300      	movs	r3, #0
  40553e:	6023      	str	r3, [r4, #0]
  405540:	f7fc fc3c 	bl	401dbc <_fstat>
  405544:	1c43      	adds	r3, r0, #1
  405546:	d000      	beq.n	40554a <_fstat_r+0x1a>
  405548:	bd38      	pop	{r3, r4, r5, pc}
  40554a:	6823      	ldr	r3, [r4, #0]
  40554c:	2b00      	cmp	r3, #0
  40554e:	d0fb      	beq.n	405548 <_fstat_r+0x18>
  405550:	602b      	str	r3, [r5, #0]
  405552:	bd38      	pop	{r3, r4, r5, pc}
  405554:	20400a48 	.word	0x20400a48

00405558 <_isatty_r>:
  405558:	b538      	push	{r3, r4, r5, lr}
  40555a:	4c07      	ldr	r4, [pc, #28]	; (405578 <_isatty_r+0x20>)
  40555c:	2300      	movs	r3, #0
  40555e:	4605      	mov	r5, r0
  405560:	4608      	mov	r0, r1
  405562:	6023      	str	r3, [r4, #0]
  405564:	f7fc fc3a 	bl	401ddc <_isatty>
  405568:	1c43      	adds	r3, r0, #1
  40556a:	d000      	beq.n	40556e <_isatty_r+0x16>
  40556c:	bd38      	pop	{r3, r4, r5, pc}
  40556e:	6823      	ldr	r3, [r4, #0]
  405570:	2b00      	cmp	r3, #0
  405572:	d0fb      	beq.n	40556c <_isatty_r+0x14>
  405574:	602b      	str	r3, [r5, #0]
  405576:	bd38      	pop	{r3, r4, r5, pc}
  405578:	20400a48 	.word	0x20400a48

0040557c <_lseek_r>:
  40557c:	b570      	push	{r4, r5, r6, lr}
  40557e:	460d      	mov	r5, r1
  405580:	4c08      	ldr	r4, [pc, #32]	; (4055a4 <_lseek_r+0x28>)
  405582:	4611      	mov	r1, r2
  405584:	4606      	mov	r6, r0
  405586:	461a      	mov	r2, r3
  405588:	4628      	mov	r0, r5
  40558a:	2300      	movs	r3, #0
  40558c:	6023      	str	r3, [r4, #0]
  40558e:	f7fc fc31 	bl	401df4 <_lseek>
  405592:	1c43      	adds	r3, r0, #1
  405594:	d000      	beq.n	405598 <_lseek_r+0x1c>
  405596:	bd70      	pop	{r4, r5, r6, pc}
  405598:	6823      	ldr	r3, [r4, #0]
  40559a:	2b00      	cmp	r3, #0
  40559c:	d0fb      	beq.n	405596 <_lseek_r+0x1a>
  40559e:	6033      	str	r3, [r6, #0]
  4055a0:	bd70      	pop	{r4, r5, r6, pc}
  4055a2:	bf00      	nop
  4055a4:	20400a48 	.word	0x20400a48

004055a8 <_read_r>:
  4055a8:	b570      	push	{r4, r5, r6, lr}
  4055aa:	460d      	mov	r5, r1
  4055ac:	4c08      	ldr	r4, [pc, #32]	; (4055d0 <_read_r+0x28>)
  4055ae:	4611      	mov	r1, r2
  4055b0:	4606      	mov	r6, r0
  4055b2:	461a      	mov	r2, r3
  4055b4:	4628      	mov	r0, r5
  4055b6:	2300      	movs	r3, #0
  4055b8:	6023      	str	r3, [r4, #0]
  4055ba:	f7fa ffad 	bl	400518 <_read>
  4055be:	1c43      	adds	r3, r0, #1
  4055c0:	d000      	beq.n	4055c4 <_read_r+0x1c>
  4055c2:	bd70      	pop	{r4, r5, r6, pc}
  4055c4:	6823      	ldr	r3, [r4, #0]
  4055c6:	2b00      	cmp	r3, #0
  4055c8:	d0fb      	beq.n	4055c2 <_read_r+0x1a>
  4055ca:	6033      	str	r3, [r6, #0]
  4055cc:	bd70      	pop	{r4, r5, r6, pc}
  4055ce:	bf00      	nop
  4055d0:	20400a48 	.word	0x20400a48

004055d4 <__aeabi_uldivmod>:
  4055d4:	b953      	cbnz	r3, 4055ec <__aeabi_uldivmod+0x18>
  4055d6:	b94a      	cbnz	r2, 4055ec <__aeabi_uldivmod+0x18>
  4055d8:	2900      	cmp	r1, #0
  4055da:	bf08      	it	eq
  4055dc:	2800      	cmpeq	r0, #0
  4055de:	bf1c      	itt	ne
  4055e0:	f04f 31ff 	movne.w	r1, #4294967295
  4055e4:	f04f 30ff 	movne.w	r0, #4294967295
  4055e8:	f000 b97e 	b.w	4058e8 <__aeabi_idiv0>
  4055ec:	f1ad 0c08 	sub.w	ip, sp, #8
  4055f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4055f4:	f000 f806 	bl	405604 <__udivmoddi4>
  4055f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4055fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405600:	b004      	add	sp, #16
  405602:	4770      	bx	lr

00405604 <__udivmoddi4>:
  405604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405608:	468c      	mov	ip, r1
  40560a:	460e      	mov	r6, r1
  40560c:	4604      	mov	r4, r0
  40560e:	9d08      	ldr	r5, [sp, #32]
  405610:	2b00      	cmp	r3, #0
  405612:	d150      	bne.n	4056b6 <__udivmoddi4+0xb2>
  405614:	428a      	cmp	r2, r1
  405616:	4617      	mov	r7, r2
  405618:	d96c      	bls.n	4056f4 <__udivmoddi4+0xf0>
  40561a:	fab2 fe82 	clz	lr, r2
  40561e:	f1be 0f00 	cmp.w	lr, #0
  405622:	d00b      	beq.n	40563c <__udivmoddi4+0x38>
  405624:	f1ce 0420 	rsb	r4, lr, #32
  405628:	fa20 f404 	lsr.w	r4, r0, r4
  40562c:	fa01 f60e 	lsl.w	r6, r1, lr
  405630:	ea44 0c06 	orr.w	ip, r4, r6
  405634:	fa02 f70e 	lsl.w	r7, r2, lr
  405638:	fa00 f40e 	lsl.w	r4, r0, lr
  40563c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  405640:	0c22      	lsrs	r2, r4, #16
  405642:	fbbc f0f9 	udiv	r0, ip, r9
  405646:	fa1f f887 	uxth.w	r8, r7
  40564a:	fb09 c610 	mls	r6, r9, r0, ip
  40564e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  405652:	fb00 f308 	mul.w	r3, r0, r8
  405656:	42b3      	cmp	r3, r6
  405658:	d909      	bls.n	40566e <__udivmoddi4+0x6a>
  40565a:	19f6      	adds	r6, r6, r7
  40565c:	f100 32ff 	add.w	r2, r0, #4294967295
  405660:	f080 8122 	bcs.w	4058a8 <__udivmoddi4+0x2a4>
  405664:	42b3      	cmp	r3, r6
  405666:	f240 811f 	bls.w	4058a8 <__udivmoddi4+0x2a4>
  40566a:	3802      	subs	r0, #2
  40566c:	443e      	add	r6, r7
  40566e:	1af6      	subs	r6, r6, r3
  405670:	b2a2      	uxth	r2, r4
  405672:	fbb6 f3f9 	udiv	r3, r6, r9
  405676:	fb09 6613 	mls	r6, r9, r3, r6
  40567a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40567e:	fb03 f808 	mul.w	r8, r3, r8
  405682:	45a0      	cmp	r8, r4
  405684:	d909      	bls.n	40569a <__udivmoddi4+0x96>
  405686:	19e4      	adds	r4, r4, r7
  405688:	f103 32ff 	add.w	r2, r3, #4294967295
  40568c:	f080 810a 	bcs.w	4058a4 <__udivmoddi4+0x2a0>
  405690:	45a0      	cmp	r8, r4
  405692:	f240 8107 	bls.w	4058a4 <__udivmoddi4+0x2a0>
  405696:	3b02      	subs	r3, #2
  405698:	443c      	add	r4, r7
  40569a:	ebc8 0404 	rsb	r4, r8, r4
  40569e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4056a2:	2100      	movs	r1, #0
  4056a4:	2d00      	cmp	r5, #0
  4056a6:	d062      	beq.n	40576e <__udivmoddi4+0x16a>
  4056a8:	fa24 f40e 	lsr.w	r4, r4, lr
  4056ac:	2300      	movs	r3, #0
  4056ae:	602c      	str	r4, [r5, #0]
  4056b0:	606b      	str	r3, [r5, #4]
  4056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056b6:	428b      	cmp	r3, r1
  4056b8:	d907      	bls.n	4056ca <__udivmoddi4+0xc6>
  4056ba:	2d00      	cmp	r5, #0
  4056bc:	d055      	beq.n	40576a <__udivmoddi4+0x166>
  4056be:	2100      	movs	r1, #0
  4056c0:	e885 0041 	stmia.w	r5, {r0, r6}
  4056c4:	4608      	mov	r0, r1
  4056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056ca:	fab3 f183 	clz	r1, r3
  4056ce:	2900      	cmp	r1, #0
  4056d0:	f040 8090 	bne.w	4057f4 <__udivmoddi4+0x1f0>
  4056d4:	42b3      	cmp	r3, r6
  4056d6:	d302      	bcc.n	4056de <__udivmoddi4+0xda>
  4056d8:	4282      	cmp	r2, r0
  4056da:	f200 80f8 	bhi.w	4058ce <__udivmoddi4+0x2ca>
  4056de:	1a84      	subs	r4, r0, r2
  4056e0:	eb66 0603 	sbc.w	r6, r6, r3
  4056e4:	2001      	movs	r0, #1
  4056e6:	46b4      	mov	ip, r6
  4056e8:	2d00      	cmp	r5, #0
  4056ea:	d040      	beq.n	40576e <__udivmoddi4+0x16a>
  4056ec:	e885 1010 	stmia.w	r5, {r4, ip}
  4056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056f4:	b912      	cbnz	r2, 4056fc <__udivmoddi4+0xf8>
  4056f6:	2701      	movs	r7, #1
  4056f8:	fbb7 f7f2 	udiv	r7, r7, r2
  4056fc:	fab7 fe87 	clz	lr, r7
  405700:	f1be 0f00 	cmp.w	lr, #0
  405704:	d135      	bne.n	405772 <__udivmoddi4+0x16e>
  405706:	1bf3      	subs	r3, r6, r7
  405708:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40570c:	fa1f fc87 	uxth.w	ip, r7
  405710:	2101      	movs	r1, #1
  405712:	fbb3 f0f8 	udiv	r0, r3, r8
  405716:	0c22      	lsrs	r2, r4, #16
  405718:	fb08 3610 	mls	r6, r8, r0, r3
  40571c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  405720:	fb0c f300 	mul.w	r3, ip, r0
  405724:	42b3      	cmp	r3, r6
  405726:	d907      	bls.n	405738 <__udivmoddi4+0x134>
  405728:	19f6      	adds	r6, r6, r7
  40572a:	f100 32ff 	add.w	r2, r0, #4294967295
  40572e:	d202      	bcs.n	405736 <__udivmoddi4+0x132>
  405730:	42b3      	cmp	r3, r6
  405732:	f200 80ce 	bhi.w	4058d2 <__udivmoddi4+0x2ce>
  405736:	4610      	mov	r0, r2
  405738:	1af6      	subs	r6, r6, r3
  40573a:	b2a2      	uxth	r2, r4
  40573c:	fbb6 f3f8 	udiv	r3, r6, r8
  405740:	fb08 6613 	mls	r6, r8, r3, r6
  405744:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  405748:	fb0c fc03 	mul.w	ip, ip, r3
  40574c:	45a4      	cmp	ip, r4
  40574e:	d907      	bls.n	405760 <__udivmoddi4+0x15c>
  405750:	19e4      	adds	r4, r4, r7
  405752:	f103 32ff 	add.w	r2, r3, #4294967295
  405756:	d202      	bcs.n	40575e <__udivmoddi4+0x15a>
  405758:	45a4      	cmp	ip, r4
  40575a:	f200 80b5 	bhi.w	4058c8 <__udivmoddi4+0x2c4>
  40575e:	4613      	mov	r3, r2
  405760:	ebcc 0404 	rsb	r4, ip, r4
  405764:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  405768:	e79c      	b.n	4056a4 <__udivmoddi4+0xa0>
  40576a:	4629      	mov	r1, r5
  40576c:	4628      	mov	r0, r5
  40576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405772:	f1ce 0120 	rsb	r1, lr, #32
  405776:	fa06 f30e 	lsl.w	r3, r6, lr
  40577a:	fa07 f70e 	lsl.w	r7, r7, lr
  40577e:	fa20 f901 	lsr.w	r9, r0, r1
  405782:	ea4f 4817 	mov.w	r8, r7, lsr #16
  405786:	40ce      	lsrs	r6, r1
  405788:	ea49 0903 	orr.w	r9, r9, r3
  40578c:	fbb6 faf8 	udiv	sl, r6, r8
  405790:	ea4f 4419 	mov.w	r4, r9, lsr #16
  405794:	fb08 661a 	mls	r6, r8, sl, r6
  405798:	fa1f fc87 	uxth.w	ip, r7
  40579c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4057a0:	fb0a f20c 	mul.w	r2, sl, ip
  4057a4:	429a      	cmp	r2, r3
  4057a6:	fa00 f40e 	lsl.w	r4, r0, lr
  4057aa:	d90a      	bls.n	4057c2 <__udivmoddi4+0x1be>
  4057ac:	19db      	adds	r3, r3, r7
  4057ae:	f10a 31ff 	add.w	r1, sl, #4294967295
  4057b2:	f080 8087 	bcs.w	4058c4 <__udivmoddi4+0x2c0>
  4057b6:	429a      	cmp	r2, r3
  4057b8:	f240 8084 	bls.w	4058c4 <__udivmoddi4+0x2c0>
  4057bc:	f1aa 0a02 	sub.w	sl, sl, #2
  4057c0:	443b      	add	r3, r7
  4057c2:	1a9b      	subs	r3, r3, r2
  4057c4:	fa1f f989 	uxth.w	r9, r9
  4057c8:	fbb3 f1f8 	udiv	r1, r3, r8
  4057cc:	fb08 3311 	mls	r3, r8, r1, r3
  4057d0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4057d4:	fb01 f60c 	mul.w	r6, r1, ip
  4057d8:	429e      	cmp	r6, r3
  4057da:	d907      	bls.n	4057ec <__udivmoddi4+0x1e8>
  4057dc:	19db      	adds	r3, r3, r7
  4057de:	f101 32ff 	add.w	r2, r1, #4294967295
  4057e2:	d26b      	bcs.n	4058bc <__udivmoddi4+0x2b8>
  4057e4:	429e      	cmp	r6, r3
  4057e6:	d969      	bls.n	4058bc <__udivmoddi4+0x2b8>
  4057e8:	3902      	subs	r1, #2
  4057ea:	443b      	add	r3, r7
  4057ec:	1b9b      	subs	r3, r3, r6
  4057ee:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4057f2:	e78e      	b.n	405712 <__udivmoddi4+0x10e>
  4057f4:	f1c1 0e20 	rsb	lr, r1, #32
  4057f8:	fa22 f40e 	lsr.w	r4, r2, lr
  4057fc:	408b      	lsls	r3, r1
  4057fe:	4323      	orrs	r3, r4
  405800:	fa20 f70e 	lsr.w	r7, r0, lr
  405804:	fa06 f401 	lsl.w	r4, r6, r1
  405808:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40580c:	fa26 f60e 	lsr.w	r6, r6, lr
  405810:	433c      	orrs	r4, r7
  405812:	fbb6 f9fc 	udiv	r9, r6, ip
  405816:	0c27      	lsrs	r7, r4, #16
  405818:	fb0c 6619 	mls	r6, ip, r9, r6
  40581c:	fa1f f883 	uxth.w	r8, r3
  405820:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  405824:	fb09 f708 	mul.w	r7, r9, r8
  405828:	42b7      	cmp	r7, r6
  40582a:	fa02 f201 	lsl.w	r2, r2, r1
  40582e:	fa00 fa01 	lsl.w	sl, r0, r1
  405832:	d908      	bls.n	405846 <__udivmoddi4+0x242>
  405834:	18f6      	adds	r6, r6, r3
  405836:	f109 30ff 	add.w	r0, r9, #4294967295
  40583a:	d241      	bcs.n	4058c0 <__udivmoddi4+0x2bc>
  40583c:	42b7      	cmp	r7, r6
  40583e:	d93f      	bls.n	4058c0 <__udivmoddi4+0x2bc>
  405840:	f1a9 0902 	sub.w	r9, r9, #2
  405844:	441e      	add	r6, r3
  405846:	1bf6      	subs	r6, r6, r7
  405848:	b2a0      	uxth	r0, r4
  40584a:	fbb6 f4fc 	udiv	r4, r6, ip
  40584e:	fb0c 6614 	mls	r6, ip, r4, r6
  405852:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  405856:	fb04 f808 	mul.w	r8, r4, r8
  40585a:	45b8      	cmp	r8, r7
  40585c:	d907      	bls.n	40586e <__udivmoddi4+0x26a>
  40585e:	18ff      	adds	r7, r7, r3
  405860:	f104 30ff 	add.w	r0, r4, #4294967295
  405864:	d228      	bcs.n	4058b8 <__udivmoddi4+0x2b4>
  405866:	45b8      	cmp	r8, r7
  405868:	d926      	bls.n	4058b8 <__udivmoddi4+0x2b4>
  40586a:	3c02      	subs	r4, #2
  40586c:	441f      	add	r7, r3
  40586e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  405872:	ebc8 0707 	rsb	r7, r8, r7
  405876:	fba0 8902 	umull	r8, r9, r0, r2
  40587a:	454f      	cmp	r7, r9
  40587c:	4644      	mov	r4, r8
  40587e:	464e      	mov	r6, r9
  405880:	d314      	bcc.n	4058ac <__udivmoddi4+0x2a8>
  405882:	d029      	beq.n	4058d8 <__udivmoddi4+0x2d4>
  405884:	b365      	cbz	r5, 4058e0 <__udivmoddi4+0x2dc>
  405886:	ebba 0304 	subs.w	r3, sl, r4
  40588a:	eb67 0706 	sbc.w	r7, r7, r6
  40588e:	fa07 fe0e 	lsl.w	lr, r7, lr
  405892:	40cb      	lsrs	r3, r1
  405894:	40cf      	lsrs	r7, r1
  405896:	ea4e 0303 	orr.w	r3, lr, r3
  40589a:	e885 0088 	stmia.w	r5, {r3, r7}
  40589e:	2100      	movs	r1, #0
  4058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058a4:	4613      	mov	r3, r2
  4058a6:	e6f8      	b.n	40569a <__udivmoddi4+0x96>
  4058a8:	4610      	mov	r0, r2
  4058aa:	e6e0      	b.n	40566e <__udivmoddi4+0x6a>
  4058ac:	ebb8 0402 	subs.w	r4, r8, r2
  4058b0:	eb69 0603 	sbc.w	r6, r9, r3
  4058b4:	3801      	subs	r0, #1
  4058b6:	e7e5      	b.n	405884 <__udivmoddi4+0x280>
  4058b8:	4604      	mov	r4, r0
  4058ba:	e7d8      	b.n	40586e <__udivmoddi4+0x26a>
  4058bc:	4611      	mov	r1, r2
  4058be:	e795      	b.n	4057ec <__udivmoddi4+0x1e8>
  4058c0:	4681      	mov	r9, r0
  4058c2:	e7c0      	b.n	405846 <__udivmoddi4+0x242>
  4058c4:	468a      	mov	sl, r1
  4058c6:	e77c      	b.n	4057c2 <__udivmoddi4+0x1be>
  4058c8:	3b02      	subs	r3, #2
  4058ca:	443c      	add	r4, r7
  4058cc:	e748      	b.n	405760 <__udivmoddi4+0x15c>
  4058ce:	4608      	mov	r0, r1
  4058d0:	e70a      	b.n	4056e8 <__udivmoddi4+0xe4>
  4058d2:	3802      	subs	r0, #2
  4058d4:	443e      	add	r6, r7
  4058d6:	e72f      	b.n	405738 <__udivmoddi4+0x134>
  4058d8:	45c2      	cmp	sl, r8
  4058da:	d3e7      	bcc.n	4058ac <__udivmoddi4+0x2a8>
  4058dc:	463e      	mov	r6, r7
  4058de:	e7d1      	b.n	405884 <__udivmoddi4+0x280>
  4058e0:	4629      	mov	r1, r5
  4058e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4058e6:	bf00      	nop

004058e8 <__aeabi_idiv0>:
  4058e8:	4770      	bx	lr
  4058ea:	bf00      	nop
  4058ec:	00000001 	.word	0x00000001
  4058f0:	00000002 	.word	0x00000002
  4058f4:	00000004 	.word	0x00000004
  4058f8:	00000008 	.word	0x00000008
  4058fc:	00000010 	.word	0x00000010
  405900:	00000020 	.word	0x00000020
  405904:	00000040 	.word	0x00000040
  405908:	00000080 	.word	0x00000080
  40590c:	00000100 	.word	0x00000100
  405910:	00000200 	.word	0x00000200
  405914:	00000400 	.word	0x00000400
  405918:	0001c200 	.word	0x0001c200
  40591c:	000000c0 	.word	0x000000c0
  405920:	00000800 	.word	0x00000800
  405924:	00000000 	.word	0x00000000
  405928:	432b5441 	.word	0x432b5441
  40592c:	38414e4f 	.word	0x38414e4f
  405930:	41364231 	.word	0x41364231
  405934:	42344241 	.word	0x42344241
  405938:	00003638 	.word	0x00003638
  40593c:	0a206425 	.word	0x0a206425
  405940:	00000000 	.word	0x00000000
  405944:	00000043 	.word	0x00000043

00405948 <_global_impure_ptr>:
  405948:	20400008                                ..@ 

0040594c <zeroes.6993>:
  40594c:	30303030 30303030 30303030 30303030     0000000000000000
  40595c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40596c:	00000000 33323130 37363534 62613938     ....0123456789ab
  40597c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0040598c <blanks.6992>:
  40598c:	20202020 20202020 20202020 20202020                     

0040599c <_init>:
  40599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40599e:	bf00      	nop
  4059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4059a2:	bc08      	pop	{r3}
  4059a4:	469e      	mov	lr, r3
  4059a6:	4770      	bx	lr

004059a8 <__init_array_start>:
  4059a8:	00403a95 	.word	0x00403a95

004059ac <__frame_dummy_init_array_entry>:
  4059ac:	00400165                                e.@.

004059b0 <_fini>:
  4059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059b2:	bf00      	nop
  4059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4059b6:	bc08      	pop	{r3}
  4059b8:	469e      	mov	lr, r3
  4059ba:	4770      	bx	lr

004059bc <__fini_array_start>:
  4059bc:	00400141 	.word	0x00400141
